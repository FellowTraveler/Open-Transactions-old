# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_otapi', [dirname(__file__)])
        except ImportError:
            import _otapi
            return _otapi
        if fp is not None:
            try:
                _mod = imp.load_module('_otapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _otapi = swig_import_helper()
    del swig_import_helper
else:
    import _otapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


OTPASSWORD_BLOCKSIZE = _otapi.OTPASSWORD_BLOCKSIZE
OTPASSWORD_MEMSIZE = _otapi.OTPASSWORD_MEMSIZE
OT_LARGE_BLOCKSIZE = _otapi.OT_LARGE_BLOCKSIZE
OT_LARGE_MEMSIZE = _otapi.OT_LARGE_MEMSIZE
OT_DEFAULT_BLOCKSIZE = _otapi.OT_DEFAULT_BLOCKSIZE
OT_DEFAULT_MEMSIZE = _otapi.OT_DEFAULT_MEMSIZE
class OTPasswordData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTPasswordData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTPasswordData, name)
    __repr__ = _swig_repr
    def isForNormalNym(self): return _otapi.OTPasswordData_isForNormalNym(self)
    def isForMasterKey(self): return _otapi.OTPasswordData_isForMasterKey(self)
    def GetDisplayString(self): return _otapi.OTPasswordData_GetDisplayString(self)
    def isUsingOldSystem(self): return _otapi.OTPasswordData_isUsingOldSystem(self)
    def setUsingOldSystem(self, bUsing=True): return _otapi.OTPasswordData_setUsingOldSystem(self, bUsing)
    def GetMasterPW(self): return _otapi.OTPasswordData_GetMasterPW(self)
    def __init__(self, *args): 
        this = _otapi.new_OTPasswordData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otapi.delete_OTPasswordData
    __del__ = lambda self : None;
OTPasswordData_swigregister = _otapi.OTPasswordData_swigregister
OTPasswordData_swigregister(OTPasswordData)

class OTPassword(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTPassword, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTPassword, name)
    __repr__ = _swig_repr
    DEFAULT_SIZE = _otapi.OTPassword_DEFAULT_SIZE
    LARGER_SIZE = _otapi.OTPassword_LARGER_SIZE
    __swig_getmethods__["m_theBlockSize"] = _otapi.OTPassword_m_theBlockSize_get
    if _newclass:m_theBlockSize = _swig_property(_otapi.OTPassword_m_theBlockSize_get)
    def isPassword(self): return _otapi.OTPassword_isPassword(self)
    def getPassword_uint8(self): return _otapi.OTPassword_getPassword_uint8(self)
    def getPassword(self): return _otapi.OTPassword_getPassword(self)
    def getPasswordWritable(self): return _otapi.OTPassword_getPasswordWritable(self)
    def getPasswordWritable_char(self): return _otapi.OTPassword_getPasswordWritable_char(self)
    def setPassword(self, *args): return _otapi.OTPassword_setPassword(self, *args)
    def setPassword_uint8(self, *args): return _otapi.OTPassword_setPassword_uint8(self, *args)
    def addChar(self, *args): return _otapi.OTPassword_addChar(self, *args)
    __swig_getmethods__["randomizePassword_uint8"] = lambda x: _otapi.OTPassword_randomizePassword_uint8
    if _newclass:randomizePassword_uint8 = staticmethod(_otapi.OTPassword_randomizePassword_uint8)
    __swig_getmethods__["randomizePassword"] = lambda x: _otapi.OTPassword_randomizePassword
    if _newclass:randomizePassword = staticmethod(_otapi.OTPassword_randomizePassword)
    def isMemory(self): return _otapi.OTPassword_isMemory(self)
    def getMemory(self): return _otapi.OTPassword_getMemory(self)
    def getMemory_uint8(self): return _otapi.OTPassword_getMemory_uint8(self)
    def getMemoryWritable(self): return _otapi.OTPassword_getMemoryWritable(self)
    def setMemory(self, *args): return _otapi.OTPassword_setMemory(self, *args)
    def addMemory(self, *args): return _otapi.OTPassword_addMemory(self, *args)
    __swig_getmethods__["randomizeMemory_uint8"] = lambda x: _otapi.OTPassword_randomizeMemory_uint8
    if _newclass:randomizeMemory_uint8 = staticmethod(_otapi.OTPassword_randomizeMemory_uint8)
    __swig_getmethods__["randomizeMemory"] = lambda x: _otapi.OTPassword_randomizeMemory
    if _newclass:randomizeMemory = staticmethod(_otapi.OTPassword_randomizeMemory)
    def getBlockSize(self): return _otapi.OTPassword_getBlockSize(self)
    def Compare(self, *args): return _otapi.OTPassword_Compare(self, *args)
    def getPasswordSize(self): return _otapi.OTPassword_getPasswordSize(self)
    def getMemorySize(self): return _otapi.OTPassword_getMemorySize(self)
    __swig_getmethods__["zeroMemory"] = lambda x: _otapi.OTPassword_zeroMemory
    if _newclass:zeroMemory = staticmethod(_otapi.OTPassword_zeroMemory)
    __swig_getmethods__["safe_memcpy"] = lambda x: _otapi.OTPassword_safe_memcpy
    if _newclass:safe_memcpy = staticmethod(_otapi.OTPassword_safe_memcpy)
    def __init__(self, *args): 
        this = _otapi.new_OTPassword(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otapi.delete_OTPassword
    __del__ = lambda self : None;
OTPassword_swigregister = _otapi.OTPassword_swigregister
OTPassword_swigregister(OTPassword)

def OTPassword_randomizePassword_uint8(*args):
  return _otapi.OTPassword_randomizePassword_uint8(*args)
OTPassword_randomizePassword_uint8 = _otapi.OTPassword_randomizePassword_uint8

def OTPassword_randomizePassword(*args):
  return _otapi.OTPassword_randomizePassword(*args)
OTPassword_randomizePassword = _otapi.OTPassword_randomizePassword

def OTPassword_randomizeMemory_uint8(*args):
  return _otapi.OTPassword_randomizeMemory_uint8(*args)
OTPassword_randomizeMemory_uint8 = _otapi.OTPassword_randomizeMemory_uint8

def OTPassword_randomizeMemory(*args):
  return _otapi.OTPassword_randomizeMemory(*args)
OTPassword_randomizeMemory = _otapi.OTPassword_randomizeMemory

def OTPassword_zeroMemory(*args):
  return _otapi.OTPassword_zeroMemory(*args)
OTPassword_zeroMemory = _otapi.OTPassword_zeroMemory

def OTPassword_safe_memcpy(*args):
  return _otapi.OTPassword_safe_memcpy(*args)
OTPassword_safe_memcpy = _otapi.OTPassword_safe_memcpy

class OTCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == OTCallback:
            _self = None
        else:
            _self = self
        this = _otapi.new_OTCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otapi.delete_OTCallback
    __del__ = lambda self : None;
    def runOne(self, *args): return _otapi.OTCallback_runOne(self, *args)
    def runTwo(self, *args): return _otapi.OTCallback_runTwo(self, *args)
    def __disown__(self):
        self.this.disown()
        _otapi.disown_OTCallback(self)
        return weakref_proxy(self)
OTCallback_swigregister = _otapi.OTCallback_swigregister
OTCallback_swigregister(OTCallback)

class OTCaller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTCaller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTCaller, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _otapi.new_OTCaller()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otapi.delete_OTCaller
    __del__ = lambda self : None;
    def GetPassword(self, *args): return _otapi.OTCaller_GetPassword(self, *args)
    def ZeroOutPassword(self): return _otapi.OTCaller_ZeroOutPassword(self)
    def GetDisplay(self): return _otapi.OTCaller_GetDisplay(self)
    def SetDisplay(self, *args): return _otapi.OTCaller_SetDisplay(self, *args)
    def delCallback(self): return _otapi.OTCaller_delCallback(self)
    def setCallback(self, *args): return _otapi.OTCaller_setCallback(self, *args)
    def isCallbackSet(self): return _otapi.OTCaller_isCallbackSet(self)
    def callOne(self): return _otapi.OTCaller_callOne(self)
    def callTwo(self): return _otapi.OTCaller_callTwo(self)
OTCaller_swigregister = _otapi.OTCaller_swigregister
OTCaller_swigregister(OTCaller)


def OT_API_Set_PasswordCallback(*args):
  return _otapi.OT_API_Set_PasswordCallback(*args)
OT_API_Set_PasswordCallback = _otapi.OT_API_Set_PasswordCallback

def OT_API_Init(*args):
  return _otapi.OT_API_Init(*args)
OT_API_Init = _otapi.OT_API_Init

def OT_API_LoadWallet(*args):
  return _otapi.OT_API_LoadWallet(*args)
OT_API_LoadWallet = _otapi.OT_API_LoadWallet

def OT_API_SwitchWallet(*args):
  return _otapi.OT_API_SwitchWallet(*args)
OT_API_SwitchWallet = _otapi.OT_API_SwitchWallet

def OT_API_Output(*args):
  return _otapi.OT_API_Output(*args)
OT_API_Output = _otapi.OT_API_Output

def OT_API_GetTime():
  return _otapi.OT_API_GetTime()
OT_API_GetTime = _otapi.OT_API_GetTime

def OT_API_Encode(*args):
  return _otapi.OT_API_Encode(*args)
OT_API_Encode = _otapi.OT_API_Encode

def OT_API_Decode(*args):
  return _otapi.OT_API_Decode(*args)
OT_API_Decode = _otapi.OT_API_Decode

def OT_API_Encrypt(*args):
  return _otapi.OT_API_Encrypt(*args)
OT_API_Encrypt = _otapi.OT_API_Encrypt

def OT_API_Decrypt(*args):
  return _otapi.OT_API_Decrypt(*args)
OT_API_Decrypt = _otapi.OT_API_Decrypt

def OT_API_CreateSymmetricKey():
  return _otapi.OT_API_CreateSymmetricKey()
OT_API_CreateSymmetricKey = _otapi.OT_API_CreateSymmetricKey

def OT_API_SymmetricEncrypt(*args):
  return _otapi.OT_API_SymmetricEncrypt(*args)
OT_API_SymmetricEncrypt = _otapi.OT_API_SymmetricEncrypt

def OT_API_SymmetricDecrypt(*args):
  return _otapi.OT_API_SymmetricDecrypt(*args)
OT_API_SymmetricDecrypt = _otapi.OT_API_SymmetricDecrypt

def OT_API_SignContract(*args):
  return _otapi.OT_API_SignContract(*args)
OT_API_SignContract = _otapi.OT_API_SignContract

def OT_API_AddSignature(*args):
  return _otapi.OT_API_AddSignature(*args)
OT_API_AddSignature = _otapi.OT_API_AddSignature

def OT_API_VerifySignature(*args):
  return _otapi.OT_API_VerifySignature(*args)
OT_API_VerifySignature = _otapi.OT_API_VerifySignature

def OT_API_VerifyAndRetrieveXMLContents(*args):
  return _otapi.OT_API_VerifyAndRetrieveXMLContents(*args)
OT_API_VerifyAndRetrieveXMLContents = _otapi.OT_API_VerifyAndRetrieveXMLContents

def OT_API_GetMemlogSize():
  return _otapi.OT_API_GetMemlogSize()
OT_API_GetMemlogSize = _otapi.OT_API_GetMemlogSize

def OT_API_GetMemlogAtIndex(*args):
  return _otapi.OT_API_GetMemlogAtIndex(*args)
OT_API_GetMemlogAtIndex = _otapi.OT_API_GetMemlogAtIndex

def OT_API_PeekMemlogFront():
  return _otapi.OT_API_PeekMemlogFront()
OT_API_PeekMemlogFront = _otapi.OT_API_PeekMemlogFront

def OT_API_PeekMemlogBack():
  return _otapi.OT_API_PeekMemlogBack()
OT_API_PeekMemlogBack = _otapi.OT_API_PeekMemlogBack

def OT_API_PopMemlogFront():
  return _otapi.OT_API_PopMemlogFront()
OT_API_PopMemlogFront = _otapi.OT_API_PopMemlogFront

def OT_API_PopMemlogBack():
  return _otapi.OT_API_PopMemlogBack()
OT_API_PopMemlogBack = _otapi.OT_API_PopMemlogBack

def OT_API_CreateNym(*args):
  return _otapi.OT_API_CreateNym(*args)
OT_API_CreateNym = _otapi.OT_API_CreateNym

def OT_API_CreateServerContract(*args):
  return _otapi.OT_API_CreateServerContract(*args)
OT_API_CreateServerContract = _otapi.OT_API_CreateServerContract

def OT_API_CreateAssetContract(*args):
  return _otapi.OT_API_CreateAssetContract(*args)
OT_API_CreateAssetContract = _otapi.OT_API_CreateAssetContract

def OT_API_AddServerContract(*args):
  return _otapi.OT_API_AddServerContract(*args)
OT_API_AddServerContract = _otapi.OT_API_AddServerContract

def OT_API_AddAssetContract(*args):
  return _otapi.OT_API_AddAssetContract(*args)
OT_API_AddAssetContract = _otapi.OT_API_AddAssetContract

def OT_API_GetServerCount():
  return _otapi.OT_API_GetServerCount()
OT_API_GetServerCount = _otapi.OT_API_GetServerCount

def OT_API_GetAssetTypeCount():
  return _otapi.OT_API_GetAssetTypeCount()
OT_API_GetAssetTypeCount = _otapi.OT_API_GetAssetTypeCount

def OT_API_GetAccountCount():
  return _otapi.OT_API_GetAccountCount()
OT_API_GetAccountCount = _otapi.OT_API_GetAccountCount

def OT_API_GetNymCount():
  return _otapi.OT_API_GetNymCount()
OT_API_GetNymCount = _otapi.OT_API_GetNymCount

def OT_API_GetServer_ID(*args):
  return _otapi.OT_API_GetServer_ID(*args)
OT_API_GetServer_ID = _otapi.OT_API_GetServer_ID

def OT_API_GetServer_Name(*args):
  return _otapi.OT_API_GetServer_Name(*args)
OT_API_GetServer_Name = _otapi.OT_API_GetServer_Name

def OT_API_GetServer_Contract(*args):
  return _otapi.OT_API_GetServer_Contract(*args)
OT_API_GetServer_Contract = _otapi.OT_API_GetServer_Contract

def OT_API_GetAssetType_ID(*args):
  return _otapi.OT_API_GetAssetType_ID(*args)
OT_API_GetAssetType_ID = _otapi.OT_API_GetAssetType_ID

def OT_API_GetAssetType_Name(*args):
  return _otapi.OT_API_GetAssetType_Name(*args)
OT_API_GetAssetType_Name = _otapi.OT_API_GetAssetType_Name

def OT_API_GetAssetType_Contract(*args):
  return _otapi.OT_API_GetAssetType_Contract(*args)
OT_API_GetAssetType_Contract = _otapi.OT_API_GetAssetType_Contract

def OT_API_GetAccountWallet_ID(*args):
  return _otapi.OT_API_GetAccountWallet_ID(*args)
OT_API_GetAccountWallet_ID = _otapi.OT_API_GetAccountWallet_ID

def OT_API_GetAccountWallet_Name(*args):
  return _otapi.OT_API_GetAccountWallet_Name(*args)
OT_API_GetAccountWallet_Name = _otapi.OT_API_GetAccountWallet_Name

def OT_API_GetAccountWallet_Balance(*args):
  return _otapi.OT_API_GetAccountWallet_Balance(*args)
OT_API_GetAccountWallet_Balance = _otapi.OT_API_GetAccountWallet_Balance

def OT_API_GetAccountWallet_Type(*args):
  return _otapi.OT_API_GetAccountWallet_Type(*args)
OT_API_GetAccountWallet_Type = _otapi.OT_API_GetAccountWallet_Type

def OT_API_GetAccountWallet_AssetTypeID(*args):
  return _otapi.OT_API_GetAccountWallet_AssetTypeID(*args)
OT_API_GetAccountWallet_AssetTypeID = _otapi.OT_API_GetAccountWallet_AssetTypeID

def OT_API_GetAccountWallet_ServerID(*args):
  return _otapi.OT_API_GetAccountWallet_ServerID(*args)
OT_API_GetAccountWallet_ServerID = _otapi.OT_API_GetAccountWallet_ServerID

def OT_API_GetAccountWallet_NymID(*args):
  return _otapi.OT_API_GetAccountWallet_NymID(*args)
OT_API_GetAccountWallet_NymID = _otapi.OT_API_GetAccountWallet_NymID

def OT_API_GetAccountWallet_InboxHash(*args):
  return _otapi.OT_API_GetAccountWallet_InboxHash(*args)
OT_API_GetAccountWallet_InboxHash = _otapi.OT_API_GetAccountWallet_InboxHash

def OT_API_GetAccountWallet_OutboxHash(*args):
  return _otapi.OT_API_GetAccountWallet_OutboxHash(*args)
OT_API_GetAccountWallet_OutboxHash = _otapi.OT_API_GetAccountWallet_OutboxHash

def OT_API_VerifyAccountReceipt(*args):
  return _otapi.OT_API_VerifyAccountReceipt(*args)
OT_API_VerifyAccountReceipt = _otapi.OT_API_VerifyAccountReceipt

def OT_API_GetNym_TransactionNumCount(*args):
  return _otapi.OT_API_GetNym_TransactionNumCount(*args)
OT_API_GetNym_TransactionNumCount = _otapi.OT_API_GetNym_TransactionNumCount

def OT_API_GetNym_ID(*args):
  return _otapi.OT_API_GetNym_ID(*args)
OT_API_GetNym_ID = _otapi.OT_API_GetNym_ID

def OT_API_GetNym_Name(*args):
  return _otapi.OT_API_GetNym_Name(*args)
OT_API_GetNym_Name = _otapi.OT_API_GetNym_Name

def OT_API_GetNym_Stats(*args):
  return _otapi.OT_API_GetNym_Stats(*args)
OT_API_GetNym_Stats = _otapi.OT_API_GetNym_Stats

def OT_API_GetNym_NymboxHash(*args):
  return _otapi.OT_API_GetNym_NymboxHash(*args)
OT_API_GetNym_NymboxHash = _otapi.OT_API_GetNym_NymboxHash

def OT_API_GetNym_RecentHash(*args):
  return _otapi.OT_API_GetNym_RecentHash(*args)
OT_API_GetNym_RecentHash = _otapi.OT_API_GetNym_RecentHash

def OT_API_GetNym_InboxHash(*args):
  return _otapi.OT_API_GetNym_InboxHash(*args)
OT_API_GetNym_InboxHash = _otapi.OT_API_GetNym_InboxHash

def OT_API_GetNym_OutboxHash(*args):
  return _otapi.OT_API_GetNym_OutboxHash(*args)
OT_API_GetNym_OutboxHash = _otapi.OT_API_GetNym_OutboxHash

def OT_API_IsNym_RegisteredAtServer(*args):
  return _otapi.OT_API_IsNym_RegisteredAtServer(*args)
OT_API_IsNym_RegisteredAtServer = _otapi.OT_API_IsNym_RegisteredAtServer

def OT_API_GetNym_MailCount(*args):
  return _otapi.OT_API_GetNym_MailCount(*args)
OT_API_GetNym_MailCount = _otapi.OT_API_GetNym_MailCount

def OT_API_GetNym_MailContentsByIndex(*args):
  return _otapi.OT_API_GetNym_MailContentsByIndex(*args)
OT_API_GetNym_MailContentsByIndex = _otapi.OT_API_GetNym_MailContentsByIndex

def OT_API_GetNym_MailSenderIDByIndex(*args):
  return _otapi.OT_API_GetNym_MailSenderIDByIndex(*args)
OT_API_GetNym_MailSenderIDByIndex = _otapi.OT_API_GetNym_MailSenderIDByIndex

def OT_API_GetNym_MailServerIDByIndex(*args):
  return _otapi.OT_API_GetNym_MailServerIDByIndex(*args)
OT_API_GetNym_MailServerIDByIndex = _otapi.OT_API_GetNym_MailServerIDByIndex

def OT_API_Nym_RemoveMailByIndex(*args):
  return _otapi.OT_API_Nym_RemoveMailByIndex(*args)
OT_API_Nym_RemoveMailByIndex = _otapi.OT_API_Nym_RemoveMailByIndex

def OT_API_Nym_VerifyMailByIndex(*args):
  return _otapi.OT_API_Nym_VerifyMailByIndex(*args)
OT_API_Nym_VerifyMailByIndex = _otapi.OT_API_Nym_VerifyMailByIndex

def OT_API_GetNym_OutmailCount(*args):
  return _otapi.OT_API_GetNym_OutmailCount(*args)
OT_API_GetNym_OutmailCount = _otapi.OT_API_GetNym_OutmailCount

def OT_API_GetNym_OutmailContentsByIndex(*args):
  return _otapi.OT_API_GetNym_OutmailContentsByIndex(*args)
OT_API_GetNym_OutmailContentsByIndex = _otapi.OT_API_GetNym_OutmailContentsByIndex

def OT_API_GetNym_OutmailRecipientIDByIndex(*args):
  return _otapi.OT_API_GetNym_OutmailRecipientIDByIndex(*args)
OT_API_GetNym_OutmailRecipientIDByIndex = _otapi.OT_API_GetNym_OutmailRecipientIDByIndex

def OT_API_GetNym_OutmailServerIDByIndex(*args):
  return _otapi.OT_API_GetNym_OutmailServerIDByIndex(*args)
OT_API_GetNym_OutmailServerIDByIndex = _otapi.OT_API_GetNym_OutmailServerIDByIndex

def OT_API_Nym_RemoveOutmailByIndex(*args):
  return _otapi.OT_API_Nym_RemoveOutmailByIndex(*args)
OT_API_Nym_RemoveOutmailByIndex = _otapi.OT_API_Nym_RemoveOutmailByIndex

def OT_API_Nym_VerifyOutmailByIndex(*args):
  return _otapi.OT_API_Nym_VerifyOutmailByIndex(*args)
OT_API_Nym_VerifyOutmailByIndex = _otapi.OT_API_Nym_VerifyOutmailByIndex

def OT_API_GetNym_OutpaymentsCount(*args):
  return _otapi.OT_API_GetNym_OutpaymentsCount(*args)
OT_API_GetNym_OutpaymentsCount = _otapi.OT_API_GetNym_OutpaymentsCount

def OT_API_GetNym_OutpaymentsContentsByIndex(*args):
  return _otapi.OT_API_GetNym_OutpaymentsContentsByIndex(*args)
OT_API_GetNym_OutpaymentsContentsByIndex = _otapi.OT_API_GetNym_OutpaymentsContentsByIndex

def OT_API_GetNym_OutpaymentsRecipientIDByIndex(*args):
  return _otapi.OT_API_GetNym_OutpaymentsRecipientIDByIndex(*args)
OT_API_GetNym_OutpaymentsRecipientIDByIndex = _otapi.OT_API_GetNym_OutpaymentsRecipientIDByIndex

def OT_API_GetNym_OutpaymentsServerIDByIndex(*args):
  return _otapi.OT_API_GetNym_OutpaymentsServerIDByIndex(*args)
OT_API_GetNym_OutpaymentsServerIDByIndex = _otapi.OT_API_GetNym_OutpaymentsServerIDByIndex

def OT_API_Nym_RemoveOutpaymentsByIndex(*args):
  return _otapi.OT_API_Nym_RemoveOutpaymentsByIndex(*args)
OT_API_Nym_RemoveOutpaymentsByIndex = _otapi.OT_API_Nym_RemoveOutpaymentsByIndex

def OT_API_Nym_VerifyOutpaymentsByIndex(*args):
  return _otapi.OT_API_Nym_VerifyOutpaymentsByIndex(*args)
OT_API_Nym_VerifyOutpaymentsByIndex = _otapi.OT_API_Nym_VerifyOutpaymentsByIndex

def OT_API_Wallet_CanRemoveServer(*args):
  return _otapi.OT_API_Wallet_CanRemoveServer(*args)
OT_API_Wallet_CanRemoveServer = _otapi.OT_API_Wallet_CanRemoveServer

def OT_API_Wallet_RemoveServer(*args):
  return _otapi.OT_API_Wallet_RemoveServer(*args)
OT_API_Wallet_RemoveServer = _otapi.OT_API_Wallet_RemoveServer

def OT_API_Wallet_CanRemoveAssetType(*args):
  return _otapi.OT_API_Wallet_CanRemoveAssetType(*args)
OT_API_Wallet_CanRemoveAssetType = _otapi.OT_API_Wallet_CanRemoveAssetType

def OT_API_Wallet_RemoveAssetType(*args):
  return _otapi.OT_API_Wallet_RemoveAssetType(*args)
OT_API_Wallet_RemoveAssetType = _otapi.OT_API_Wallet_RemoveAssetType

def OT_API_Wallet_CanRemoveNym(*args):
  return _otapi.OT_API_Wallet_CanRemoveNym(*args)
OT_API_Wallet_CanRemoveNym = _otapi.OT_API_Wallet_CanRemoveNym

def OT_API_Wallet_RemoveNym(*args):
  return _otapi.OT_API_Wallet_RemoveNym(*args)
OT_API_Wallet_RemoveNym = _otapi.OT_API_Wallet_RemoveNym

def OT_API_Wallet_CanRemoveAccount(*args):
  return _otapi.OT_API_Wallet_CanRemoveAccount(*args)
OT_API_Wallet_CanRemoveAccount = _otapi.OT_API_Wallet_CanRemoveAccount

def OT_API_Wallet_ImportNym(*args):
  return _otapi.OT_API_Wallet_ImportNym(*args)
OT_API_Wallet_ImportNym = _otapi.OT_API_Wallet_ImportNym

def OT_API_SetNym_Name(*args):
  return _otapi.OT_API_SetNym_Name(*args)
OT_API_SetNym_Name = _otapi.OT_API_SetNym_Name

def OT_API_SetAccountWallet_Name(*args):
  return _otapi.OT_API_SetAccountWallet_Name(*args)
OT_API_SetAccountWallet_Name = _otapi.OT_API_SetAccountWallet_Name

def OT_API_SetAssetType_Name(*args):
  return _otapi.OT_API_SetAssetType_Name(*args)
OT_API_SetAssetType_Name = _otapi.OT_API_SetAssetType_Name

def OT_API_SetServer_Name(*args):
  return _otapi.OT_API_SetServer_Name(*args)
OT_API_SetServer_Name = _otapi.OT_API_SetServer_Name

def OT_API_WriteCheque(*args):
  return _otapi.OT_API_WriteCheque(*args)
OT_API_WriteCheque = _otapi.OT_API_WriteCheque

def OT_API_DiscardCheque(*args):
  return _otapi.OT_API_DiscardCheque(*args)
OT_API_DiscardCheque = _otapi.OT_API_DiscardCheque

def OT_API_ProposePaymentPlan(*args):
  return _otapi.OT_API_ProposePaymentPlan(*args)
OT_API_ProposePaymentPlan = _otapi.OT_API_ProposePaymentPlan

def OT_API_ConfirmPaymentPlan(*args):
  return _otapi.OT_API_ConfirmPaymentPlan(*args)
OT_API_ConfirmPaymentPlan = _otapi.OT_API_ConfirmPaymentPlan

def OT_API_Create_SmartContract(*args):
  return _otapi.OT_API_Create_SmartContract(*args)
OT_API_Create_SmartContract = _otapi.OT_API_Create_SmartContract

def OT_API_SmartContract_AddBylaw(*args):
  return _otapi.OT_API_SmartContract_AddBylaw(*args)
OT_API_SmartContract_AddBylaw = _otapi.OT_API_SmartContract_AddBylaw

def OT_API_SmartContract_AddClause(*args):
  return _otapi.OT_API_SmartContract_AddClause(*args)
OT_API_SmartContract_AddClause = _otapi.OT_API_SmartContract_AddClause

def OT_API_SmartContract_AddVariable(*args):
  return _otapi.OT_API_SmartContract_AddVariable(*args)
OT_API_SmartContract_AddVariable = _otapi.OT_API_SmartContract_AddVariable

def OT_API_SmartContract_AddCallback(*args):
  return _otapi.OT_API_SmartContract_AddCallback(*args)
OT_API_SmartContract_AddCallback = _otapi.OT_API_SmartContract_AddCallback

def OT_API_SmartContract_AddHook(*args):
  return _otapi.OT_API_SmartContract_AddHook(*args)
OT_API_SmartContract_AddHook = _otapi.OT_API_SmartContract_AddHook

def OT_API_SmartContract_AddParty(*args):
  return _otapi.OT_API_SmartContract_AddParty(*args)
OT_API_SmartContract_AddParty = _otapi.OT_API_SmartContract_AddParty

def OT_API_SmartContract_AddAccount(*args):
  return _otapi.OT_API_SmartContract_AddAccount(*args)
OT_API_SmartContract_AddAccount = _otapi.OT_API_SmartContract_AddAccount

def OT_API_SmartContract_CountNumsNeeded(*args):
  return _otapi.OT_API_SmartContract_CountNumsNeeded(*args)
OT_API_SmartContract_CountNumsNeeded = _otapi.OT_API_SmartContract_CountNumsNeeded

def OT_API_SmartContract_ConfirmAccount(*args):
  return _otapi.OT_API_SmartContract_ConfirmAccount(*args)
OT_API_SmartContract_ConfirmAccount = _otapi.OT_API_SmartContract_ConfirmAccount

def OT_API_SmartContract_ConfirmParty(*args):
  return _otapi.OT_API_SmartContract_ConfirmParty(*args)
OT_API_SmartContract_ConfirmParty = _otapi.OT_API_SmartContract_ConfirmParty

def OT_API_activateSmartContract(*args):
  return _otapi.OT_API_activateSmartContract(*args)
OT_API_activateSmartContract = _otapi.OT_API_activateSmartContract

def OT_API_triggerClause(*args):
  return _otapi.OT_API_triggerClause(*args)
OT_API_triggerClause = _otapi.OT_API_triggerClause

def OT_API_Msg_HarvestTransactionNumbers(*args):
  return _otapi.OT_API_Msg_HarvestTransactionNumbers(*args)
OT_API_Msg_HarvestTransactionNumbers = _otapi.OT_API_Msg_HarvestTransactionNumbers

def OT_API_LoadUserPubkey(*args):
  return _otapi.OT_API_LoadUserPubkey(*args)
OT_API_LoadUserPubkey = _otapi.OT_API_LoadUserPubkey

def OT_API_LoadPubkey(*args):
  return _otapi.OT_API_LoadPubkey(*args)
OT_API_LoadPubkey = _otapi.OT_API_LoadPubkey

def OT_API_VerifyUserPrivateKey(*args):
  return _otapi.OT_API_VerifyUserPrivateKey(*args)
OT_API_VerifyUserPrivateKey = _otapi.OT_API_VerifyUserPrivateKey

def OT_API_LoadPurse(*args):
  return _otapi.OT_API_LoadPurse(*args)
OT_API_LoadPurse = _otapi.OT_API_LoadPurse

def OT_API_LoadMint(*args):
  return _otapi.OT_API_LoadMint(*args)
OT_API_LoadMint = _otapi.OT_API_LoadMint

def OT_API_LoadAssetContract(*args):
  return _otapi.OT_API_LoadAssetContract(*args)
OT_API_LoadAssetContract = _otapi.OT_API_LoadAssetContract

def OT_API_LoadServerContract(*args):
  return _otapi.OT_API_LoadServerContract(*args)
OT_API_LoadServerContract = _otapi.OT_API_LoadServerContract

def OT_API_Mint_IsStillGood(*args):
  return _otapi.OT_API_Mint_IsStillGood(*args)
OT_API_Mint_IsStillGood = _otapi.OT_API_Mint_IsStillGood

def OT_API_IsBasketCurrency(*args):
  return _otapi.OT_API_IsBasketCurrency(*args)
OT_API_IsBasketCurrency = _otapi.OT_API_IsBasketCurrency

def OT_API_Basket_GetMemberCount(*args):
  return _otapi.OT_API_Basket_GetMemberCount(*args)
OT_API_Basket_GetMemberCount = _otapi.OT_API_Basket_GetMemberCount

def OT_API_Basket_GetMemberType(*args):
  return _otapi.OT_API_Basket_GetMemberType(*args)
OT_API_Basket_GetMemberType = _otapi.OT_API_Basket_GetMemberType

def OT_API_Basket_GetMinimumTransferAmount(*args):
  return _otapi.OT_API_Basket_GetMinimumTransferAmount(*args)
OT_API_Basket_GetMinimumTransferAmount = _otapi.OT_API_Basket_GetMinimumTransferAmount

def OT_API_Basket_GetMemberMinimumTransferAmount(*args):
  return _otapi.OT_API_Basket_GetMemberMinimumTransferAmount(*args)
OT_API_Basket_GetMemberMinimumTransferAmount = _otapi.OT_API_Basket_GetMemberMinimumTransferAmount

def OT_API_LoadAssetAccount(*args):
  return _otapi.OT_API_LoadAssetAccount(*args)
OT_API_LoadAssetAccount = _otapi.OT_API_LoadAssetAccount

def OT_API_LoadInbox(*args):
  return _otapi.OT_API_LoadInbox(*args)
OT_API_LoadInbox = _otapi.OT_API_LoadInbox

def OT_API_LoadOutbox(*args):
  return _otapi.OT_API_LoadOutbox(*args)
OT_API_LoadOutbox = _otapi.OT_API_LoadOutbox

def OT_API_LoadInboxNoVerify(*args):
  return _otapi.OT_API_LoadInboxNoVerify(*args)
OT_API_LoadInboxNoVerify = _otapi.OT_API_LoadInboxNoVerify

def OT_API_LoadOutboxNoVerify(*args):
  return _otapi.OT_API_LoadOutboxNoVerify(*args)
OT_API_LoadOutboxNoVerify = _otapi.OT_API_LoadOutboxNoVerify

def OT_API_LoadPaymentInbox(*args):
  return _otapi.OT_API_LoadPaymentInbox(*args)
OT_API_LoadPaymentInbox = _otapi.OT_API_LoadPaymentInbox

def OT_API_LoadPaymentInboxNoVerify(*args):
  return _otapi.OT_API_LoadPaymentInboxNoVerify(*args)
OT_API_LoadPaymentInboxNoVerify = _otapi.OT_API_LoadPaymentInboxNoVerify

def OT_API_LoadRecordBox(*args):
  return _otapi.OT_API_LoadRecordBox(*args)
OT_API_LoadRecordBox = _otapi.OT_API_LoadRecordBox

def OT_API_LoadRecordBoxNoVerify(*args):
  return _otapi.OT_API_LoadRecordBoxNoVerify(*args)
OT_API_LoadRecordBoxNoVerify = _otapi.OT_API_LoadRecordBoxNoVerify

def OT_API_Ledger_GetCount(*args):
  return _otapi.OT_API_Ledger_GetCount(*args)
OT_API_Ledger_GetCount = _otapi.OT_API_Ledger_GetCount

def OT_API_Ledger_CreateResponse(*args):
  return _otapi.OT_API_Ledger_CreateResponse(*args)
OT_API_Ledger_CreateResponse = _otapi.OT_API_Ledger_CreateResponse

def OT_API_Ledger_GetTransactionByIndex(*args):
  return _otapi.OT_API_Ledger_GetTransactionByIndex(*args)
OT_API_Ledger_GetTransactionByIndex = _otapi.OT_API_Ledger_GetTransactionByIndex

def OT_API_Ledger_GetTransactionByID(*args):
  return _otapi.OT_API_Ledger_GetTransactionByID(*args)
OT_API_Ledger_GetTransactionByID = _otapi.OT_API_Ledger_GetTransactionByID

def OT_API_Ledger_GetTransactionIDByIndex(*args):
  return _otapi.OT_API_Ledger_GetTransactionIDByIndex(*args)
OT_API_Ledger_GetTransactionIDByIndex = _otapi.OT_API_Ledger_GetTransactionIDByIndex

def OT_API_Ledger_AddTransaction(*args):
  return _otapi.OT_API_Ledger_AddTransaction(*args)
OT_API_Ledger_AddTransaction = _otapi.OT_API_Ledger_AddTransaction

def OT_API_Transaction_CreateResponse(*args):
  return _otapi.OT_API_Transaction_CreateResponse(*args)
OT_API_Transaction_CreateResponse = _otapi.OT_API_Transaction_CreateResponse

def OT_API_Ledger_FinalizeResponse(*args):
  return _otapi.OT_API_Ledger_FinalizeResponse(*args)
OT_API_Ledger_FinalizeResponse = _otapi.OT_API_Ledger_FinalizeResponse

def OT_API_Ledger_GetInstrument(*args):
  return _otapi.OT_API_Ledger_GetInstrument(*args)
OT_API_Ledger_GetInstrument = _otapi.OT_API_Ledger_GetInstrument

def OT_API_Transaction_GetType(*args):
  return _otapi.OT_API_Transaction_GetType(*args)
OT_API_Transaction_GetType = _otapi.OT_API_Transaction_GetType

def OT_API_ReplyNotice_GetRequestNum(*args):
  return _otapi.OT_API_ReplyNotice_GetRequestNum(*args)
OT_API_ReplyNotice_GetRequestNum = _otapi.OT_API_ReplyNotice_GetRequestNum

def OT_API_Transaction_GetVoucher(*args):
  return _otapi.OT_API_Transaction_GetVoucher(*args)
OT_API_Transaction_GetVoucher = _otapi.OT_API_Transaction_GetVoucher

def OT_API_Transaction_GetSuccess(*args):
  return _otapi.OT_API_Transaction_GetSuccess(*args)
OT_API_Transaction_GetSuccess = _otapi.OT_API_Transaction_GetSuccess

def OT_API_Transaction_GetBalanceAgreementSuccess(*args):
  return _otapi.OT_API_Transaction_GetBalanceAgreementSuccess(*args)
OT_API_Transaction_GetBalanceAgreementSuccess = _otapi.OT_API_Transaction_GetBalanceAgreementSuccess

def OT_API_Transaction_GetDateSigned(*args):
  return _otapi.OT_API_Transaction_GetDateSigned(*args)
OT_API_Transaction_GetDateSigned = _otapi.OT_API_Transaction_GetDateSigned

def OT_API_Transaction_GetAmount(*args):
  return _otapi.OT_API_Transaction_GetAmount(*args)
OT_API_Transaction_GetAmount = _otapi.OT_API_Transaction_GetAmount

def OT_API_Pending_GetNote(*args):
  return _otapi.OT_API_Pending_GetNote(*args)
OT_API_Pending_GetNote = _otapi.OT_API_Pending_GetNote

def OT_API_Transaction_GetSenderUserID(*args):
  return _otapi.OT_API_Transaction_GetSenderUserID(*args)
OT_API_Transaction_GetSenderUserID = _otapi.OT_API_Transaction_GetSenderUserID

def OT_API_Transaction_GetSenderAcctID(*args):
  return _otapi.OT_API_Transaction_GetSenderAcctID(*args)
OT_API_Transaction_GetSenderAcctID = _otapi.OT_API_Transaction_GetSenderAcctID

def OT_API_Transaction_GetRecipientUserID(*args):
  return _otapi.OT_API_Transaction_GetRecipientUserID(*args)
OT_API_Transaction_GetRecipientUserID = _otapi.OT_API_Transaction_GetRecipientUserID

def OT_API_Transaction_GetRecipientAcctID(*args):
  return _otapi.OT_API_Transaction_GetRecipientAcctID(*args)
OT_API_Transaction_GetRecipientAcctID = _otapi.OT_API_Transaction_GetRecipientAcctID

def OT_API_Transaction_GetDisplayReferenceToNum(*args):
  return _otapi.OT_API_Transaction_GetDisplayReferenceToNum(*args)
OT_API_Transaction_GetDisplayReferenceToNum = _otapi.OT_API_Transaction_GetDisplayReferenceToNum

def OT_API_CreatePurse(*args):
  return _otapi.OT_API_CreatePurse(*args)
OT_API_CreatePurse = _otapi.OT_API_CreatePurse

def OT_API_SavePurse(*args):
  return _otapi.OT_API_SavePurse(*args)
OT_API_SavePurse = _otapi.OT_API_SavePurse

def OT_API_Purse_GetTotalValue(*args):
  return _otapi.OT_API_Purse_GetTotalValue(*args)
OT_API_Purse_GetTotalValue = _otapi.OT_API_Purse_GetTotalValue

def OT_API_Purse_Count(*args):
  return _otapi.OT_API_Purse_Count(*args)
OT_API_Purse_Count = _otapi.OT_API_Purse_Count

def OT_API_Purse_Peek(*args):
  return _otapi.OT_API_Purse_Peek(*args)
OT_API_Purse_Peek = _otapi.OT_API_Purse_Peek

def OT_API_Purse_Pop(*args):
  return _otapi.OT_API_Purse_Pop(*args)
OT_API_Purse_Pop = _otapi.OT_API_Purse_Pop

def OT_API_Purse_Push(*args):
  return _otapi.OT_API_Purse_Push(*args)
OT_API_Purse_Push = _otapi.OT_API_Purse_Push

def OT_API_Wallet_ImportPurse(*args):
  return _otapi.OT_API_Wallet_ImportPurse(*args)
OT_API_Wallet_ImportPurse = _otapi.OT_API_Wallet_ImportPurse

def OT_API_exchangePurse(*args):
  return _otapi.OT_API_exchangePurse(*args)
OT_API_exchangePurse = _otapi.OT_API_exchangePurse

def OT_API_Token_ChangeOwner(*args):
  return _otapi.OT_API_Token_ChangeOwner(*args)
OT_API_Token_ChangeOwner = _otapi.OT_API_Token_ChangeOwner

def OT_API_Token_GetID(*args):
  return _otapi.OT_API_Token_GetID(*args)
OT_API_Token_GetID = _otapi.OT_API_Token_GetID

def OT_API_Token_GetDenomination(*args):
  return _otapi.OT_API_Token_GetDenomination(*args)
OT_API_Token_GetDenomination = _otapi.OT_API_Token_GetDenomination

def OT_API_Token_GetSeries(*args):
  return _otapi.OT_API_Token_GetSeries(*args)
OT_API_Token_GetSeries = _otapi.OT_API_Token_GetSeries

def OT_API_Token_GetValidFrom(*args):
  return _otapi.OT_API_Token_GetValidFrom(*args)
OT_API_Token_GetValidFrom = _otapi.OT_API_Token_GetValidFrom

def OT_API_Token_GetValidTo(*args):
  return _otapi.OT_API_Token_GetValidTo(*args)
OT_API_Token_GetValidTo = _otapi.OT_API_Token_GetValidTo

def OT_API_Token_GetAssetID(*args):
  return _otapi.OT_API_Token_GetAssetID(*args)
OT_API_Token_GetAssetID = _otapi.OT_API_Token_GetAssetID

def OT_API_Token_GetServerID(*args):
  return _otapi.OT_API_Token_GetServerID(*args)
OT_API_Token_GetServerID = _otapi.OT_API_Token_GetServerID

def OT_API_Instrument_GetAmount(*args):
  return _otapi.OT_API_Instrument_GetAmount(*args)
OT_API_Instrument_GetAmount = _otapi.OT_API_Instrument_GetAmount

def OT_API_Instrument_GetTransNum(*args):
  return _otapi.OT_API_Instrument_GetTransNum(*args)
OT_API_Instrument_GetTransNum = _otapi.OT_API_Instrument_GetTransNum

def OT_API_Instrument_GetValidFrom(*args):
  return _otapi.OT_API_Instrument_GetValidFrom(*args)
OT_API_Instrument_GetValidFrom = _otapi.OT_API_Instrument_GetValidFrom

def OT_API_Instrument_GetValidTo(*args):
  return _otapi.OT_API_Instrument_GetValidTo(*args)
OT_API_Instrument_GetValidTo = _otapi.OT_API_Instrument_GetValidTo

def OT_API_Instrument_GetMemo(*args):
  return _otapi.OT_API_Instrument_GetMemo(*args)
OT_API_Instrument_GetMemo = _otapi.OT_API_Instrument_GetMemo

def OT_API_Instrument_GetAssetID(*args):
  return _otapi.OT_API_Instrument_GetAssetID(*args)
OT_API_Instrument_GetAssetID = _otapi.OT_API_Instrument_GetAssetID

def OT_API_Instrmnt_GetSenderUserID(*args):
  return _otapi.OT_API_Instrmnt_GetSenderUserID(*args)
OT_API_Instrmnt_GetSenderUserID = _otapi.OT_API_Instrmnt_GetSenderUserID

def OT_API_Instrmnt_GetSenderAcctID(*args):
  return _otapi.OT_API_Instrmnt_GetSenderAcctID(*args)
OT_API_Instrmnt_GetSenderAcctID = _otapi.OT_API_Instrmnt_GetSenderAcctID

def OT_API_Instrmnt_GetRecipientUserID(*args):
  return _otapi.OT_API_Instrmnt_GetRecipientUserID(*args)
OT_API_Instrmnt_GetRecipientUserID = _otapi.OT_API_Instrmnt_GetRecipientUserID

def OT_API_Instrmnt_GetRecipientAcctID(*args):
  return _otapi.OT_API_Instrmnt_GetRecipientAcctID(*args)
OT_API_Instrmnt_GetRecipientAcctID = _otapi.OT_API_Instrmnt_GetRecipientAcctID

def OT_API_checkServerID(*args):
  return _otapi.OT_API_checkServerID(*args)
OT_API_checkServerID = _otapi.OT_API_checkServerID

def OT_API_createUserAccount(*args):
  return _otapi.OT_API_createUserAccount(*args)
OT_API_createUserAccount = _otapi.OT_API_createUserAccount

def OT_API_deleteUserAccount(*args):
  return _otapi.OT_API_deleteUserAccount(*args)
OT_API_deleteUserAccount = _otapi.OT_API_deleteUserAccount

def OT_API_deleteAssetAccount(*args):
  return _otapi.OT_API_deleteAssetAccount(*args)
OT_API_deleteAssetAccount = _otapi.OT_API_deleteAssetAccount

def OT_API_usageCredits(*args):
  return _otapi.OT_API_usageCredits(*args)
OT_API_usageCredits = _otapi.OT_API_usageCredits

def OT_API_Message_GetUsageCredits(*args):
  return _otapi.OT_API_Message_GetUsageCredits(*args)
OT_API_Message_GetUsageCredits = _otapi.OT_API_Message_GetUsageCredits

def OT_API_checkUser(*args):
  return _otapi.OT_API_checkUser(*args)
OT_API_checkUser = _otapi.OT_API_checkUser

def OT_API_sendUserMessage(*args):
  return _otapi.OT_API_sendUserMessage(*args)
OT_API_sendUserMessage = _otapi.OT_API_sendUserMessage

def OT_API_sendUserInstrument(*args):
  return _otapi.OT_API_sendUserInstrument(*args)
OT_API_sendUserInstrument = _otapi.OT_API_sendUserInstrument

def OT_API_getRequest(*args):
  return _otapi.OT_API_getRequest(*args)
OT_API_getRequest = _otapi.OT_API_getRequest

def OT_API_getTransactionNumber(*args):
  return _otapi.OT_API_getTransactionNumber(*args)
OT_API_getTransactionNumber = _otapi.OT_API_getTransactionNumber

def OT_API_issueAssetType(*args):
  return _otapi.OT_API_issueAssetType(*args)
OT_API_issueAssetType = _otapi.OT_API_issueAssetType

def OT_API_getContract(*args):
  return _otapi.OT_API_getContract(*args)
OT_API_getContract = _otapi.OT_API_getContract

def OT_API_getMint(*args):
  return _otapi.OT_API_getMint(*args)
OT_API_getMint = _otapi.OT_API_getMint

def OT_API_createAssetAccount(*args):
  return _otapi.OT_API_createAssetAccount(*args)
OT_API_createAssetAccount = _otapi.OT_API_createAssetAccount

def OT_API_getAccount(*args):
  return _otapi.OT_API_getAccount(*args)
OT_API_getAccount = _otapi.OT_API_getAccount

def OT_API_GenerateBasketCreation(*args):
  return _otapi.OT_API_GenerateBasketCreation(*args)
OT_API_GenerateBasketCreation = _otapi.OT_API_GenerateBasketCreation

def OT_API_AddBasketCreationItem(*args):
  return _otapi.OT_API_AddBasketCreationItem(*args)
OT_API_AddBasketCreationItem = _otapi.OT_API_AddBasketCreationItem

def OT_API_issueBasket(*args):
  return _otapi.OT_API_issueBasket(*args)
OT_API_issueBasket = _otapi.OT_API_issueBasket

def OT_API_GenerateBasketExchange(*args):
  return _otapi.OT_API_GenerateBasketExchange(*args)
OT_API_GenerateBasketExchange = _otapi.OT_API_GenerateBasketExchange

def OT_API_AddBasketExchangeItem(*args):
  return _otapi.OT_API_AddBasketExchangeItem(*args)
OT_API_AddBasketExchangeItem = _otapi.OT_API_AddBasketExchangeItem

def OT_API_exchangeBasket(*args):
  return _otapi.OT_API_exchangeBasket(*args)
OT_API_exchangeBasket = _otapi.OT_API_exchangeBasket

def OT_API_notarizeWithdrawal(*args):
  return _otapi.OT_API_notarizeWithdrawal(*args)
OT_API_notarizeWithdrawal = _otapi.OT_API_notarizeWithdrawal

def OT_API_notarizeDeposit(*args):
  return _otapi.OT_API_notarizeDeposit(*args)
OT_API_notarizeDeposit = _otapi.OT_API_notarizeDeposit

def OT_API_notarizeTransfer(*args):
  return _otapi.OT_API_notarizeTransfer(*args)
OT_API_notarizeTransfer = _otapi.OT_API_notarizeTransfer

def OT_API_getInbox(*args):
  return _otapi.OT_API_getInbox(*args)
OT_API_getInbox = _otapi.OT_API_getInbox

def OT_API_getOutbox(*args):
  return _otapi.OT_API_getOutbox(*args)
OT_API_getOutbox = _otapi.OT_API_getOutbox

def OT_API_getNymbox(*args):
  return _otapi.OT_API_getNymbox(*args)
OT_API_getNymbox = _otapi.OT_API_getNymbox

def OT_API_LoadNymbox(*args):
  return _otapi.OT_API_LoadNymbox(*args)
OT_API_LoadNymbox = _otapi.OT_API_LoadNymbox

def OT_API_LoadNymboxNoVerify(*args):
  return _otapi.OT_API_LoadNymboxNoVerify(*args)
OT_API_LoadNymboxNoVerify = _otapi.OT_API_LoadNymboxNoVerify

def OT_API_Nymbox_GetReplyNotice(*args):
  return _otapi.OT_API_Nymbox_GetReplyNotice(*args)
OT_API_Nymbox_GetReplyNotice = _otapi.OT_API_Nymbox_GetReplyNotice

def OT_API_HaveAlreadySeenReply(*args):
  return _otapi.OT_API_HaveAlreadySeenReply(*args)
OT_API_HaveAlreadySeenReply = _otapi.OT_API_HaveAlreadySeenReply

def OT_API_getBoxReceipt(*args):
  return _otapi.OT_API_getBoxReceipt(*args)
OT_API_getBoxReceipt = _otapi.OT_API_getBoxReceipt

def OT_API_DoesBoxReceiptExist(*args):
  return _otapi.OT_API_DoesBoxReceiptExist(*args)
OT_API_DoesBoxReceiptExist = _otapi.OT_API_DoesBoxReceiptExist

def OT_API_processInbox(*args):
  return _otapi.OT_API_processInbox(*args)
OT_API_processInbox = _otapi.OT_API_processInbox

def OT_API_processNymbox(*args):
  return _otapi.OT_API_processNymbox(*args)
OT_API_processNymbox = _otapi.OT_API_processNymbox

def OT_API_withdrawVoucher(*args):
  return _otapi.OT_API_withdrawVoucher(*args)
OT_API_withdrawVoucher = _otapi.OT_API_withdrawVoucher

def OT_API_depositCheque(*args):
  return _otapi.OT_API_depositCheque(*args)
OT_API_depositCheque = _otapi.OT_API_depositCheque

def OT_API_depositPaymentPlan(*args):
  return _otapi.OT_API_depositPaymentPlan(*args)
OT_API_depositPaymentPlan = _otapi.OT_API_depositPaymentPlan

def OT_API_issueMarketOffer(*args):
  return _otapi.OT_API_issueMarketOffer(*args)
OT_API_issueMarketOffer = _otapi.OT_API_issueMarketOffer

def OT_API_getMarketList(*args):
  return _otapi.OT_API_getMarketList(*args)
OT_API_getMarketList = _otapi.OT_API_getMarketList

def OT_API_getMarketOffers(*args):
  return _otapi.OT_API_getMarketOffers(*args)
OT_API_getMarketOffers = _otapi.OT_API_getMarketOffers

def OT_API_getMarketRecentTrades(*args):
  return _otapi.OT_API_getMarketRecentTrades(*args)
OT_API_getMarketRecentTrades = _otapi.OT_API_getMarketRecentTrades

def OT_API_getNym_MarketOffers(*args):
  return _otapi.OT_API_getNym_MarketOffers(*args)
OT_API_getNym_MarketOffers = _otapi.OT_API_getNym_MarketOffers

def OT_API_cancelMarketOffer(*args):
  return _otapi.OT_API_cancelMarketOffer(*args)
OT_API_cancelMarketOffer = _otapi.OT_API_cancelMarketOffer

def OT_API_cancelPaymentPlan(*args):
  return _otapi.OT_API_cancelPaymentPlan(*args)
OT_API_cancelPaymentPlan = _otapi.OT_API_cancelPaymentPlan

def OT_API_PopMessageBuffer(*args):
  return _otapi.OT_API_PopMessageBuffer(*args)
OT_API_PopMessageBuffer = _otapi.OT_API_PopMessageBuffer

def OT_API_FlushMessageBuffer():
  return _otapi.OT_API_FlushMessageBuffer()
OT_API_FlushMessageBuffer = _otapi.OT_API_FlushMessageBuffer

def OT_API_GetSentMessage(*args):
  return _otapi.OT_API_GetSentMessage(*args)
OT_API_GetSentMessage = _otapi.OT_API_GetSentMessage

def OT_API_RemoveSentMessage(*args):
  return _otapi.OT_API_RemoveSentMessage(*args)
OT_API_RemoveSentMessage = _otapi.OT_API_RemoveSentMessage

def OT_API_FlushSentMessages(*args):
  return _otapi.OT_API_FlushSentMessages(*args)
OT_API_FlushSentMessages = _otapi.OT_API_FlushSentMessages

def OT_API_Sleep(*args):
  return _otapi.OT_API_Sleep(*args)
OT_API_Sleep = _otapi.OT_API_Sleep

def OT_API_ResyncNymWithServer(*args):
  return _otapi.OT_API_ResyncNymWithServer(*args)
OT_API_ResyncNymWithServer = _otapi.OT_API_ResyncNymWithServer

def OT_API_Message_GetCommand(*args):
  return _otapi.OT_API_Message_GetCommand(*args)
OT_API_Message_GetCommand = _otapi.OT_API_Message_GetCommand

def OT_API_Message_GetSuccess(*args):
  return _otapi.OT_API_Message_GetSuccess(*args)
OT_API_Message_GetSuccess = _otapi.OT_API_Message_GetSuccess

def OT_API_queryAssetTypes(*args):
  return _otapi.OT_API_queryAssetTypes(*args)
OT_API_queryAssetTypes = _otapi.OT_API_queryAssetTypes

def OT_API_Message_GetPayload(*args):
  return _otapi.OT_API_Message_GetPayload(*args)
OT_API_Message_GetPayload = _otapi.OT_API_Message_GetPayload

def OT_API_Message_GetDepth(*args):
  return _otapi.OT_API_Message_GetDepth(*args)
OT_API_Message_GetDepth = _otapi.OT_API_Message_GetDepth

def OT_API_Message_GetTransactionSuccess(*args):
  return _otapi.OT_API_Message_GetTransactionSuccess(*args)
OT_API_Message_GetTransactionSuccess = _otapi.OT_API_Message_GetTransactionSuccess

def OT_API_Message_GetBalanceAgreementSuccess(*args):
  return _otapi.OT_API_Message_GetBalanceAgreementSuccess(*args)
OT_API_Message_GetBalanceAgreementSuccess = _otapi.OT_API_Message_GetBalanceAgreementSuccess

def OT_API_Message_GetLedger(*args):
  return _otapi.OT_API_Message_GetLedger(*args)
OT_API_Message_GetLedger = _otapi.OT_API_Message_GetLedger

def OT_API_Message_GetNewAssetTypeID(*args):
  return _otapi.OT_API_Message_GetNewAssetTypeID(*args)
OT_API_Message_GetNewAssetTypeID = _otapi.OT_API_Message_GetNewAssetTypeID

def OT_API_Message_GetNewIssuerAcctID(*args):
  return _otapi.OT_API_Message_GetNewIssuerAcctID(*args)
OT_API_Message_GetNewIssuerAcctID = _otapi.OT_API_Message_GetNewIssuerAcctID

def OT_API_Message_GetNewAcctID(*args):
  return _otapi.OT_API_Message_GetNewAcctID(*args)
OT_API_Message_GetNewAcctID = _otapi.OT_API_Message_GetNewAcctID

def OT_API_Message_GetNymboxHash(*args):
  return _otapi.OT_API_Message_GetNymboxHash(*args)
OT_API_Message_GetNymboxHash = _otapi.OT_API_Message_GetNymboxHash

def OT_API_ConnectServer(*args):
  return _otapi.OT_API_ConnectServer(*args)
OT_API_ConnectServer = _otapi.OT_API_ConnectServer

def OT_API_ProcessSockets():
  return _otapi.OT_API_ProcessSockets()
OT_API_ProcessSockets = _otapi.OT_API_ProcessSockets
PACK_MESSAGE_PACK = _otapi.PACK_MESSAGE_PACK
PACK_PROTOCOL_BUFFERS = _otapi.PACK_PROTOCOL_BUFFERS
PACK_TYPE_ERROR = _otapi.PACK_TYPE_ERROR
STORE_FILESYSTEM = _otapi.STORE_FILESYSTEM
STORE_TYPE_SUBCLASS = _otapi.STORE_TYPE_SUBCLASS
STORED_OBJ_STRING = _otapi.STORED_OBJ_STRING
STORED_OBJ_BLOB = _otapi.STORED_OBJ_BLOB
STORED_OBJ_STRING_MAP = _otapi.STORED_OBJ_STRING_MAP
STORED_OBJ_WALLET_DATA = _otapi.STORED_OBJ_WALLET_DATA
STORED_OBJ_BITCOIN_ACCT = _otapi.STORED_OBJ_BITCOIN_ACCT
STORED_OBJ_BITCOIN_SERVER = _otapi.STORED_OBJ_BITCOIN_SERVER
STORED_OBJ_RIPPLE_SERVER = _otapi.STORED_OBJ_RIPPLE_SERVER
STORED_OBJ_LOOM_SERVER = _otapi.STORED_OBJ_LOOM_SERVER
STORED_OBJ_SERVER_INFO = _otapi.STORED_OBJ_SERVER_INFO
STORED_OBJ_CONTACT_NYM = _otapi.STORED_OBJ_CONTACT_NYM
STORED_OBJ_CONTACT_ACCT = _otapi.STORED_OBJ_CONTACT_ACCT
STORED_OBJ_CONTACT = _otapi.STORED_OBJ_CONTACT
STORED_OBJ_ADDRESS_BOOK = _otapi.STORED_OBJ_ADDRESS_BOOK
STORED_OBJ_MARKET_DATA = _otapi.STORED_OBJ_MARKET_DATA
STORED_OBJ_MARKET_LIST = _otapi.STORED_OBJ_MARKET_LIST
STORED_OBJ_BID_DATA = _otapi.STORED_OBJ_BID_DATA
STORED_OBJ_ASK_DATA = _otapi.STORED_OBJ_ASK_DATA
STORED_OBJ_OFFER_LIST_MARKET = _otapi.STORED_OBJ_OFFER_LIST_MARKET
STORED_OBJ_TRADE_DATA_MARKET = _otapi.STORED_OBJ_TRADE_DATA_MARKET
STORED_OBJ_TRADE_LIST_MARKET = _otapi.STORED_OBJ_TRADE_LIST_MARKET
STORED_OBJ_OFFER_DATA_NYM = _otapi.STORED_OBJ_OFFER_DATA_NYM
STORED_OBJ_OFFER_LIST_NYM = _otapi.STORED_OBJ_OFFER_LIST_NYM
STORED_OBJ_TRADE_DATA_NYM = _otapi.STORED_OBJ_TRADE_DATA_NYM
STORED_OBJ_TRADE_LIST_NYM = _otapi.STORED_OBJ_TRADE_LIST_NYM
STORED_OBJ_ERROR = _otapi.STORED_OBJ_ERROR
class Storable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Storable
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _otapi.Storable_Create
    if _newclass:Create = staticmethod(_otapi.Storable_Create)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Storable_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Storable_ot_dynamic_cast)
Storable_swigregister = _otapi.Storable_swigregister
Storable_swigregister(Storable)

def Storable_Create(*args):
  return _otapi.Storable_Create(*args)
Storable_Create = _otapi.Storable_Create

def Storable_ot_dynamic_cast(*args):
  return _otapi.Storable_ot_dynamic_cast(*args)
Storable_ot_dynamic_cast = _otapi.Storable_ot_dynamic_cast

class Storage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPacker(self, *args): return _otapi.Storage_GetPacker(self, *args)
    def Init(self, oneStr="", twoStr="", threeStr="", fourStr="", fiveStr="", sixStr=""): return _otapi.Storage_Init(self, oneStr, twoStr, threeStr, fourStr, fiveStr, sixStr)
    def Exists(self, *args): return _otapi.Storage_Exists(self, *args)
    __swig_destroy__ = _otapi.delete_Storage
    __del__ = lambda self : None;
    def StoreString(self, *args): return _otapi.Storage_StoreString(self, *args)
    def QueryString(self, *args): return _otapi.Storage_QueryString(self, *args)
    def StorePlainString(self, *args): return _otapi.Storage_StorePlainString(self, *args)
    def QueryPlainString(self, *args): return _otapi.Storage_QueryPlainString(self, *args)
    def StoreObject(self, *args): return _otapi.Storage_StoreObject(self, *args)
    def QueryObject(self, *args): return _otapi.Storage_QueryObject(self, *args)
    def EncodeObject(self, *args): return _otapi.Storage_EncodeObject(self, *args)
    def DecodeObject(self, *args): return _otapi.Storage_DecodeObject(self, *args)
    def EraseValueByKey(self, *args): return _otapi.Storage_EraseValueByKey(self, *args)
    def CreateObject(self, *args): return _otapi.Storage_CreateObject(self, *args)
    __swig_getmethods__["Create"] = lambda x: _otapi.Storage_Create
    if _newclass:Create = staticmethod(_otapi.Storage_Create)
    def GetType(self): return _otapi.Storage_GetType(self)
Storage_swigregister = _otapi.Storage_swigregister
Storage_swigregister(Storage)

def Storage_Create(*args):
  return _otapi.Storage_Create(*args)
Storage_Create = _otapi.Storage_Create


def InitDefaultStorage(*args):
  return _otapi.InitDefaultStorage(*args)
InitDefaultStorage = _otapi.InitDefaultStorage

def GetDefaultStorage():
  return _otapi.GetDefaultStorage()
GetDefaultStorage = _otapi.GetDefaultStorage

def CreateStorageContext(*args):
  return _otapi.CreateStorageContext(*args)
CreateStorageContext = _otapi.CreateStorageContext

def CreateObject(*args):
  return _otapi.CreateObject(*args)
CreateObject = _otapi.CreateObject

def Exists(*args):
  return _otapi.Exists(*args)
Exists = _otapi.Exists

def StoreString(*args):
  return _otapi.StoreString(*args)
StoreString = _otapi.StoreString

def QueryString(*args):
  return _otapi.QueryString(*args)
QueryString = _otapi.QueryString

def StorePlainString(*args):
  return _otapi.StorePlainString(*args)
StorePlainString = _otapi.StorePlainString

def QueryPlainString(*args):
  return _otapi.QueryPlainString(*args)
QueryPlainString = _otapi.QueryPlainString

def StoreObject(*args):
  return _otapi.StoreObject(*args)
StoreObject = _otapi.StoreObject

def QueryObject(*args):
  return _otapi.QueryObject(*args)
QueryObject = _otapi.QueryObject

def EncodeObject(*args):
  return _otapi.EncodeObject(*args)
EncodeObject = _otapi.EncodeObject

def DecodeObject(*args):
  return _otapi.DecodeObject(*args)
DecodeObject = _otapi.DecodeObject

def EraseValueByKey(*args):
  return _otapi.EraseValueByKey(*args)
EraseValueByKey = _otapi.EraseValueByKey
class OTDBString(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTDBString, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OTDBString, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_OTDBString
    __del__ = lambda self : None;
    __swig_setmethods__["m_string"] = _otapi.OTDBString_m_string_set
    __swig_getmethods__["m_string"] = _otapi.OTDBString_m_string_get
    if _newclass:m_string = _swig_property(_otapi.OTDBString_m_string_get, _otapi.OTDBString_m_string_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.OTDBString_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.OTDBString_ot_dynamic_cast)
OTDBString_swigregister = _otapi.OTDBString_swigregister
OTDBString_swigregister(OTDBString)

def OTDBString_ot_dynamic_cast(*args):
  return _otapi.OTDBString_ot_dynamic_cast(*args)
OTDBString_ot_dynamic_cast = _otapi.OTDBString_ot_dynamic_cast

class Blob(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Blob, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Blob, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Blob
    __del__ = lambda self : None;
    __swig_setmethods__["m_memBuffer"] = _otapi.Blob_m_memBuffer_set
    __swig_getmethods__["m_memBuffer"] = _otapi.Blob_m_memBuffer_get
    if _newclass:m_memBuffer = _swig_property(_otapi.Blob_m_memBuffer_get, _otapi.Blob_m_memBuffer_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Blob_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Blob_ot_dynamic_cast)
Blob_swigregister = _otapi.Blob_swigregister
Blob_swigregister(Blob)

def Blob_ot_dynamic_cast(*args):
  return _otapi.Blob_ot_dynamic_cast(*args)
Blob_ot_dynamic_cast = _otapi.Blob_ot_dynamic_cast

class StringMap(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_StringMap
    __del__ = lambda self : None;
    __swig_setmethods__["the_map"] = _otapi.StringMap_the_map_set
    __swig_getmethods__["the_map"] = _otapi.StringMap_the_map_get
    if _newclass:the_map = _swig_property(_otapi.StringMap_the_map_get, _otapi.StringMap_the_map_set)
    def SetValue(self, *args): return _otapi.StringMap_SetValue(self, *args)
    def GetValue(self, *args): return _otapi.StringMap_GetValue(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.StringMap_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.StringMap_ot_dynamic_cast)
StringMap_swigregister = _otapi.StringMap_swigregister
StringMap_swigregister(StringMap)

def StringMap_ot_dynamic_cast(*args):
  return _otapi.StringMap_ot_dynamic_cast(*args)
StringMap_ot_dynamic_cast = _otapi.StringMap_ot_dynamic_cast

class Displayable(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Displayable, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Displayable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Displayable
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Displayable_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Displayable_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Displayable_gui_label_get, _otapi.Displayable_gui_label_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Displayable_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Displayable_ot_dynamic_cast)
Displayable_swigregister = _otapi.Displayable_swigregister
Displayable_swigregister(Displayable)

def Displayable_ot_dynamic_cast(*args):
  return _otapi.Displayable_ot_dynamic_cast(*args)
Displayable_ot_dynamic_cast = _otapi.Displayable_ot_dynamic_cast

class MarketData(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketData, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_MarketData
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.MarketData_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.MarketData_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.MarketData_gui_label_get, _otapi.MarketData_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.MarketData_server_id_set
    __swig_getmethods__["server_id"] = _otapi.MarketData_server_id_get
    if _newclass:server_id = _swig_property(_otapi.MarketData_server_id_get, _otapi.MarketData_server_id_set)
    __swig_setmethods__["market_id"] = _otapi.MarketData_market_id_set
    __swig_getmethods__["market_id"] = _otapi.MarketData_market_id_get
    if _newclass:market_id = _swig_property(_otapi.MarketData_market_id_get, _otapi.MarketData_market_id_set)
    __swig_setmethods__["asset_type_id"] = _otapi.MarketData_asset_type_id_set
    __swig_getmethods__["asset_type_id"] = _otapi.MarketData_asset_type_id_get
    if _newclass:asset_type_id = _swig_property(_otapi.MarketData_asset_type_id_get, _otapi.MarketData_asset_type_id_set)
    __swig_setmethods__["currency_type_id"] = _otapi.MarketData_currency_type_id_set
    __swig_getmethods__["currency_type_id"] = _otapi.MarketData_currency_type_id_get
    if _newclass:currency_type_id = _swig_property(_otapi.MarketData_currency_type_id_get, _otapi.MarketData_currency_type_id_set)
    __swig_setmethods__["scale"] = _otapi.MarketData_scale_set
    __swig_getmethods__["scale"] = _otapi.MarketData_scale_get
    if _newclass:scale = _swig_property(_otapi.MarketData_scale_get, _otapi.MarketData_scale_set)
    __swig_setmethods__["total_assets"] = _otapi.MarketData_total_assets_set
    __swig_getmethods__["total_assets"] = _otapi.MarketData_total_assets_get
    if _newclass:total_assets = _swig_property(_otapi.MarketData_total_assets_get, _otapi.MarketData_total_assets_set)
    __swig_setmethods__["number_bids"] = _otapi.MarketData_number_bids_set
    __swig_getmethods__["number_bids"] = _otapi.MarketData_number_bids_get
    if _newclass:number_bids = _swig_property(_otapi.MarketData_number_bids_get, _otapi.MarketData_number_bids_set)
    __swig_setmethods__["number_asks"] = _otapi.MarketData_number_asks_set
    __swig_getmethods__["number_asks"] = _otapi.MarketData_number_asks_get
    if _newclass:number_asks = _swig_property(_otapi.MarketData_number_asks_get, _otapi.MarketData_number_asks_set)
    __swig_setmethods__["last_sale_price"] = _otapi.MarketData_last_sale_price_set
    __swig_getmethods__["last_sale_price"] = _otapi.MarketData_last_sale_price_get
    if _newclass:last_sale_price = _swig_property(_otapi.MarketData_last_sale_price_get, _otapi.MarketData_last_sale_price_set)
    __swig_setmethods__["current_bid"] = _otapi.MarketData_current_bid_set
    __swig_getmethods__["current_bid"] = _otapi.MarketData_current_bid_get
    if _newclass:current_bid = _swig_property(_otapi.MarketData_current_bid_get, _otapi.MarketData_current_bid_set)
    __swig_setmethods__["current_ask"] = _otapi.MarketData_current_ask_set
    __swig_getmethods__["current_ask"] = _otapi.MarketData_current_ask_get
    if _newclass:current_ask = _swig_property(_otapi.MarketData_current_ask_get, _otapi.MarketData_current_ask_set)
    __swig_setmethods__["volume_trades"] = _otapi.MarketData_volume_trades_set
    __swig_getmethods__["volume_trades"] = _otapi.MarketData_volume_trades_get
    if _newclass:volume_trades = _swig_property(_otapi.MarketData_volume_trades_get, _otapi.MarketData_volume_trades_set)
    __swig_setmethods__["volume_assets"] = _otapi.MarketData_volume_assets_set
    __swig_getmethods__["volume_assets"] = _otapi.MarketData_volume_assets_get
    if _newclass:volume_assets = _swig_property(_otapi.MarketData_volume_assets_get, _otapi.MarketData_volume_assets_set)
    __swig_setmethods__["volume_currency"] = _otapi.MarketData_volume_currency_set
    __swig_getmethods__["volume_currency"] = _otapi.MarketData_volume_currency_get
    if _newclass:volume_currency = _swig_property(_otapi.MarketData_volume_currency_get, _otapi.MarketData_volume_currency_set)
    __swig_setmethods__["recent_highest_bid"] = _otapi.MarketData_recent_highest_bid_set
    __swig_getmethods__["recent_highest_bid"] = _otapi.MarketData_recent_highest_bid_get
    if _newclass:recent_highest_bid = _swig_property(_otapi.MarketData_recent_highest_bid_get, _otapi.MarketData_recent_highest_bid_set)
    __swig_setmethods__["recent_lowest_ask"] = _otapi.MarketData_recent_lowest_ask_set
    __swig_getmethods__["recent_lowest_ask"] = _otapi.MarketData_recent_lowest_ask_get
    if _newclass:recent_lowest_ask = _swig_property(_otapi.MarketData_recent_lowest_ask_get, _otapi.MarketData_recent_lowest_ask_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.MarketData_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.MarketData_ot_dynamic_cast)
MarketData_swigregister = _otapi.MarketData_swigregister
MarketData_swigregister(MarketData)

def MarketData_ot_dynamic_cast(*args):
  return _otapi.MarketData_ot_dynamic_cast(*args)
MarketData_ot_dynamic_cast = _otapi.MarketData_ot_dynamic_cast

class MarketList(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketList, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketList, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_MarketList
    __del__ = lambda self : None;
    def GetMarketDataCount(self): return _otapi.MarketList_GetMarketDataCount(self)
    def GetMarketData(self, *args): return _otapi.MarketList_GetMarketData(self, *args)
    def RemoveMarketData(self, *args): return _otapi.MarketList_RemoveMarketData(self, *args)
    def AddMarketData(self, *args): return _otapi.MarketList_AddMarketData(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.MarketList_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.MarketList_ot_dynamic_cast)
MarketList_swigregister = _otapi.MarketList_swigregister
MarketList_swigregister(MarketList)

def MarketList_ot_dynamic_cast(*args):
  return _otapi.MarketList_ot_dynamic_cast(*args)
MarketList_ot_dynamic_cast = _otapi.MarketList_ot_dynamic_cast

class OfferDataMarket(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferDataMarket, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferDataMarket, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_OfferDataMarket
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.OfferDataMarket_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.OfferDataMarket_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.OfferDataMarket_gui_label_get, _otapi.OfferDataMarket_gui_label_set)
    __swig_setmethods__["transaction_id"] = _otapi.OfferDataMarket_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.OfferDataMarket_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.OfferDataMarket_transaction_id_get, _otapi.OfferDataMarket_transaction_id_set)
    __swig_setmethods__["price_per_scale"] = _otapi.OfferDataMarket_price_per_scale_set
    __swig_getmethods__["price_per_scale"] = _otapi.OfferDataMarket_price_per_scale_get
    if _newclass:price_per_scale = _swig_property(_otapi.OfferDataMarket_price_per_scale_get, _otapi.OfferDataMarket_price_per_scale_set)
    __swig_setmethods__["available_assets"] = _otapi.OfferDataMarket_available_assets_set
    __swig_getmethods__["available_assets"] = _otapi.OfferDataMarket_available_assets_get
    if _newclass:available_assets = _swig_property(_otapi.OfferDataMarket_available_assets_get, _otapi.OfferDataMarket_available_assets_set)
    __swig_setmethods__["minimum_increment"] = _otapi.OfferDataMarket_minimum_increment_set
    __swig_getmethods__["minimum_increment"] = _otapi.OfferDataMarket_minimum_increment_get
    if _newclass:minimum_increment = _swig_property(_otapi.OfferDataMarket_minimum_increment_get, _otapi.OfferDataMarket_minimum_increment_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.OfferDataMarket_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.OfferDataMarket_ot_dynamic_cast)
OfferDataMarket_swigregister = _otapi.OfferDataMarket_swigregister
OfferDataMarket_swigregister(OfferDataMarket)

def OfferDataMarket_ot_dynamic_cast(*args):
  return _otapi.OfferDataMarket_ot_dynamic_cast(*args)
OfferDataMarket_ot_dynamic_cast = _otapi.OfferDataMarket_ot_dynamic_cast

class BidData(OfferDataMarket):
    __swig_setmethods__ = {}
    for _s in [OfferDataMarket]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidData, name, value)
    __swig_getmethods__ = {}
    for _s in [OfferDataMarket]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_BidData
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.BidData_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.BidData_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.BidData_gui_label_get, _otapi.BidData_gui_label_set)
    __swig_setmethods__["transaction_id"] = _otapi.BidData_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.BidData_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.BidData_transaction_id_get, _otapi.BidData_transaction_id_set)
    __swig_setmethods__["price_per_scale"] = _otapi.BidData_price_per_scale_set
    __swig_getmethods__["price_per_scale"] = _otapi.BidData_price_per_scale_get
    if _newclass:price_per_scale = _swig_property(_otapi.BidData_price_per_scale_get, _otapi.BidData_price_per_scale_set)
    __swig_setmethods__["available_assets"] = _otapi.BidData_available_assets_set
    __swig_getmethods__["available_assets"] = _otapi.BidData_available_assets_get
    if _newclass:available_assets = _swig_property(_otapi.BidData_available_assets_get, _otapi.BidData_available_assets_set)
    __swig_setmethods__["minimum_increment"] = _otapi.BidData_minimum_increment_set
    __swig_getmethods__["minimum_increment"] = _otapi.BidData_minimum_increment_get
    if _newclass:minimum_increment = _swig_property(_otapi.BidData_minimum_increment_get, _otapi.BidData_minimum_increment_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.BidData_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.BidData_ot_dynamic_cast)
BidData_swigregister = _otapi.BidData_swigregister
BidData_swigregister(BidData)

def BidData_ot_dynamic_cast(*args):
  return _otapi.BidData_ot_dynamic_cast(*args)
BidData_ot_dynamic_cast = _otapi.BidData_ot_dynamic_cast

class AskData(OfferDataMarket):
    __swig_setmethods__ = {}
    for _s in [OfferDataMarket]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AskData, name, value)
    __swig_getmethods__ = {}
    for _s in [OfferDataMarket]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AskData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_AskData
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.AskData_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.AskData_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.AskData_gui_label_get, _otapi.AskData_gui_label_set)
    __swig_setmethods__["transaction_id"] = _otapi.AskData_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.AskData_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.AskData_transaction_id_get, _otapi.AskData_transaction_id_set)
    __swig_setmethods__["price_per_scale"] = _otapi.AskData_price_per_scale_set
    __swig_getmethods__["price_per_scale"] = _otapi.AskData_price_per_scale_get
    if _newclass:price_per_scale = _swig_property(_otapi.AskData_price_per_scale_get, _otapi.AskData_price_per_scale_set)
    __swig_setmethods__["available_assets"] = _otapi.AskData_available_assets_set
    __swig_getmethods__["available_assets"] = _otapi.AskData_available_assets_get
    if _newclass:available_assets = _swig_property(_otapi.AskData_available_assets_get, _otapi.AskData_available_assets_set)
    __swig_setmethods__["minimum_increment"] = _otapi.AskData_minimum_increment_set
    __swig_getmethods__["minimum_increment"] = _otapi.AskData_minimum_increment_get
    if _newclass:minimum_increment = _swig_property(_otapi.AskData_minimum_increment_get, _otapi.AskData_minimum_increment_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.AskData_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.AskData_ot_dynamic_cast)
AskData_swigregister = _otapi.AskData_swigregister
AskData_swigregister(AskData)

def AskData_ot_dynamic_cast(*args):
  return _otapi.AskData_ot_dynamic_cast(*args)
AskData_ot_dynamic_cast = _otapi.AskData_ot_dynamic_cast

class OfferListMarket(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferListMarket, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferListMarket, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_OfferListMarket
    __del__ = lambda self : None;
    def GetBidDataCount(self): return _otapi.OfferListMarket_GetBidDataCount(self)
    def GetBidData(self, *args): return _otapi.OfferListMarket_GetBidData(self, *args)
    def RemoveBidData(self, *args): return _otapi.OfferListMarket_RemoveBidData(self, *args)
    def AddBidData(self, *args): return _otapi.OfferListMarket_AddBidData(self, *args)
    def GetAskDataCount(self): return _otapi.OfferListMarket_GetAskDataCount(self)
    def GetAskData(self, *args): return _otapi.OfferListMarket_GetAskData(self, *args)
    def RemoveAskData(self, *args): return _otapi.OfferListMarket_RemoveAskData(self, *args)
    def AddAskData(self, *args): return _otapi.OfferListMarket_AddAskData(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.OfferListMarket_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.OfferListMarket_ot_dynamic_cast)
OfferListMarket_swigregister = _otapi.OfferListMarket_swigregister
OfferListMarket_swigregister(OfferListMarket)

def OfferListMarket_ot_dynamic_cast(*args):
  return _otapi.OfferListMarket_ot_dynamic_cast(*args)
OfferListMarket_ot_dynamic_cast = _otapi.OfferListMarket_ot_dynamic_cast

class TradeDataMarket(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeDataMarket, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeDataMarket, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_TradeDataMarket
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.TradeDataMarket_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.TradeDataMarket_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.TradeDataMarket_gui_label_get, _otapi.TradeDataMarket_gui_label_set)
    __swig_setmethods__["transaction_id"] = _otapi.TradeDataMarket_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.TradeDataMarket_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.TradeDataMarket_transaction_id_get, _otapi.TradeDataMarket_transaction_id_set)
    __swig_setmethods__["date"] = _otapi.TradeDataMarket_date_set
    __swig_getmethods__["date"] = _otapi.TradeDataMarket_date_get
    if _newclass:date = _swig_property(_otapi.TradeDataMarket_date_get, _otapi.TradeDataMarket_date_set)
    __swig_setmethods__["price"] = _otapi.TradeDataMarket_price_set
    __swig_getmethods__["price"] = _otapi.TradeDataMarket_price_get
    if _newclass:price = _swig_property(_otapi.TradeDataMarket_price_get, _otapi.TradeDataMarket_price_set)
    __swig_setmethods__["amount_sold"] = _otapi.TradeDataMarket_amount_sold_set
    __swig_getmethods__["amount_sold"] = _otapi.TradeDataMarket_amount_sold_get
    if _newclass:amount_sold = _swig_property(_otapi.TradeDataMarket_amount_sold_get, _otapi.TradeDataMarket_amount_sold_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.TradeDataMarket_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.TradeDataMarket_ot_dynamic_cast)
TradeDataMarket_swigregister = _otapi.TradeDataMarket_swigregister
TradeDataMarket_swigregister(TradeDataMarket)

def TradeDataMarket_ot_dynamic_cast(*args):
  return _otapi.TradeDataMarket_ot_dynamic_cast(*args)
TradeDataMarket_ot_dynamic_cast = _otapi.TradeDataMarket_ot_dynamic_cast

class TradeListMarket(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeListMarket, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeListMarket, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_TradeListMarket
    __del__ = lambda self : None;
    def GetTradeDataMarketCount(self): return _otapi.TradeListMarket_GetTradeDataMarketCount(self)
    def GetTradeDataMarket(self, *args): return _otapi.TradeListMarket_GetTradeDataMarket(self, *args)
    def RemoveTradeDataMarket(self, *args): return _otapi.TradeListMarket_RemoveTradeDataMarket(self, *args)
    def AddTradeDataMarket(self, *args): return _otapi.TradeListMarket_AddTradeDataMarket(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.TradeListMarket_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.TradeListMarket_ot_dynamic_cast)
TradeListMarket_swigregister = _otapi.TradeListMarket_swigregister
TradeListMarket_swigregister(TradeListMarket)

def TradeListMarket_ot_dynamic_cast(*args):
  return _otapi.TradeListMarket_ot_dynamic_cast(*args)
TradeListMarket_ot_dynamic_cast = _otapi.TradeListMarket_ot_dynamic_cast

class OfferDataNym(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferDataNym, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferDataNym, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_OfferDataNym
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.OfferDataNym_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.OfferDataNym_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.OfferDataNym_gui_label_get, _otapi.OfferDataNym_gui_label_set)
    __swig_setmethods__["valid_from"] = _otapi.OfferDataNym_valid_from_set
    __swig_getmethods__["valid_from"] = _otapi.OfferDataNym_valid_from_get
    if _newclass:valid_from = _swig_property(_otapi.OfferDataNym_valid_from_get, _otapi.OfferDataNym_valid_from_set)
    __swig_setmethods__["valid_to"] = _otapi.OfferDataNym_valid_to_set
    __swig_getmethods__["valid_to"] = _otapi.OfferDataNym_valid_to_get
    if _newclass:valid_to = _swig_property(_otapi.OfferDataNym_valid_to_get, _otapi.OfferDataNym_valid_to_set)
    __swig_setmethods__["server_id"] = _otapi.OfferDataNym_server_id_set
    __swig_getmethods__["server_id"] = _otapi.OfferDataNym_server_id_get
    if _newclass:server_id = _swig_property(_otapi.OfferDataNym_server_id_get, _otapi.OfferDataNym_server_id_set)
    __swig_setmethods__["asset_type_id"] = _otapi.OfferDataNym_asset_type_id_set
    __swig_getmethods__["asset_type_id"] = _otapi.OfferDataNym_asset_type_id_get
    if _newclass:asset_type_id = _swig_property(_otapi.OfferDataNym_asset_type_id_get, _otapi.OfferDataNym_asset_type_id_set)
    __swig_setmethods__["asset_acct_id"] = _otapi.OfferDataNym_asset_acct_id_set
    __swig_getmethods__["asset_acct_id"] = _otapi.OfferDataNym_asset_acct_id_get
    if _newclass:asset_acct_id = _swig_property(_otapi.OfferDataNym_asset_acct_id_get, _otapi.OfferDataNym_asset_acct_id_set)
    __swig_setmethods__["currency_type_id"] = _otapi.OfferDataNym_currency_type_id_set
    __swig_getmethods__["currency_type_id"] = _otapi.OfferDataNym_currency_type_id_get
    if _newclass:currency_type_id = _swig_property(_otapi.OfferDataNym_currency_type_id_get, _otapi.OfferDataNym_currency_type_id_set)
    __swig_setmethods__["currency_acct_id"] = _otapi.OfferDataNym_currency_acct_id_set
    __swig_getmethods__["currency_acct_id"] = _otapi.OfferDataNym_currency_acct_id_get
    if _newclass:currency_acct_id = _swig_property(_otapi.OfferDataNym_currency_acct_id_get, _otapi.OfferDataNym_currency_acct_id_set)
    __swig_setmethods__["selling"] = _otapi.OfferDataNym_selling_set
    __swig_getmethods__["selling"] = _otapi.OfferDataNym_selling_get
    if _newclass:selling = _swig_property(_otapi.OfferDataNym_selling_get, _otapi.OfferDataNym_selling_set)
    __swig_setmethods__["scale"] = _otapi.OfferDataNym_scale_set
    __swig_getmethods__["scale"] = _otapi.OfferDataNym_scale_get
    if _newclass:scale = _swig_property(_otapi.OfferDataNym_scale_get, _otapi.OfferDataNym_scale_set)
    __swig_setmethods__["price_per_scale"] = _otapi.OfferDataNym_price_per_scale_set
    __swig_getmethods__["price_per_scale"] = _otapi.OfferDataNym_price_per_scale_get
    if _newclass:price_per_scale = _swig_property(_otapi.OfferDataNym_price_per_scale_get, _otapi.OfferDataNym_price_per_scale_set)
    __swig_setmethods__["transaction_id"] = _otapi.OfferDataNym_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.OfferDataNym_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.OfferDataNym_transaction_id_get, _otapi.OfferDataNym_transaction_id_set)
    __swig_setmethods__["total_assets"] = _otapi.OfferDataNym_total_assets_set
    __swig_getmethods__["total_assets"] = _otapi.OfferDataNym_total_assets_get
    if _newclass:total_assets = _swig_property(_otapi.OfferDataNym_total_assets_get, _otapi.OfferDataNym_total_assets_set)
    __swig_setmethods__["finished_so_far"] = _otapi.OfferDataNym_finished_so_far_set
    __swig_getmethods__["finished_so_far"] = _otapi.OfferDataNym_finished_so_far_get
    if _newclass:finished_so_far = _swig_property(_otapi.OfferDataNym_finished_so_far_get, _otapi.OfferDataNym_finished_so_far_set)
    __swig_setmethods__["minimum_increment"] = _otapi.OfferDataNym_minimum_increment_set
    __swig_getmethods__["minimum_increment"] = _otapi.OfferDataNym_minimum_increment_get
    if _newclass:minimum_increment = _swig_property(_otapi.OfferDataNym_minimum_increment_get, _otapi.OfferDataNym_minimum_increment_set)
    __swig_setmethods__["stop_sign"] = _otapi.OfferDataNym_stop_sign_set
    __swig_getmethods__["stop_sign"] = _otapi.OfferDataNym_stop_sign_get
    if _newclass:stop_sign = _swig_property(_otapi.OfferDataNym_stop_sign_get, _otapi.OfferDataNym_stop_sign_set)
    __swig_setmethods__["stop_price"] = _otapi.OfferDataNym_stop_price_set
    __swig_getmethods__["stop_price"] = _otapi.OfferDataNym_stop_price_get
    if _newclass:stop_price = _swig_property(_otapi.OfferDataNym_stop_price_get, _otapi.OfferDataNym_stop_price_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.OfferDataNym_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.OfferDataNym_ot_dynamic_cast)
OfferDataNym_swigregister = _otapi.OfferDataNym_swigregister
OfferDataNym_swigregister(OfferDataNym)

def OfferDataNym_ot_dynamic_cast(*args):
  return _otapi.OfferDataNym_ot_dynamic_cast(*args)
OfferDataNym_ot_dynamic_cast = _otapi.OfferDataNym_ot_dynamic_cast

class OfferListNym(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferListNym, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferListNym, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_OfferListNym
    __del__ = lambda self : None;
    def GetOfferDataNymCount(self): return _otapi.OfferListNym_GetOfferDataNymCount(self)
    def GetOfferDataNym(self, *args): return _otapi.OfferListNym_GetOfferDataNym(self, *args)
    def RemoveOfferDataNym(self, *args): return _otapi.OfferListNym_RemoveOfferDataNym(self, *args)
    def AddOfferDataNym(self, *args): return _otapi.OfferListNym_AddOfferDataNym(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.OfferListNym_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.OfferListNym_ot_dynamic_cast)
OfferListNym_swigregister = _otapi.OfferListNym_swigregister
OfferListNym_swigregister(OfferListNym)

def OfferListNym_ot_dynamic_cast(*args):
  return _otapi.OfferListNym_ot_dynamic_cast(*args)
OfferListNym_ot_dynamic_cast = _otapi.OfferListNym_ot_dynamic_cast

class TradeDataNym(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeDataNym, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeDataNym, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_TradeDataNym
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.TradeDataNym_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.TradeDataNym_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.TradeDataNym_gui_label_get, _otapi.TradeDataNym_gui_label_set)
    __swig_setmethods__["transaction_id"] = _otapi.TradeDataNym_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.TradeDataNym_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.TradeDataNym_transaction_id_get, _otapi.TradeDataNym_transaction_id_set)
    __swig_setmethods__["completed_count"] = _otapi.TradeDataNym_completed_count_set
    __swig_getmethods__["completed_count"] = _otapi.TradeDataNym_completed_count_get
    if _newclass:completed_count = _swig_property(_otapi.TradeDataNym_completed_count_get, _otapi.TradeDataNym_completed_count_set)
    __swig_setmethods__["date"] = _otapi.TradeDataNym_date_set
    __swig_getmethods__["date"] = _otapi.TradeDataNym_date_get
    if _newclass:date = _swig_property(_otapi.TradeDataNym_date_get, _otapi.TradeDataNym_date_set)
    __swig_setmethods__["price"] = _otapi.TradeDataNym_price_set
    __swig_getmethods__["price"] = _otapi.TradeDataNym_price_get
    if _newclass:price = _swig_property(_otapi.TradeDataNym_price_get, _otapi.TradeDataNym_price_set)
    __swig_setmethods__["amount_sold"] = _otapi.TradeDataNym_amount_sold_set
    __swig_getmethods__["amount_sold"] = _otapi.TradeDataNym_amount_sold_get
    if _newclass:amount_sold = _swig_property(_otapi.TradeDataNym_amount_sold_get, _otapi.TradeDataNym_amount_sold_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.TradeDataNym_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.TradeDataNym_ot_dynamic_cast)
TradeDataNym_swigregister = _otapi.TradeDataNym_swigregister
TradeDataNym_swigregister(TradeDataNym)

def TradeDataNym_ot_dynamic_cast(*args):
  return _otapi.TradeDataNym_ot_dynamic_cast(*args)
TradeDataNym_ot_dynamic_cast = _otapi.TradeDataNym_ot_dynamic_cast

class TradeListNym(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeListNym, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeListNym, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_TradeListNym
    __del__ = lambda self : None;
    def GetTradeDataNymCount(self): return _otapi.TradeListNym_GetTradeDataNymCount(self)
    def GetTradeDataNym(self, *args): return _otapi.TradeListNym_GetTradeDataNym(self, *args)
    def RemoveTradeDataNym(self, *args): return _otapi.TradeListNym_RemoveTradeDataNym(self, *args)
    def AddTradeDataNym(self, *args): return _otapi.TradeListNym_AddTradeDataNym(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.TradeListNym_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.TradeListNym_ot_dynamic_cast)
TradeListNym_swigregister = _otapi.TradeListNym_swigregister
TradeListNym_swigregister(TradeListNym)

def TradeListNym_ot_dynamic_cast(*args):
  return _otapi.TradeListNym_ot_dynamic_cast(*args)
TradeListNym_ot_dynamic_cast = _otapi.TradeListNym_ot_dynamic_cast

class Acct(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Acct, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Acct, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Acct
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Acct_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Acct_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Acct_gui_label_get, _otapi.Acct_gui_label_set)
    __swig_setmethods__["acct_id"] = _otapi.Acct_acct_id_set
    __swig_getmethods__["acct_id"] = _otapi.Acct_acct_id_get
    if _newclass:acct_id = _swig_property(_otapi.Acct_acct_id_get, _otapi.Acct_acct_id_set)
    __swig_setmethods__["server_id"] = _otapi.Acct_server_id_set
    __swig_getmethods__["server_id"] = _otapi.Acct_server_id_get
    if _newclass:server_id = _swig_property(_otapi.Acct_server_id_get, _otapi.Acct_server_id_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Acct_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Acct_ot_dynamic_cast)
Acct_swigregister = _otapi.Acct_swigregister
Acct_swigregister(Acct)

def Acct_ot_dynamic_cast(*args):
  return _otapi.Acct_ot_dynamic_cast(*args)
Acct_ot_dynamic_cast = _otapi.Acct_ot_dynamic_cast

class BitcoinAcct(Acct):
    __swig_setmethods__ = {}
    for _s in [Acct]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitcoinAcct, name, value)
    __swig_getmethods__ = {}
    for _s in [Acct]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BitcoinAcct, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_BitcoinAcct
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.BitcoinAcct_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.BitcoinAcct_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.BitcoinAcct_gui_label_get, _otapi.BitcoinAcct_gui_label_set)
    __swig_setmethods__["acct_id"] = _otapi.BitcoinAcct_acct_id_set
    __swig_getmethods__["acct_id"] = _otapi.BitcoinAcct_acct_id_get
    if _newclass:acct_id = _swig_property(_otapi.BitcoinAcct_acct_id_get, _otapi.BitcoinAcct_acct_id_set)
    __swig_setmethods__["server_id"] = _otapi.BitcoinAcct_server_id_set
    __swig_getmethods__["server_id"] = _otapi.BitcoinAcct_server_id_get
    if _newclass:server_id = _swig_property(_otapi.BitcoinAcct_server_id_get, _otapi.BitcoinAcct_server_id_set)
    __swig_setmethods__["bitcoin_acct_name"] = _otapi.BitcoinAcct_bitcoin_acct_name_set
    __swig_getmethods__["bitcoin_acct_name"] = _otapi.BitcoinAcct_bitcoin_acct_name_get
    if _newclass:bitcoin_acct_name = _swig_property(_otapi.BitcoinAcct_bitcoin_acct_name_get, _otapi.BitcoinAcct_bitcoin_acct_name_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.BitcoinAcct_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.BitcoinAcct_ot_dynamic_cast)
BitcoinAcct_swigregister = _otapi.BitcoinAcct_swigregister
BitcoinAcct_swigregister(BitcoinAcct)

def BitcoinAcct_ot_dynamic_cast(*args):
  return _otapi.BitcoinAcct_ot_dynamic_cast(*args)
BitcoinAcct_ot_dynamic_cast = _otapi.BitcoinAcct_ot_dynamic_cast

class ServerInfo(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServerInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_ServerInfo
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.ServerInfo_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.ServerInfo_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.ServerInfo_gui_label_get, _otapi.ServerInfo_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.ServerInfo_server_id_set
    __swig_getmethods__["server_id"] = _otapi.ServerInfo_server_id_get
    if _newclass:server_id = _swig_property(_otapi.ServerInfo_server_id_get, _otapi.ServerInfo_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.ServerInfo_server_type_set
    __swig_getmethods__["server_type"] = _otapi.ServerInfo_server_type_get
    if _newclass:server_type = _swig_property(_otapi.ServerInfo_server_type_get, _otapi.ServerInfo_server_type_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.ServerInfo_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.ServerInfo_ot_dynamic_cast)
ServerInfo_swigregister = _otapi.ServerInfo_swigregister
ServerInfo_swigregister(ServerInfo)

def ServerInfo_ot_dynamic_cast(*args):
  return _otapi.ServerInfo_ot_dynamic_cast(*args)
ServerInfo_ot_dynamic_cast = _otapi.ServerInfo_ot_dynamic_cast

class Server(ServerInfo):
    __swig_setmethods__ = {}
    for _s in [ServerInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Server, name, value)
    __swig_getmethods__ = {}
    for _s in [ServerInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Server, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Server
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Server_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Server_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Server_gui_label_get, _otapi.Server_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.Server_server_id_set
    __swig_getmethods__["server_id"] = _otapi.Server_server_id_get
    if _newclass:server_id = _swig_property(_otapi.Server_server_id_get, _otapi.Server_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.Server_server_type_set
    __swig_getmethods__["server_type"] = _otapi.Server_server_type_get
    if _newclass:server_type = _swig_property(_otapi.Server_server_type_get, _otapi.Server_server_type_set)
    __swig_setmethods__["server_host"] = _otapi.Server_server_host_set
    __swig_getmethods__["server_host"] = _otapi.Server_server_host_get
    if _newclass:server_host = _swig_property(_otapi.Server_server_host_get, _otapi.Server_server_host_set)
    __swig_setmethods__["server_port"] = _otapi.Server_server_port_set
    __swig_getmethods__["server_port"] = _otapi.Server_server_port_get
    if _newclass:server_port = _swig_property(_otapi.Server_server_port_get, _otapi.Server_server_port_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Server_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Server_ot_dynamic_cast)
Server_swigregister = _otapi.Server_swigregister
Server_swigregister(Server)

def Server_ot_dynamic_cast(*args):
  return _otapi.Server_ot_dynamic_cast(*args)
Server_ot_dynamic_cast = _otapi.Server_ot_dynamic_cast

class BitcoinServer(Server):
    __swig_setmethods__ = {}
    for _s in [Server]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitcoinServer, name, value)
    __swig_getmethods__ = {}
    for _s in [Server]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BitcoinServer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_BitcoinServer
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.BitcoinServer_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.BitcoinServer_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.BitcoinServer_gui_label_get, _otapi.BitcoinServer_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.BitcoinServer_server_id_set
    __swig_getmethods__["server_id"] = _otapi.BitcoinServer_server_id_get
    if _newclass:server_id = _swig_property(_otapi.BitcoinServer_server_id_get, _otapi.BitcoinServer_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.BitcoinServer_server_type_set
    __swig_getmethods__["server_type"] = _otapi.BitcoinServer_server_type_get
    if _newclass:server_type = _swig_property(_otapi.BitcoinServer_server_type_get, _otapi.BitcoinServer_server_type_set)
    __swig_setmethods__["server_host"] = _otapi.BitcoinServer_server_host_set
    __swig_getmethods__["server_host"] = _otapi.BitcoinServer_server_host_get
    if _newclass:server_host = _swig_property(_otapi.BitcoinServer_server_host_get, _otapi.BitcoinServer_server_host_set)
    __swig_setmethods__["server_port"] = _otapi.BitcoinServer_server_port_set
    __swig_getmethods__["server_port"] = _otapi.BitcoinServer_server_port_get
    if _newclass:server_port = _swig_property(_otapi.BitcoinServer_server_port_get, _otapi.BitcoinServer_server_port_set)
    __swig_setmethods__["bitcoin_username"] = _otapi.BitcoinServer_bitcoin_username_set
    __swig_getmethods__["bitcoin_username"] = _otapi.BitcoinServer_bitcoin_username_get
    if _newclass:bitcoin_username = _swig_property(_otapi.BitcoinServer_bitcoin_username_get, _otapi.BitcoinServer_bitcoin_username_set)
    __swig_setmethods__["bitcoin_password"] = _otapi.BitcoinServer_bitcoin_password_set
    __swig_getmethods__["bitcoin_password"] = _otapi.BitcoinServer_bitcoin_password_get
    if _newclass:bitcoin_password = _swig_property(_otapi.BitcoinServer_bitcoin_password_get, _otapi.BitcoinServer_bitcoin_password_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.BitcoinServer_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.BitcoinServer_ot_dynamic_cast)
BitcoinServer_swigregister = _otapi.BitcoinServer_swigregister
BitcoinServer_swigregister(BitcoinServer)

def BitcoinServer_ot_dynamic_cast(*args):
  return _otapi.BitcoinServer_ot_dynamic_cast(*args)
BitcoinServer_ot_dynamic_cast = _otapi.BitcoinServer_ot_dynamic_cast

class RippleServer(Server):
    __swig_setmethods__ = {}
    for _s in [Server]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RippleServer, name, value)
    __swig_getmethods__ = {}
    for _s in [Server]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RippleServer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_RippleServer
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.RippleServer_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.RippleServer_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.RippleServer_gui_label_get, _otapi.RippleServer_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.RippleServer_server_id_set
    __swig_getmethods__["server_id"] = _otapi.RippleServer_server_id_get
    if _newclass:server_id = _swig_property(_otapi.RippleServer_server_id_get, _otapi.RippleServer_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.RippleServer_server_type_set
    __swig_getmethods__["server_type"] = _otapi.RippleServer_server_type_get
    if _newclass:server_type = _swig_property(_otapi.RippleServer_server_type_get, _otapi.RippleServer_server_type_set)
    __swig_setmethods__["server_host"] = _otapi.RippleServer_server_host_set
    __swig_getmethods__["server_host"] = _otapi.RippleServer_server_host_get
    if _newclass:server_host = _swig_property(_otapi.RippleServer_server_host_get, _otapi.RippleServer_server_host_set)
    __swig_setmethods__["server_port"] = _otapi.RippleServer_server_port_set
    __swig_getmethods__["server_port"] = _otapi.RippleServer_server_port_get
    if _newclass:server_port = _swig_property(_otapi.RippleServer_server_port_get, _otapi.RippleServer_server_port_set)
    __swig_setmethods__["ripple_username"] = _otapi.RippleServer_ripple_username_set
    __swig_getmethods__["ripple_username"] = _otapi.RippleServer_ripple_username_get
    if _newclass:ripple_username = _swig_property(_otapi.RippleServer_ripple_username_get, _otapi.RippleServer_ripple_username_set)
    __swig_setmethods__["ripple_password"] = _otapi.RippleServer_ripple_password_set
    __swig_getmethods__["ripple_password"] = _otapi.RippleServer_ripple_password_get
    if _newclass:ripple_password = _swig_property(_otapi.RippleServer_ripple_password_get, _otapi.RippleServer_ripple_password_set)
    __swig_setmethods__["namefield_id"] = _otapi.RippleServer_namefield_id_set
    __swig_getmethods__["namefield_id"] = _otapi.RippleServer_namefield_id_get
    if _newclass:namefield_id = _swig_property(_otapi.RippleServer_namefield_id_get, _otapi.RippleServer_namefield_id_set)
    __swig_setmethods__["passfield_id"] = _otapi.RippleServer_passfield_id_set
    __swig_getmethods__["passfield_id"] = _otapi.RippleServer_passfield_id_get
    if _newclass:passfield_id = _swig_property(_otapi.RippleServer_passfield_id_get, _otapi.RippleServer_passfield_id_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.RippleServer_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.RippleServer_ot_dynamic_cast)
RippleServer_swigregister = _otapi.RippleServer_swigregister
RippleServer_swigregister(RippleServer)

def RippleServer_ot_dynamic_cast(*args):
  return _otapi.RippleServer_ot_dynamic_cast(*args)
RippleServer_ot_dynamic_cast = _otapi.RippleServer_ot_dynamic_cast

class LoomServer(Server):
    __swig_setmethods__ = {}
    for _s in [Server]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoomServer, name, value)
    __swig_getmethods__ = {}
    for _s in [Server]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoomServer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_LoomServer
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.LoomServer_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.LoomServer_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.LoomServer_gui_label_get, _otapi.LoomServer_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.LoomServer_server_id_set
    __swig_getmethods__["server_id"] = _otapi.LoomServer_server_id_get
    if _newclass:server_id = _swig_property(_otapi.LoomServer_server_id_get, _otapi.LoomServer_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.LoomServer_server_type_set
    __swig_getmethods__["server_type"] = _otapi.LoomServer_server_type_get
    if _newclass:server_type = _swig_property(_otapi.LoomServer_server_type_get, _otapi.LoomServer_server_type_set)
    __swig_setmethods__["server_host"] = _otapi.LoomServer_server_host_set
    __swig_getmethods__["server_host"] = _otapi.LoomServer_server_host_get
    if _newclass:server_host = _swig_property(_otapi.LoomServer_server_host_get, _otapi.LoomServer_server_host_set)
    __swig_setmethods__["server_port"] = _otapi.LoomServer_server_port_set
    __swig_getmethods__["server_port"] = _otapi.LoomServer_server_port_get
    if _newclass:server_port = _swig_property(_otapi.LoomServer_server_port_get, _otapi.LoomServer_server_port_set)
    __swig_setmethods__["loom_username"] = _otapi.LoomServer_loom_username_set
    __swig_getmethods__["loom_username"] = _otapi.LoomServer_loom_username_get
    if _newclass:loom_username = _swig_property(_otapi.LoomServer_loom_username_get, _otapi.LoomServer_loom_username_set)
    __swig_setmethods__["namefield_id"] = _otapi.LoomServer_namefield_id_set
    __swig_getmethods__["namefield_id"] = _otapi.LoomServer_namefield_id_get
    if _newclass:namefield_id = _swig_property(_otapi.LoomServer_namefield_id_get, _otapi.LoomServer_namefield_id_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.LoomServer_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.LoomServer_ot_dynamic_cast)
LoomServer_swigregister = _otapi.LoomServer_swigregister
LoomServer_swigregister(LoomServer)

def LoomServer_ot_dynamic_cast(*args):
  return _otapi.LoomServer_ot_dynamic_cast(*args)
LoomServer_ot_dynamic_cast = _otapi.LoomServer_ot_dynamic_cast

class ContactNym(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactNym, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactNym, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_ContactNym
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.ContactNym_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.ContactNym_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.ContactNym_gui_label_get, _otapi.ContactNym_gui_label_set)
    __swig_setmethods__["nym_type"] = _otapi.ContactNym_nym_type_set
    __swig_getmethods__["nym_type"] = _otapi.ContactNym_nym_type_get
    if _newclass:nym_type = _swig_property(_otapi.ContactNym_nym_type_get, _otapi.ContactNym_nym_type_set)
    __swig_setmethods__["nym_id"] = _otapi.ContactNym_nym_id_set
    __swig_getmethods__["nym_id"] = _otapi.ContactNym_nym_id_get
    if _newclass:nym_id = _swig_property(_otapi.ContactNym_nym_id_get, _otapi.ContactNym_nym_id_set)
    __swig_setmethods__["public_key"] = _otapi.ContactNym_public_key_set
    __swig_getmethods__["public_key"] = _otapi.ContactNym_public_key_get
    if _newclass:public_key = _swig_property(_otapi.ContactNym_public_key_get, _otapi.ContactNym_public_key_set)
    __swig_setmethods__["memo"] = _otapi.ContactNym_memo_set
    __swig_getmethods__["memo"] = _otapi.ContactNym_memo_get
    if _newclass:memo = _swig_property(_otapi.ContactNym_memo_get, _otapi.ContactNym_memo_set)
    def GetServerInfoCount(self): return _otapi.ContactNym_GetServerInfoCount(self)
    def GetServerInfo(self, *args): return _otapi.ContactNym_GetServerInfo(self, *args)
    def RemoveServerInfo(self, *args): return _otapi.ContactNym_RemoveServerInfo(self, *args)
    def AddServerInfo(self, *args): return _otapi.ContactNym_AddServerInfo(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.ContactNym_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.ContactNym_ot_dynamic_cast)
ContactNym_swigregister = _otapi.ContactNym_swigregister
ContactNym_swigregister(ContactNym)

def ContactNym_ot_dynamic_cast(*args):
  return _otapi.ContactNym_ot_dynamic_cast(*args)
ContactNym_ot_dynamic_cast = _otapi.ContactNym_ot_dynamic_cast

class WalletData(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WalletData, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WalletData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_WalletData
    __del__ = lambda self : None;
    def GetBitcoinServerCount(self): return _otapi.WalletData_GetBitcoinServerCount(self)
    def GetBitcoinServer(self, *args): return _otapi.WalletData_GetBitcoinServer(self, *args)
    def RemoveBitcoinServer(self, *args): return _otapi.WalletData_RemoveBitcoinServer(self, *args)
    def AddBitcoinServer(self, *args): return _otapi.WalletData_AddBitcoinServer(self, *args)
    def GetBitcoinAcctCount(self): return _otapi.WalletData_GetBitcoinAcctCount(self)
    def GetBitcoinAcct(self, *args): return _otapi.WalletData_GetBitcoinAcct(self, *args)
    def RemoveBitcoinAcct(self, *args): return _otapi.WalletData_RemoveBitcoinAcct(self, *args)
    def AddBitcoinAcct(self, *args): return _otapi.WalletData_AddBitcoinAcct(self, *args)
    def GetRippleServerCount(self): return _otapi.WalletData_GetRippleServerCount(self)
    def GetRippleServer(self, *args): return _otapi.WalletData_GetRippleServer(self, *args)
    def RemoveRippleServer(self, *args): return _otapi.WalletData_RemoveRippleServer(self, *args)
    def AddRippleServer(self, *args): return _otapi.WalletData_AddRippleServer(self, *args)
    def GetLoomServerCount(self): return _otapi.WalletData_GetLoomServerCount(self)
    def GetLoomServer(self, *args): return _otapi.WalletData_GetLoomServer(self, *args)
    def RemoveLoomServer(self, *args): return _otapi.WalletData_RemoveLoomServer(self, *args)
    def AddLoomServer(self, *args): return _otapi.WalletData_AddLoomServer(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.WalletData_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.WalletData_ot_dynamic_cast)
WalletData_swigregister = _otapi.WalletData_swigregister
WalletData_swigregister(WalletData)

def WalletData_ot_dynamic_cast(*args):
  return _otapi.WalletData_ot_dynamic_cast(*args)
WalletData_ot_dynamic_cast = _otapi.WalletData_ot_dynamic_cast

class ContactAcct(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactAcct, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactAcct, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_ContactAcct
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.ContactAcct_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.ContactAcct_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.ContactAcct_gui_label_get, _otapi.ContactAcct_gui_label_set)
    __swig_setmethods__["server_type"] = _otapi.ContactAcct_server_type_set
    __swig_getmethods__["server_type"] = _otapi.ContactAcct_server_type_get
    if _newclass:server_type = _swig_property(_otapi.ContactAcct_server_type_get, _otapi.ContactAcct_server_type_set)
    __swig_setmethods__["server_id"] = _otapi.ContactAcct_server_id_set
    __swig_getmethods__["server_id"] = _otapi.ContactAcct_server_id_get
    if _newclass:server_id = _swig_property(_otapi.ContactAcct_server_id_get, _otapi.ContactAcct_server_id_set)
    __swig_setmethods__["asset_type_id"] = _otapi.ContactAcct_asset_type_id_set
    __swig_getmethods__["asset_type_id"] = _otapi.ContactAcct_asset_type_id_get
    if _newclass:asset_type_id = _swig_property(_otapi.ContactAcct_asset_type_id_get, _otapi.ContactAcct_asset_type_id_set)
    __swig_setmethods__["acct_id"] = _otapi.ContactAcct_acct_id_set
    __swig_getmethods__["acct_id"] = _otapi.ContactAcct_acct_id_get
    if _newclass:acct_id = _swig_property(_otapi.ContactAcct_acct_id_get, _otapi.ContactAcct_acct_id_set)
    __swig_setmethods__["nym_id"] = _otapi.ContactAcct_nym_id_set
    __swig_getmethods__["nym_id"] = _otapi.ContactAcct_nym_id_get
    if _newclass:nym_id = _swig_property(_otapi.ContactAcct_nym_id_get, _otapi.ContactAcct_nym_id_set)
    __swig_setmethods__["memo"] = _otapi.ContactAcct_memo_set
    __swig_getmethods__["memo"] = _otapi.ContactAcct_memo_get
    if _newclass:memo = _swig_property(_otapi.ContactAcct_memo_get, _otapi.ContactAcct_memo_set)
    __swig_setmethods__["public_key"] = _otapi.ContactAcct_public_key_set
    __swig_getmethods__["public_key"] = _otapi.ContactAcct_public_key_get
    if _newclass:public_key = _swig_property(_otapi.ContactAcct_public_key_get, _otapi.ContactAcct_public_key_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.ContactAcct_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.ContactAcct_ot_dynamic_cast)
ContactAcct_swigregister = _otapi.ContactAcct_swigregister
ContactAcct_swigregister(ContactAcct)

def ContactAcct_ot_dynamic_cast(*args):
  return _otapi.ContactAcct_ot_dynamic_cast(*args)
ContactAcct_ot_dynamic_cast = _otapi.ContactAcct_ot_dynamic_cast

class Contact(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contact, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Contact, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Contact
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Contact_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Contact_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Contact_gui_label_get, _otapi.Contact_gui_label_set)
    __swig_setmethods__["contact_id"] = _otapi.Contact_contact_id_set
    __swig_getmethods__["contact_id"] = _otapi.Contact_contact_id_get
    if _newclass:contact_id = _swig_property(_otapi.Contact_contact_id_get, _otapi.Contact_contact_id_set)
    __swig_setmethods__["email"] = _otapi.Contact_email_set
    __swig_getmethods__["email"] = _otapi.Contact_email_get
    if _newclass:email = _swig_property(_otapi.Contact_email_get, _otapi.Contact_email_set)
    __swig_setmethods__["memo"] = _otapi.Contact_memo_set
    __swig_getmethods__["memo"] = _otapi.Contact_memo_get
    if _newclass:memo = _swig_property(_otapi.Contact_memo_get, _otapi.Contact_memo_set)
    __swig_setmethods__["public_key"] = _otapi.Contact_public_key_set
    __swig_getmethods__["public_key"] = _otapi.Contact_public_key_get
    if _newclass:public_key = _swig_property(_otapi.Contact_public_key_get, _otapi.Contact_public_key_set)
    def GetContactNymCount(self): return _otapi.Contact_GetContactNymCount(self)
    def GetContactNym(self, *args): return _otapi.Contact_GetContactNym(self, *args)
    def RemoveContactNym(self, *args): return _otapi.Contact_RemoveContactNym(self, *args)
    def AddContactNym(self, *args): return _otapi.Contact_AddContactNym(self, *args)
    def GetContactAcctCount(self): return _otapi.Contact_GetContactAcctCount(self)
    def GetContactAcct(self, *args): return _otapi.Contact_GetContactAcct(self, *args)
    def RemoveContactAcct(self, *args): return _otapi.Contact_RemoveContactAcct(self, *args)
    def AddContactAcct(self, *args): return _otapi.Contact_AddContactAcct(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Contact_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Contact_ot_dynamic_cast)
Contact_swigregister = _otapi.Contact_swigregister
Contact_swigregister(Contact)

def Contact_ot_dynamic_cast(*args):
  return _otapi.Contact_ot_dynamic_cast(*args)
Contact_ot_dynamic_cast = _otapi.Contact_ot_dynamic_cast

class AddressBook(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddressBook, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddressBook, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_AddressBook
    __del__ = lambda self : None;
    def GetContactCount(self): return _otapi.AddressBook_GetContactCount(self)
    def GetContact(self, *args): return _otapi.AddressBook_GetContact(self, *args)
    def RemoveContact(self, *args): return _otapi.AddressBook_RemoveContact(self, *args)
    def AddContact(self, *args): return _otapi.AddressBook_AddContact(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.AddressBook_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.AddressBook_ot_dynamic_cast)
AddressBook_swigregister = _otapi.AddressBook_swigregister
AddressBook_swigregister(AddressBook)

def AddressBook_ot_dynamic_cast(*args):
  return _otapi.AddressBook_ot_dynamic_cast(*args)
AddressBook_ot_dynamic_cast = _otapi.AddressBook_ot_dynamic_cast

# This file is compatible with both classic and new-style classes.


