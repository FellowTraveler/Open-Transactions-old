/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class SwigPasswordCallback : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SwigPasswordCallback(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SwigPasswordCallback obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigPasswordCallback() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapiPINVOKE.delete_SwigPasswordCallback(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public SwigPasswordCallback() : this(otapiPINVOKE.new_SwigPasswordCallback(), true) {
    SwigDirectorConnect();
  }

  public virtual bool SwigGetPassword(OTPassword passwordObject, string strMessage) {
    bool ret = (SwigDerivedClassHasMethod("SwigGetPassword", swigMethodTypes0) ? otapiPINVOKE.SwigPasswordCallback_SwigGetPasswordSwigExplicitSwigPasswordCallback(swigCPtr, OTPassword.getCPtr(passwordObject), strMessage) : otapiPINVOKE.SwigPasswordCallback_SwigGetPassword(swigCPtr, OTPassword.getCPtr(passwordObject), strMessage));
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool SwigNewPassword(OTPassword passwordObject, string strMessage) {
    bool ret = (SwigDerivedClassHasMethod("SwigNewPassword", swigMethodTypes1) ? otapiPINVOKE.SwigPasswordCallback_SwigNewPasswordSwigExplicitSwigPasswordCallback(swigCPtr, OTPassword.getCPtr(passwordObject), strMessage) : otapiPINVOKE.SwigPasswordCallback_SwigNewPassword(swigCPtr, OTPassword.getCPtr(passwordObject), strMessage));
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GetPassword(OTPassword passwordObject, string strMessage) {
    bool ret = otapiPINVOKE.SwigPasswordCallback_GetPassword(OTPassword.getCPtr(passwordObject), strMessage);
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool NewPassword(OTPassword passwordObject, string strMessage) {
    bool ret = otapiPINVOKE.SwigPasswordCallback_NewPassword(OTPassword.getCPtr(passwordObject), strMessage);
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SetCallback(SwigPasswordCallback pSwigPasswordCallback) {
    bool ret = otapiPINVOKE.SwigPasswordCallback_SetCallback(SwigPasswordCallback.getCPtr(pSwigPasswordCallback));
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("SwigGetPassword", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateSwigPasswordCallback_0(SwigDirectorSwigGetPassword);
    if (SwigDerivedClassHasMethod("SwigNewPassword", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateSwigPasswordCallback_1(SwigDirectorSwigNewPassword);
    otapiPINVOKE.SwigPasswordCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(SwigPasswordCallback));
    return hasDerivedMethod;
  }

  private bool SwigDirectorSwigGetPassword(IntPtr passwordObject, string strMessage) {
    return SwigGetPassword(new OTPassword(passwordObject, false), strMessage);
  }

  private bool SwigDirectorSwigNewPassword(IntPtr passwordObject, string strMessage) {
    return SwigNewPassword(new OTPassword(passwordObject, false), strMessage);
  }

  public delegate bool SwigDelegateSwigPasswordCallback_0(IntPtr passwordObject, string strMessage);
  public delegate bool SwigDelegateSwigPasswordCallback_1(IntPtr passwordObject, string strMessage);

  private SwigDelegateSwigPasswordCallback_0 swigDelegate0;
  private SwigDelegateSwigPasswordCallback_1 swigDelegate1;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(OTPassword), typeof(string) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(OTPassword), typeof(string) };
}
