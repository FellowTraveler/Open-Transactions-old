/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class OTPasswordData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OTPasswordData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(OTPasswordData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~OTPasswordData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          otapiPINVOKE.delete_OTPasswordData(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public bool isForNormalNym() {
    bool ret = otapiPINVOKE.OTPasswordData_isForNormalNym(swigCPtr);
    return ret;
  }

  public bool isForMasterKey() {
    bool ret = otapiPINVOKE.OTPasswordData_isForMasterKey(swigCPtr);
    return ret;
  }

  public string GetDisplayString() {
    string ret = otapiPINVOKE.OTPasswordData_GetDisplayString(swigCPtr);
    return ret;
  }

  public bool isUsingOldSystem() {
    bool ret = otapiPINVOKE.OTPasswordData_isUsingOldSystem(swigCPtr);
    return ret;
  }

  public void setUsingOldSystem(bool bUsing) {
    otapiPINVOKE.OTPasswordData_setUsingOldSystem__SWIG_0(swigCPtr, bUsing);
  }

  public void setUsingOldSystem() {
    otapiPINVOKE.OTPasswordData_setUsingOldSystem__SWIG_1(swigCPtr);
  }

  public OTPassword GetMasterPW() {
    IntPtr cPtr = otapiPINVOKE.OTPasswordData_GetMasterPW(swigCPtr);
    OTPassword ret = (cPtr == IntPtr.Zero) ? null : new OTPassword(cPtr, false);
    return ret;
  }

  public OTPasswordData(string str_Display, OTPassword pMasterPW) : this(otapiPINVOKE.new_OTPasswordData__SWIG_0(str_Display, OTPassword.getCPtr(pMasterPW)), true) {
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public OTPasswordData(string str_Display) : this(otapiPINVOKE.new_OTPasswordData__SWIG_1(str_Display), true) {
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public OTPasswordData(SWIGTYPE_p_OTString strDisplay, OTPassword pMasterPW) : this(otapiPINVOKE.new_OTPasswordData__SWIG_2(SWIGTYPE_p_OTString.getCPtr(strDisplay), OTPassword.getCPtr(pMasterPW)), true) {
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public OTPasswordData(SWIGTYPE_p_OTString strDisplay) : this(otapiPINVOKE.new_OTPasswordData__SWIG_3(SWIGTYPE_p_OTString.getCPtr(strDisplay)), true) {
    if (otapiPINVOKE.SWIGPendingException.Pending) throw otapiPINVOKE.SWIGPendingException.Retrieve();
  }

}
