/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPHP

#define SWIG_DIRECTORS
#define SWIG_PREFIX ""
#define SWIG_PREFIX_LEN 0

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * phprun.swg
 *
 * PHP runtime library
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif
#include "zend.h"
#include "zend_API.h"
#include "zend_exceptions.h"
#include "php.h"
#include "ext/standard/php_string.h"
#include <stdlib.h> /* for abort(), used in generated code. */

#ifdef ZEND_RAW_FENTRY
/* ZEND_RAW_FENTRY was added somewhere between 5.2.0 and 5.2.3 */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_RAW_FENTRY((char*)#ZN, N, A, 0)
#else
/* This causes warnings from GCC >= 4.2 (assigning a string literal to char*).
 * But this seems to be unavoidable without directly assuming knowledge of
 * the structure, which changed between PHP4 and PHP5. */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_NAMED_FE(ZN, N, A)
#endif

#ifndef Z_SET_ISREF_P
/* For PHP < 5.3 */
# define Z_SET_ISREF_P(z) (z)->is_ref = 1
#endif
#ifndef Z_SET_REFCOUNT_P
/* For PHP < 5.3 */
# define Z_SET_REFCOUNT_P(z, rc) (z)->refcount = (rc)
#endif

#define SWIG_LONG_CONSTANT(N, V) zend_register_long_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_DOUBLE_CONSTANT(N, V) zend_register_double_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_STRING_CONSTANT(N, V) zend_register_stringl_constant((char*)#N, sizeof(#N), (char*)(V), strlen(V), CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_CHAR_CONSTANT(N, V) do {\
    static char swig_char = (V);\
    zend_register_stringl_constant((char*)#N, sizeof(#N), &swig_char, 1, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC);\
} while (0)

/* These TSRMLS_ stuff should already be defined now, but with older php under
   redhat are not... */
#ifndef TSRMLS_D
#define TSRMLS_D
#endif
#ifndef TSRMLS_DC
#define TSRMLS_DC
#endif
#ifndef TSRMLS_C
#define TSRMLS_C
#endif
#ifndef TSRMLS_CC
#define TSRMLS_CC
#endif

#ifdef __cplusplus
}
#endif

/* But in fact SWIG_ConvertPtr is the native interface for getting typed
   pointer values out of zvals.  We need the TSRMLS_ macros for when we
   make PHP type calls later as we handle php resources */
#define SWIG_ConvertPtr(obj,pp,type,flags) SWIG_ZTS_ConvertPtr(obj,pp,type,flags TSRMLS_CC)


#define SWIG_fail goto fail

static const char *default_error_msg = "Unknown error occurred";
static int default_error_code = E_ERROR;

#define SWIG_PHP_Arg_Error_Msg(argnum,extramsg) "Error in argument " #argnum " "#extramsg

#define SWIG_PHP_Error(code,msg) do { SWIG_ErrorCode() = code; SWIG_ErrorMsg() = msg; SWIG_fail; } while (0)

#define SWIG_contract_assert(expr,msg) \
  if (!(expr) ) { zend_printf("Contract Assert Failed %s\n",msg ); } else

/* Standard SWIG API */
#define SWIG_GetModule(clientdata) SWIG_Php_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Php_SetModule(pointer)

/* used to wrap returned objects in so we know whether they are newobject
   and need freeing, or not */
typedef struct {
  void * ptr;
  int newobject;
} swig_object_wrapper;

/* empty zend destructor for types without one */
static ZEND_RSRC_DTOR_FUNC(SWIG_landfill) { (void)rsrc; }

#define SWIG_SetPointerZval(a,b,c,d) SWIG_ZTS_SetPointerZval(a,b,c,d TSRMLS_CC)
#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))

static void
SWIG_ZTS_SetPointerZval(zval *z, void *ptr, swig_type_info *type, int newobject TSRMLS_DC) {
  /*
   * First test for Null pointers.  Return those as PHP native NULL
   */
  if (!ptr ) {
    ZVAL_NULL(z);
    return;
  }
  if (type->clientdata) {
    swig_object_wrapper *value;
    if (! (*(int *)(type->clientdata)))
      zend_error(E_ERROR, "Type: %s failed to register with zend",type->name);
    value=(swig_object_wrapper *)emalloc(sizeof(swig_object_wrapper));
    value->ptr=ptr;
    value->newobject=(newobject & 1);
    if ((newobject & 2) == 0) {
      /* Just register the pointer as a resource. */
      ZEND_REGISTER_RESOURCE(z, value, *(int *)(type->clientdata));
    } else {
      /*
       * Wrap the resource in an object, the resource will be accessible
       * via the "_cPtr" member. This is currently only used by
       * directorin typemaps.
       */
      zval *resource;
      zend_class_entry **ce = NULL;
      const char *type_name = type->name+3; /* +3 so: _p_Foo -> Foo */
      size_t type_name_len;
      int result;
      const char * p;

      /* Namespace__Foo -> Foo */
      /* FIXME: ugly and goes wrong for classes with __ in their names. */
      while ((p = strstr(type_name, "__")) != NULL) {
        type_name = p + 2;
      }
      type_name_len = strlen(type_name);

      MAKE_STD_ZVAL(resource);
      ZEND_REGISTER_RESOURCE(resource, value, *(int *)(type->clientdata));
      if (SWIG_PREFIX_LEN > 0) {
        char * classname = (char*)emalloc(SWIG_PREFIX_LEN + type_name_len + 1);
        strcpy(classname, SWIG_PREFIX);
        strcpy(classname + SWIG_PREFIX_LEN, type_name);
        result = zend_lookup_class(classname, SWIG_PREFIX_LEN + type_name_len, &ce TSRMLS_CC);
        efree(classname);
      } else {
        result = zend_lookup_class((char *)type_name, type_name_len, &ce TSRMLS_CC);
      }
      if (result != SUCCESS) {
        /* class does not exist */
        object_init(z);
      } else {
        object_init_ex(z, *ce);
      }
      Z_SET_REFCOUNT_P(z, 1);
      Z_SET_ISREF_P(z);
      zend_hash_update(HASH_OF(z), (char*)"_cPtr", sizeof("_cPtr"), (void*)&resource, sizeof(zval), NULL);
    }
    return;
  }
  zend_error(E_ERROR, "Type: %s not registered with zend",type->name);
}

/* This pointer conversion routine takes the native pointer p (along with
   its type name) and converts it by calling appropriate casting functions
   according to ty.  The resultant pointer is returned, or NULL is returned
   if the pointer can't be cast.

   Sadly PHP has no API to find a type name from a type id, only from an
   instance of a resource of the type id, so we have to pass type_name as well.

   The two functions which might call this are:
   SWIG_ZTS_ConvertResourcePtr which gets the type name from the resource
   and the registered zend destructors for which we have one per type each
   with the type name hard wired in. */
static void *
SWIG_ZTS_ConvertResourceData(void * p, const char *type_name, swig_type_info *ty TSRMLS_DC) {
  swig_cast_info *tc;
  void *result = 0;

  if (!ty) {
    /* They don't care about the target type, so just pass on the pointer! */
    return p;
  }

  if (! type_name) {  
    /* can't convert p to ptr type ty if we don't know what type p is */
    return NULL;
  }

  /* convert and cast p from type_name to ptr as ty. */
  tc = SWIG_TypeCheck(type_name, ty);
  if (tc) {
    int newmemory = 0;
    result = SWIG_TypeCast(tc, p, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  }
  return result;
}

/* This function returns a pointer of type ty by extracting the pointer
   and type info from the resource in z.  z must be a resource.
   If it fails, NULL is returned.
   It uses SWIG_ZTS_ConvertResourceData to do the real work. */
static void *
SWIG_ZTS_ConvertResourcePtr(zval *z, swig_type_info *ty, int flags TSRMLS_DC) {
  swig_object_wrapper *value;
  void *p;
  int type;
  const char *type_name;

  value = (swig_object_wrapper *) zend_list_find(z->value.lval, &type);
  if ( flags & SWIG_POINTER_DISOWN ) {
    value->newobject = 0;
  }
  p = value->ptr;
  if (type==-1) return NULL;

  type_name=zend_rsrc_list_get_rsrc_type(z->value.lval TSRMLS_CC);

  return SWIG_ZTS_ConvertResourceData(p, type_name, ty TSRMLS_CC);
}

/* We allow passing of a RESOURCE pointing to the object or an OBJECT whose
   _cPtr is a resource pointing to the object */
static int
SWIG_ZTS_ConvertPtr(zval *z, void **ptr, swig_type_info *ty, int flags TSRMLS_DC) {
  if (z == NULL) {
    *ptr = 0;
    return 0;
  }

  switch (z->type) {
    case IS_OBJECT: {
      zval ** _cPtr;
      if (zend_hash_find(HASH_OF(z),(char*)"_cPtr",sizeof("_cPtr"),(void**)&_cPtr)==SUCCESS) {
	if ((*_cPtr)->type==IS_RESOURCE) {
	  *ptr = SWIG_ZTS_ConvertResourcePtr(*_cPtr, ty, flags TSRMLS_CC);
	  return (*ptr == NULL ? -1 : 0);
	}
      }
      break;
    }
    case IS_RESOURCE:
      *ptr = SWIG_ZTS_ConvertResourcePtr(z, ty, flags TSRMLS_CC);
      return (*ptr == NULL ? -1 : 0);
    case IS_NULL:
      *ptr = 0;
      return 0;
  }

  return -1;
}

static char const_name[] = "swig_runtime_data_type_pointer";
static swig_module_info *SWIG_Php_GetModule() {
  zval *pointer;
  swig_module_info *ret = 0;

  MAKE_STD_ZVAL(pointer);

  TSRMLS_FETCH();

  if (zend_get_constant(const_name, sizeof(const_name) - 1, pointer TSRMLS_CC)) {
    if (pointer->type == IS_LONG) {
      ret = (swig_module_info *) pointer->value.lval;
    }
  } 
  FREE_ZVAL(pointer);
  return ret; 
}

static void SWIG_Php_SetModule(swig_module_info *pointer) {
  TSRMLS_FETCH();
  REGISTER_MAIN_LONG_CONSTANT(const_name, (long) pointer, 0);
}

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_int swig_types[0]
#define SWIGTYPE_p_OTCallback swig_types[1]
#define SWIGTYPE_p_OTCaller swig_types[2]
#define SWIGTYPE_p_OTDB__Acct swig_types[3]
#define SWIGTYPE_p_OTDB__AddressBook swig_types[4]
#define SWIGTYPE_p_OTDB__AskData swig_types[5]
#define SWIGTYPE_p_OTDB__BidData swig_types[6]
#define SWIGTYPE_p_OTDB__BitcoinAcct swig_types[7]
#define SWIGTYPE_p_OTDB__BitcoinServer swig_types[8]
#define SWIGTYPE_p_OTDB__Blob swig_types[9]
#define SWIGTYPE_p_OTDB__Contact swig_types[10]
#define SWIGTYPE_p_OTDB__ContactAcct swig_types[11]
#define SWIGTYPE_p_OTDB__ContactNym swig_types[12]
#define SWIGTYPE_p_OTDB__Displayable swig_types[13]
#define SWIGTYPE_p_OTDB__LoomServer swig_types[14]
#define SWIGTYPE_p_OTDB__MarketData swig_types[15]
#define SWIGTYPE_p_OTDB__MarketList swig_types[16]
#define SWIGTYPE_p_OTDB__OTDBString swig_types[17]
#define SWIGTYPE_p_OTDB__OfferDataMarket swig_types[18]
#define SWIGTYPE_p_OTDB__OfferDataNym swig_types[19]
#define SWIGTYPE_p_OTDB__OfferListMarket swig_types[20]
#define SWIGTYPE_p_OTDB__OfferListNym swig_types[21]
#define SWIGTYPE_p_OTDB__RippleServer swig_types[22]
#define SWIGTYPE_p_OTDB__Server swig_types[23]
#define SWIGTYPE_p_OTDB__ServerInfo swig_types[24]
#define SWIGTYPE_p_OTDB__Storable swig_types[25]
#define SWIGTYPE_p_OTDB__Storage swig_types[26]
#define SWIGTYPE_p_OTDB__StringMap swig_types[27]
#define SWIGTYPE_p_OTDB__TradeDataMarket swig_types[28]
#define SWIGTYPE_p_OTDB__TradeDataNym swig_types[29]
#define SWIGTYPE_p_OTDB__TradeListMarket swig_types[30]
#define SWIGTYPE_p_OTDB__TradeListNym swig_types[31]
#define SWIGTYPE_p_OTDB__WalletData swig_types[32]
#define SWIGTYPE_p_OTPacker swig_types[33]
#define SWIGTYPE_p_OTPassword swig_types[34]
#define SWIGTYPE_p_char swig_types[35]
#define SWIGTYPE_p_int32_t swig_types[36]
#define SWIGTYPE_p_p_void swig_types[37]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[38]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[39]
#define SWIGTYPE_p_uint32_t swig_types[40]
#define SWIGTYPE_p_uint8_t swig_types[41]
#define SWIGTYPE_p_void swig_types[42]
static swig_type_info *swig_types[44];
static swig_module_info swig_module = {swig_types, 43, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

/* header section */
ZEND_BEGIN_MODULE_GLOBALS(otapi)
const char *error_msg;
int error_code;
ZEND_END_MODULE_GLOBALS(otapi)
ZEND_DECLARE_MODULE_GLOBALS(otapi)
#ifdef ZTS
#define SWIG_ErrorMsg() TSRMG(otapi_globals_id, zend_otapi_globals *, error_msg )
#define SWIG_ErrorCode() TSRMG(otapi_globals_id, zend_otapi_globals *, error_code )
#else
#define SWIG_ErrorMsg() (otapi_globals.error_msg)
#define SWIG_ErrorCode() (otapi_globals.error_code)
#endif

#ifdef __GNUC__
static void SWIG_FAIL() __attribute__ ((__noreturn__));
#endif

static void SWIG_FAIL() {
    zend_error(SWIG_ErrorCode(), "%s", SWIG_ErrorMsg());
    abort();
}

static void otapi_init_globals(zend_otapi_globals *globals ) {
  globals->error_msg = default_error_msg;
  globals->error_code = default_error_code;
}
static void otapi_destroy_globals(zend_otapi_globals * globals) { (void)globals; }

static void SWIG_ResetError() {
  TSRMLS_FETCH();
  SWIG_ErrorMsg() = default_error_msg;
  SWIG_ErrorCode() = default_error_code;
}

ZEND_NAMED_FUNCTION(_wrap_swig_otapi_alter_newobject) {
  zval **args[2];
  swig_object_wrapper *value;
  int type;
  int thisown;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  value->newobject = zval_is_true(*args[1]);

  return;
}
ZEND_NAMED_FUNCTION(_wrap_swig_otapi_get_newobject) {
  zval **args[1];
  swig_object_wrapper *value;
  int type;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  RETVAL_LONG(value->newobject);

  return;
}
#define SWIG_name  "otapi"
#ifdef __cplusplus
extern "C" {
#endif
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_otapi.h"
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to PHP extensions.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PHP_HEADER_
#define SWIG_DIRECTOR_PHP_HEADER_

#ifdef __cplusplus

#include <string>
#include <map>

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif

namespace Swig {
  /* memory handler */
  struct GCItem
  {
    virtual ~GCItem() {}

    virtual int get_own() const
    {
      return 0;
    }
  };

  struct GCItem_var
  {
    GCItem_var(GCItem *item = 0) : _item(item)
    {
    }

    GCItem_var& operator=(GCItem *item)
    {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var()
    {
      delete _item;
    }

    GCItem * operator->() const
    {
      return _item;
    }

    private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem
  {
    GCItem_Object(int own) : _own(own)
    {
    }

    virtual ~GCItem_Object()
    {
    }

    int get_own() const
    {
      return _own;
    }

    private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem
  {
    GCItem_T(Type *ptr) : _ptr(ptr)
    {
    }

    virtual ~GCItem_T()
    {
      delete _ptr;
    }

    private:
    Type *_ptr;
  };

  class Director {
    protected:
      zval *swig_self;
      typedef std::map<void*, GCItem_var> swig_ownership_map;
      mutable swig_ownership_map swig_owner;
#ifdef ZTS
      // Store the ZTS context so it's available when C++ calls back to PHP.
      void *** swig_zts_ctx;
#endif 
    public:
      Director(zval* self TSRMLS_DC) : swig_self(self) {
        TSRMLS_SET_CTX(swig_zts_ctx);
      }

      bool swig_is_overridden_method(char *cname, char *lc_fname) {
        TSRMLS_FETCH_FROM_CTX(swig_zts_ctx);
        zend_class_entry **ce;
        zend_function *mptr;
        int name_len = strlen(lc_fname);
        
        if (zend_lookup_class(cname, strlen(cname), &ce TSRMLS_CC) != SUCCESS) {
          return false;
        }
        if (zend_hash_find(&(*ce)->function_table, lc_fname, name_len + 1, (void**) &mptr) != SUCCESS) {
          return false;
        }
        // common.scope points to the declaring class
        return strcmp(mptr->common.scope->name, cname);
      }

      template <typename Type>
      void swig_acquire_ownership(Type *vptr) const
      {
        if (vptr) {
          swig_owner[vptr] = new GCItem_T<Type>(vptr);
        }
      }
  };

  /* base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;
  public:
    DirectorException(int code, const char *hdr, const char* msg TSRMLS_DC)
      : swig_msg(hdr)
    {
      if (strlen(msg)) {
        swig_msg += " ";
        swig_msg += msg;
      }
      SWIG_ErrorCode() = code;
      SWIG_ErrorMsg() = swig_msg.c_str();
    }

    static void raise(int code, const char *hdr, const char* msg TSRMLS_DC)
    {
      throw DirectorException(code, hdr, msg TSRMLS_CC);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg TSRMLS_DC)
      : DirectorException(E_ERROR, "SWIG director pure virtual method called", msg TSRMLS_CC)
    {
    }

    static void raise(const char *msg TSRMLS_DC)
    {
      throw DirectorPureVirtualException(msg TSRMLS_CC);
    }
  };
  /* any php exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException
  {
  public:
    DirectorMethodException(const char* msg TSRMLS_DC)
      : DirectorException(E_ERROR, "SWIG director method error", msg TSRMLS_CC)
    {
    }

    static void raise(const char *msg TSRMLS_DC)
    {
      throw DirectorMethodException(msg TSRMLS_CC);
    }
  };
}

// DirectorMethodException() is documented to be callable with no parameters
// so use a macro to insert TSRMLS_CC so any ZTS context gets passed.
#define DirectorMethodException() DirectorMethodException("" TSRMLS_CC)

#endif /* __cplusplus */

#endif

#include <string>
#include <map>
#include "../../include/otlib/OTAsymmetricKey.h"
#include "../../include/otapi/OTAPI_funcdef.h"
#include "../../include/otlib/OTStorage.h"


#if PHP_MAJOR_VERSION < 5
# define SWIG_exception(code, msg) { zend_error(E_ERROR, msg); }
#else
# include "zend_exceptions.h"
# define SWIG_exception(code, msg) { zend_throw_exception(NULL, (char*)msg, code TSRMLS_CC); }
#endif


#include <stdexcept>


#include <string>


	using namespace OTDB;
	

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_OTDB__BitcoinAcctTo_p_OTDB__Acct(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Acct *)  ((OTDB::BitcoinAcct *) x));
}
static void *_p_OTDB__BitcoinServerTo_p_OTDB__Server(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Server *)  ((OTDB::BitcoinServer *) x));
}
static void *_p_OTDB__RippleServerTo_p_OTDB__Server(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Server *)  ((OTDB::RippleServer *) x));
}
static void *_p_OTDB__LoomServerTo_p_OTDB__Server(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Server *)  ((OTDB::LoomServer *) x));
}
static void *_p_OTDB__LoomServerTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *) (OTDB::ServerInfo *)(OTDB::Server *) ((OTDB::LoomServer *) x));
}
static void *_p_OTDB__RippleServerTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *) (OTDB::ServerInfo *)(OTDB::Server *) ((OTDB::RippleServer *) x));
}
static void *_p_OTDB__ContactNymTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *)  ((OTDB::ContactNym *) x));
}
static void *_p_OTDB__TradeDataMarketTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *)  ((OTDB::TradeDataMarket *) x));
}
static void *_p_OTDB__OfferDataMarketTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *)  ((OTDB::OfferDataMarket *) x));
}
static void *_p_OTDB__BitcoinServerTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *) (OTDB::ServerInfo *)(OTDB::Server *) ((OTDB::BitcoinServer *) x));
}
static void *_p_OTDB__ServerTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *) (OTDB::ServerInfo *) ((OTDB::Server *) x));
}
static void *_p_OTDB__AcctTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *)  ((OTDB::Acct *) x));
}
static void *_p_OTDB__ContactAcctTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *)  ((OTDB::ContactAcct *) x));
}
static void *_p_OTDB__BitcoinAcctTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *) (OTDB::Acct *) ((OTDB::BitcoinAcct *) x));
}
static void *_p_OTDB__MarketDataTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *)  ((OTDB::MarketData *) x));
}
static void *_p_OTDB__ServerInfoTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *)  ((OTDB::ServerInfo *) x));
}
static void *_p_OTDB__ContactTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *)  ((OTDB::Contact *) x));
}
static void *_p_OTDB__BidDataTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *) (OTDB::OfferDataMarket *) ((OTDB::BidData *) x));
}
static void *_p_OTDB__AskDataTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *) (OTDB::OfferDataMarket *) ((OTDB::AskData *) x));
}
static void *_p_OTDB__TradeDataNymTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *)  ((OTDB::TradeDataNym *) x));
}
static void *_p_OTDB__OfferDataNymTo_p_OTDB__Displayable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Displayable *)  ((OTDB::OfferDataNym *) x));
}
static void *_p_OTDB__AskDataTo_p_OTDB__OfferDataMarket(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::OfferDataMarket *)  ((OTDB::AskData *) x));
}
static void *_p_OTDB__BidDataTo_p_OTDB__OfferDataMarket(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::OfferDataMarket *)  ((OTDB::BidData *) x));
}
static void *_p_OTDB__ServerTo_p_OTDB__ServerInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::ServerInfo *)  ((OTDB::Server *) x));
}
static void *_p_OTDB__BitcoinServerTo_p_OTDB__ServerInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::ServerInfo *) (OTDB::Server *) ((OTDB::BitcoinServer *) x));
}
static void *_p_OTDB__RippleServerTo_p_OTDB__ServerInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::ServerInfo *) (OTDB::Server *) ((OTDB::RippleServer *) x));
}
static void *_p_OTDB__LoomServerTo_p_OTDB__ServerInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::ServerInfo *) (OTDB::Server *) ((OTDB::LoomServer *) x));
}
static void *_p_OTDB__MarketListTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *)  ((OTDB::MarketList *) x));
}
static void *_p_OTDB__OfferListNymTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *)  ((OTDB::OfferListNym *) x));
}
static void *_p_OTDB__TradeListNymTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *)  ((OTDB::TradeListNym *) x));
}
static void *_p_OTDB__RippleServerTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *)(OTDB::ServerInfo *)(OTDB::Server *) ((OTDB::RippleServer *) x));
}
static void *_p_OTDB__LoomServerTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *)(OTDB::ServerInfo *)(OTDB::Server *) ((OTDB::LoomServer *) x));
}
static void *_p_OTDB__ContactNymTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *) ((OTDB::ContactNym *) x));
}
static void *_p_OTDB__TradeDataMarketTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *) ((OTDB::TradeDataMarket *) x));
}
static void *_p_OTDB__OfferDataMarketTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *) ((OTDB::OfferDataMarket *) x));
}
static void *_p_OTDB__StringMapTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *)  ((OTDB::StringMap *) x));
}
static void *_p_OTDB__ServerTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *)(OTDB::ServerInfo *) ((OTDB::Server *) x));
}
static void *_p_OTDB__BitcoinServerTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *)(OTDB::ServerInfo *)(OTDB::Server *) ((OTDB::BitcoinServer *) x));
}
static void *_p_OTDB__TradeListMarketTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *)  ((OTDB::TradeListMarket *) x));
}
static void *_p_OTDB__OfferListMarketTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *)  ((OTDB::OfferListMarket *) x));
}
static void *_p_OTDB__AcctTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *) ((OTDB::Acct *) x));
}
static void *_p_OTDB__DisplayableTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *)  ((OTDB::Displayable *) x));
}
static void *_p_OTDB__WalletDataTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *)  ((OTDB::WalletData *) x));
}
static void *_p_OTDB__ContactAcctTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *) ((OTDB::ContactAcct *) x));
}
static void *_p_OTDB__BlobTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *)  ((OTDB::Blob *) x));
}
static void *_p_OTDB__BitcoinAcctTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *)(OTDB::Acct *) ((OTDB::BitcoinAcct *) x));
}
static void *_p_OTDB__OTDBStringTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *)  ((OTDB::OTDBString *) x));
}
static void *_p_OTDB__MarketDataTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *) ((OTDB::MarketData *) x));
}
static void *_p_OTDB__ServerInfoTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *) ((OTDB::ServerInfo *) x));
}
static void *_p_OTDB__ContactTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *) ((OTDB::Contact *) x));
}
static void *_p_OTDB__AddressBookTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *)  ((OTDB::AddressBook *) x));
}
static void *_p_OTDB__BidDataTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *)(OTDB::OfferDataMarket *) ((OTDB::BidData *) x));
}
static void *_p_OTDB__AskDataTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *)(OTDB::OfferDataMarket *) ((OTDB::AskData *) x));
}
static void *_p_OTDB__OfferDataNymTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *) ((OTDB::OfferDataNym *) x));
}
static void *_p_OTDB__TradeDataNymTo_p_OTDB__Storable(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((OTDB::Storable *) (OTDB::Displayable *) ((OTDB::TradeDataNym *) x));
}
static swig_type_info _swigt__int = {"_int", "int", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTCallback = {"_p_OTCallback", "OTCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTCaller = {"_p_OTCaller", "OTCaller *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__Acct = {"_p_OTDB__Acct", "OTDB::Acct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__AddressBook = {"_p_OTDB__AddressBook", "OTDB::AddressBook *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__AskData = {"_p_OTDB__AskData", "OTDB::AskData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__BidData = {"_p_OTDB__BidData", "OTDB::BidData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__BitcoinAcct = {"_p_OTDB__BitcoinAcct", "OTDB::BitcoinAcct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__BitcoinServer = {"_p_OTDB__BitcoinServer", "OTDB::BitcoinServer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__Blob = {"_p_OTDB__Blob", "OTDB::Blob *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__Contact = {"_p_OTDB__Contact", "OTDB::Contact *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__ContactAcct = {"_p_OTDB__ContactAcct", "OTDB::ContactAcct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__ContactNym = {"_p_OTDB__ContactNym", "OTDB::ContactNym *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__Displayable = {"_p_OTDB__Displayable", "OTDB::Displayable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__LoomServer = {"_p_OTDB__LoomServer", "OTDB::LoomServer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__MarketData = {"_p_OTDB__MarketData", "OTDB::MarketData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__MarketList = {"_p_OTDB__MarketList", "OTDB::MarketList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__OTDBString = {"_p_OTDB__OTDBString", "OTDB::OTDBString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__OfferDataMarket = {"_p_OTDB__OfferDataMarket", "OTDB::OfferDataMarket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__OfferDataNym = {"_p_OTDB__OfferDataNym", "OTDB::OfferDataNym *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__OfferListMarket = {"_p_OTDB__OfferListMarket", "OTDB::OfferListMarket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__OfferListNym = {"_p_OTDB__OfferListNym", "OTDB::OfferListNym *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__RippleServer = {"_p_OTDB__RippleServer", "OTDB::RippleServer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__Server = {"_p_OTDB__Server", "OTDB::Server *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__ServerInfo = {"_p_OTDB__ServerInfo", "OTDB::ServerInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__Storable = {"_p_OTDB__Storable", "OTDB::Storable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__Storage = {"_p_OTDB__Storage", "OTDB::Storage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__StringMap = {"_p_OTDB__StringMap", "OTDB::StringMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__TradeDataMarket = {"_p_OTDB__TradeDataMarket", "OTDB::TradeDataMarket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__TradeDataNym = {"_p_OTDB__TradeDataNym", "OTDB::TradeDataNym *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__TradeListMarket = {"_p_OTDB__TradeListMarket", "OTDB::TradeListMarket *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__TradeListNym = {"_p_OTDB__TradeListNym", "OTDB::TradeListNym *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTDB__WalletData = {"_p_OTDB__WalletData", "OTDB::WalletData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTPacker = {"_p_OTPacker", "OTPacker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OTPassword = {"_p_OTPassword", "OTPassword *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "std::map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__int,
  &_swigt__p_OTCallback,
  &_swigt__p_OTCaller,
  &_swigt__p_OTDB__Acct,
  &_swigt__p_OTDB__AddressBook,
  &_swigt__p_OTDB__AskData,
  &_swigt__p_OTDB__BidData,
  &_swigt__p_OTDB__BitcoinAcct,
  &_swigt__p_OTDB__BitcoinServer,
  &_swigt__p_OTDB__Blob,
  &_swigt__p_OTDB__Contact,
  &_swigt__p_OTDB__ContactAcct,
  &_swigt__p_OTDB__ContactNym,
  &_swigt__p_OTDB__Displayable,
  &_swigt__p_OTDB__LoomServer,
  &_swigt__p_OTDB__MarketData,
  &_swigt__p_OTDB__MarketList,
  &_swigt__p_OTDB__OTDBString,
  &_swigt__p_OTDB__OfferDataMarket,
  &_swigt__p_OTDB__OfferDataNym,
  &_swigt__p_OTDB__OfferListMarket,
  &_swigt__p_OTDB__OfferListNym,
  &_swigt__p_OTDB__RippleServer,
  &_swigt__p_OTDB__Server,
  &_swigt__p_OTDB__ServerInfo,
  &_swigt__p_OTDB__Storable,
  &_swigt__p_OTDB__Storage,
  &_swigt__p_OTDB__StringMap,
  &_swigt__p_OTDB__TradeDataMarket,
  &_swigt__p_OTDB__TradeDataNym,
  &_swigt__p_OTDB__TradeListMarket,
  &_swigt__p_OTDB__TradeListNym,
  &_swigt__p_OTDB__WalletData,
  &_swigt__p_OTPacker,
  &_swigt__p_OTPassword,
  &_swigt__p_char,
  &_swigt__p_int32_t,
  &_swigt__p_p_void,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_uint32_t,
  &_swigt__p_uint8_t,
  &_swigt__p_void,
};

static swig_cast_info _swigc__int[] = {  {&_swigt__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTCallback[] = {  {&_swigt__p_OTCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTCaller[] = {  {&_swigt__p_OTCaller, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__Acct[] = {  {&_swigt__p_OTDB__BitcoinAcct, _p_OTDB__BitcoinAcctTo_p_OTDB__Acct, 0, 0},  {&_swigt__p_OTDB__Acct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__AddressBook[] = {  {&_swigt__p_OTDB__AddressBook, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__AskData[] = {  {&_swigt__p_OTDB__AskData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__BidData[] = {  {&_swigt__p_OTDB__BidData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__BitcoinAcct[] = {  {&_swigt__p_OTDB__BitcoinAcct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__BitcoinServer[] = {  {&_swigt__p_OTDB__BitcoinServer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__Blob[] = {  {&_swigt__p_OTDB__Blob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__Contact[] = {  {&_swigt__p_OTDB__Contact, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__ContactAcct[] = {  {&_swigt__p_OTDB__ContactAcct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__ContactNym[] = {  {&_swigt__p_OTDB__ContactNym, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__Displayable[] = {  {&_swigt__p_OTDB__ContactNym, _p_OTDB__ContactNymTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__LoomServer, _p_OTDB__LoomServerTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__RippleServer, _p_OTDB__RippleServerTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__Server, _p_OTDB__ServerTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__TradeDataMarket, _p_OTDB__TradeDataMarketTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__OfferDataMarket, _p_OTDB__OfferDataMarketTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__BitcoinServer, _p_OTDB__BitcoinServerTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__ContactAcct, _p_OTDB__ContactAcctTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__Displayable, 0, 0, 0},  {&_swigt__p_OTDB__BitcoinAcct, _p_OTDB__BitcoinAcctTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__MarketData, _p_OTDB__MarketDataTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__ServerInfo, _p_OTDB__ServerInfoTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__Contact, _p_OTDB__ContactTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__BidData, _p_OTDB__BidDataTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__AskData, _p_OTDB__AskDataTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__Acct, _p_OTDB__AcctTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__TradeDataNym, _p_OTDB__TradeDataNymTo_p_OTDB__Displayable, 0, 0},  {&_swigt__p_OTDB__OfferDataNym, _p_OTDB__OfferDataNymTo_p_OTDB__Displayable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__LoomServer[] = {  {&_swigt__p_OTDB__LoomServer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__MarketData[] = {  {&_swigt__p_OTDB__MarketData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__MarketList[] = {  {&_swigt__p_OTDB__MarketList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__OTDBString[] = {  {&_swigt__p_OTDB__OTDBString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__OfferDataMarket[] = {  {&_swigt__p_OTDB__AskData, _p_OTDB__AskDataTo_p_OTDB__OfferDataMarket, 0, 0},  {&_swigt__p_OTDB__OfferDataMarket, 0, 0, 0},  {&_swigt__p_OTDB__BidData, _p_OTDB__BidDataTo_p_OTDB__OfferDataMarket, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__OfferDataNym[] = {  {&_swigt__p_OTDB__OfferDataNym, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__OfferListMarket[] = {  {&_swigt__p_OTDB__OfferListMarket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__OfferListNym[] = {  {&_swigt__p_OTDB__OfferListNym, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__RippleServer[] = {  {&_swigt__p_OTDB__RippleServer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__Server[] = {  {&_swigt__p_OTDB__BitcoinServer, _p_OTDB__BitcoinServerTo_p_OTDB__Server, 0, 0},  {&_swigt__p_OTDB__Server, 0, 0, 0},  {&_swigt__p_OTDB__RippleServer, _p_OTDB__RippleServerTo_p_OTDB__Server, 0, 0},  {&_swigt__p_OTDB__LoomServer, _p_OTDB__LoomServerTo_p_OTDB__Server, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__ServerInfo[] = {  {&_swigt__p_OTDB__BitcoinServer, _p_OTDB__BitcoinServerTo_p_OTDB__ServerInfo, 0, 0},  {&_swigt__p_OTDB__Server, _p_OTDB__ServerTo_p_OTDB__ServerInfo, 0, 0},  {&_swigt__p_OTDB__RippleServer, _p_OTDB__RippleServerTo_p_OTDB__ServerInfo, 0, 0},  {&_swigt__p_OTDB__LoomServer, _p_OTDB__LoomServerTo_p_OTDB__ServerInfo, 0, 0},  {&_swigt__p_OTDB__ServerInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__Storable[] = {  {&_swigt__p_OTDB__MarketList, _p_OTDB__MarketListTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__ContactNym, _p_OTDB__ContactNymTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__LoomServer, _p_OTDB__LoomServerTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__RippleServer, _p_OTDB__RippleServerTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__Server, _p_OTDB__ServerTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__OfferListNym, _p_OTDB__OfferListNymTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__TradeListNym, _p_OTDB__TradeListNymTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__TradeDataMarket, _p_OTDB__TradeDataMarketTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__OfferDataMarket, _p_OTDB__OfferDataMarketTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__Blob, _p_OTDB__BlobTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__StringMap, _p_OTDB__StringMapTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__BitcoinServer, _p_OTDB__BitcoinServerTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__OfferListMarket, _p_OTDB__OfferListMarketTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__TradeListMarket, _p_OTDB__TradeListMarketTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__Displayable, _p_OTDB__DisplayableTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__ContactAcct, _p_OTDB__ContactAcctTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__WalletData, _p_OTDB__WalletDataTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__Storable, 0, 0, 0},  {&_swigt__p_OTDB__BitcoinAcct, _p_OTDB__BitcoinAcctTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__OTDBString, _p_OTDB__OTDBStringTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__MarketData, _p_OTDB__MarketDataTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__ServerInfo, _p_OTDB__ServerInfoTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__Contact, _p_OTDB__ContactTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__AddressBook, _p_OTDB__AddressBookTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__BidData, _p_OTDB__BidDataTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__AskData, _p_OTDB__AskDataTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__Acct, _p_OTDB__AcctTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__TradeDataNym, _p_OTDB__TradeDataNymTo_p_OTDB__Storable, 0, 0},  {&_swigt__p_OTDB__OfferDataNym, _p_OTDB__OfferDataNymTo_p_OTDB__Storable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__Storage[] = {  {&_swigt__p_OTDB__Storage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__StringMap[] = {  {&_swigt__p_OTDB__StringMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__TradeDataMarket[] = {  {&_swigt__p_OTDB__TradeDataMarket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__TradeDataNym[] = {  {&_swigt__p_OTDB__TradeDataNym, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__TradeListMarket[] = {  {&_swigt__p_OTDB__TradeListMarket, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__TradeListNym[] = {  {&_swigt__p_OTDB__TradeListNym, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTDB__WalletData[] = {  {&_swigt__p_OTDB__WalletData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTPacker[] = {  {&_swigt__p_OTPacker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OTPassword[] = {  {&_swigt__p_OTPassword, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__int,
  _swigc__p_OTCallback,
  _swigc__p_OTCaller,
  _swigc__p_OTDB__Acct,
  _swigc__p_OTDB__AddressBook,
  _swigc__p_OTDB__AskData,
  _swigc__p_OTDB__BidData,
  _swigc__p_OTDB__BitcoinAcct,
  _swigc__p_OTDB__BitcoinServer,
  _swigc__p_OTDB__Blob,
  _swigc__p_OTDB__Contact,
  _swigc__p_OTDB__ContactAcct,
  _swigc__p_OTDB__ContactNym,
  _swigc__p_OTDB__Displayable,
  _swigc__p_OTDB__LoomServer,
  _swigc__p_OTDB__MarketData,
  _swigc__p_OTDB__MarketList,
  _swigc__p_OTDB__OTDBString,
  _swigc__p_OTDB__OfferDataMarket,
  _swigc__p_OTDB__OfferDataNym,
  _swigc__p_OTDB__OfferListMarket,
  _swigc__p_OTDB__OfferListNym,
  _swigc__p_OTDB__RippleServer,
  _swigc__p_OTDB__Server,
  _swigc__p_OTDB__ServerInfo,
  _swigc__p_OTDB__Storable,
  _swigc__p_OTDB__Storage,
  _swigc__p_OTDB__StringMap,
  _swigc__p_OTDB__TradeDataMarket,
  _swigc__p_OTDB__TradeDataNym,
  _swigc__p_OTDB__TradeListMarket,
  _swigc__p_OTDB__TradeListNym,
  _swigc__p_OTDB__WalletData,
  _swigc__p_OTPacker,
  _swigc__p_OTPassword,
  _swigc__p_char,
  _swigc__p_int32_t,
  _swigc__p_p_void,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_uint32_t,
  _swigc__p_uint8_t,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* end header section */

#include "OTAPI-php.h"

SwigDirector_OTCallback::SwigDirector_OTCallback(zval *self TSRMLS_DC): OTCallback(), Swig::Director(self TSRMLS_CC) {
  
}



SwigDirector_OTCallback::~SwigDirector_OTCallback() {
}

void SwigDirector_OTCallback::runOne(char const *szDisplay, OTPassword &theOutput) {
  TSRMLS_FETCH_FROM_CTX(swig_zts_ctx);
  zval *args[2];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"runOne", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }
  
  zval obj0;
  args[0] = &obj0;
  INIT_ZVAL(obj0);
  
  SWIG_SetPointerZval(&obj0, (void *)&szDisplay, SWIGTYPE_p_char, (0)|2);
  
  zval obj1;
  args[1] = &obj1;
  INIT_ZVAL(obj1);
  
  SWIG_SetPointerZval(&obj1, (void *)&theOutput, SWIGTYPE_p_OTPassword, (0)|2);
  
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 2, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  SWIG_FAIL();
}


void SwigDirector_OTCallback::runTwo(char const *szDisplay, OTPassword &theOutput) {
  TSRMLS_FETCH_FROM_CTX(swig_zts_ctx);
  zval *args[2];
  zval *result, funcname;
  MAKE_STD_ZVAL(result);
  ZVAL_STRING(&funcname, (char *)"runTwo", 0);
  if (!swig_self) {
    SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  }
  
  zval obj0;
  args[0] = &obj0;
  INIT_ZVAL(obj0);
  
  SWIG_SetPointerZval(&obj0, (void *)&szDisplay, SWIGTYPE_p_char, (0)|2);
  
  zval obj1;
  args[1] = &obj1;
  INIT_ZVAL(obj1);
  
  SWIG_SetPointerZval(&obj1, (void *)&theOutput, SWIGTYPE_p_OTPassword, (0)|2);
  
  call_user_function(EG(function_table), (zval**)&swig_self, &funcname,
    result, 2, args TSRMLS_CC);
  FREE_ZVAL(result);
  return;
fail:
  SWIG_FAIL();
}


/* vdecl subsection */
static int le_swig__p_std__vectorT_unsigned_char_t=0; /* handle for _p_std__vectorT_unsigned_char_t */
static int le_swig__p_OTDB__Storage=0; /* handle for Storage */
static int le_swig__p_OTDB__BitcoinAcct=0; /* handle for BitcoinAcct */
static int le_swig__p_OTDB__BidData=0; /* handle for BidData */
static int le_swig__p_OTPassword=0; /* handle for OTPassword */
static int le_swig__p_OTDB__Blob=0; /* handle for Blob */
static int le_swig__p_OTDB__TradeListNym=0; /* handle for TradeListNym */
static int le_swig__p_OTDB__OfferListNym=0; /* handle for OfferListNym */
static int le_swig__p_OTDB__ContactAcct=0; /* handle for ContactAcct */
static int le_swig__p_char=0; /* handle for _p_char */
static int le_swig__p_OTDB__TradeListMarket=0; /* handle for TradeListMarket */
static int le_swig__p_OTDB__OfferListMarket=0; /* handle for OfferListMarket */
static int le_swig__p_uint8_t=0; /* handle for _p_uint8_t */
static int le_swig__p_OTDB__WalletData=0; /* handle for WalletData */
static int le_swig__p_void=0; /* handle for _p_void */
static int le_swig__p_p_void=0; /* handle for _p_p_void */
static int le_swig__p_OTDB__StringMap=0; /* handle for StringMap */
static int le_swig__int=0; /* handle for _int */
static int le_swig__p_OTDB__BitcoinServer=0; /* handle for BitcoinServer */
static int le_swig__p_OTDB__Displayable=0; /* handle for Displayable */
static int le_swig__p_OTPacker=0; /* handle for _p_OTPacker */
static int le_swig__p_OTDB__AskData=0; /* handle for AskData */
static int le_swig__p_OTDB__OTDBString=0; /* handle for OTDBString */
static int le_swig__p_OTDB__TradeDataMarket=0; /* handle for TradeDataMarket */
static int le_swig__p_OTDB__OfferDataMarket=0; /* handle for OfferDataMarket */
static int le_swig__p_OTDB__Acct=0; /* handle for Acct */
static int le_swig__p_OTDB__ContactNym=0; /* handle for ContactNym */
static int le_swig__p_OTDB__ServerInfo=0; /* handle for ServerInfo */
static int le_swig__p_OTDB__Contact=0; /* handle for Contact */
static int le_swig__p_OTCaller=0; /* handle for OTCaller */
static int le_swig__p_OTDB__Server=0; /* handle for Server */
static int le_swig__p_OTDB__RippleServer=0; /* handle for RippleServer */
static int le_swig__p_OTDB__LoomServer=0; /* handle for LoomServer */
static int le_swig__p_OTDB__Storable=0; /* handle for Storable */
static int le_swig__p_OTDB__AddressBook=0; /* handle for AddressBook */
static int le_swig__p_OTCallback=0; /* handle for OTCallback */
static int le_swig__p_uint32_t=0; /* handle for _p_uint32_t */
static int le_swig__p_int32_t=0; /* handle for _p_int32_t */
static int le_swig__p_OTDB__TradeDataNym=0; /* handle for TradeDataNym */
static int le_swig__p_OTDB__OfferDataNym=0; /* handle for OfferDataNym */
static int le_swig__p_OTDB__MarketData=0; /* handle for MarketData */
static int le_swig__p_std__mapT_std__string_std__string_t=0; /* handle for _p_std__mapT_std__string_std__string_t */
static int le_swig__p_OTDB__MarketList=0; /* handle for MarketList */
/* end vdecl subsection */
/* wrapper section */
ZEND_NAMED_FUNCTION(_wrap_OTPassword_m_theBlockSize_get) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  OTPassword::BlockSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_m_theBlockSize_get. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OTPassword::BlockSize)(OTPassword::BlockSize) ((arg1)->m_theBlockSize);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_isPassword) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_isPassword. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OTPassword const *)arg1)->isPassword();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_getPassword_uint8) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  uint8_t *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_getPassword_uint8. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t *)((OTPassword const *)arg1)->getPassword_uint8();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_uint8_t, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_getPassword) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_getPassword. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char *)((OTPassword const *)arg1)->getPassword();
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_getPasswordWritable) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  uint8_t *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_getPasswordWritable. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t *)(arg1)->getPasswordWritable();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_uint8_t, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_getPasswordWritable_char) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_getPasswordWritable_char. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char *)(arg1)->getPasswordWritable_char();
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_setPassword) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_setPassword. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (int)(arg1)->setPassword((char const *)arg2,arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_setPassword_uint8) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  uint32_t *tmp3 ;
  zval **args[3];
  int32_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_setPassword_uint8. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_setPassword_uint8. Expected SWIGTYPE_p_uint8_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_uint32_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OTPassword_setPassword_uint8. Expected SWIGTYPE_p_uint32_t");
    }
    arg3 = *tmp3;
  }
  result = (arg1)->setPassword_uint8((uint8_t const *)arg2,arg3);
  {
    int32_t * resultobj = new int32_t((const int32_t &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_int32_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_addChar) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t arg2 ;
  uint8_t *tmp2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_addChar. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint8_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_addChar. Expected SWIGTYPE_p_uint8_t");
    }
    arg2 = *tmp2;
  }
  result = (bool)(arg1)->addChar(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_randomizePassword__SWIG_0) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t arg2 ;
  uint32_t *tmp2 ;
  zval **args[2];
  int32_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_randomizePassword. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_randomizePassword. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  result = (arg1)->randomizePassword(arg2);
  {
    int32_t * resultobj = new int32_t((const int32_t &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_int32_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_randomizePassword__SWIG_1) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  int32_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_randomizePassword. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->randomizePassword();
  {
    int32_t * resultobj = new int32_t((const int32_t &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_int32_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_randomizePassword_uint8) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  uint32_t *tmp2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_randomizePassword_uint8. Expected SWIGTYPE_p_uint8_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_randomizePassword_uint8. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  result = (bool)OTPassword::randomizePassword_uint8(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_randomizePassword__SWIG_2) {
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  uint32_t *tmp2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_randomizePassword. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  result = (bool)OTPassword::randomizePassword(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_randomizePassword) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTPassword, 0) >= 0);
    }
    if (_v) {
      _wrap_OTPassword_randomizePassword__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTPassword, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _wrap_OTPassword_randomizePassword__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_STRING); 
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _wrap_OTPassword_randomizePassword__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OTPassword_randomizePassword'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_isMemory) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_isMemory. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OTPassword const *)arg1)->isMemory();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_getMemory) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  void *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_getMemory. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (void *)((OTPassword const *)arg1)->getMemory();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_void, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_getMemory_uint8) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  uint8_t *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_getMemory_uint8. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (uint8_t *)((OTPassword const *)arg1)->getMemory_uint8();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_uint8_t, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_getMemoryWritable) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  void *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_getMemoryWritable. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (void *)(arg1)->getMemoryWritable();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_void, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_setMemory) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  uint32_t *tmp3 ;
  zval **args[3];
  int32_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_setMemory. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[1])->type==IS_NULL) arg2=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_setMemory. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_uint32_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OTPassword_setMemory. Expected SWIGTYPE_p_uint32_t");
    }
    arg3 = *tmp3;
  }
  result = (arg1)->setMemory((void const *)arg2,arg3);
  {
    int32_t * resultobj = new int32_t((const int32_t &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_int32_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_addMemory) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  uint32_t *tmp3 ;
  zval **args[3];
  int32_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_addMemory. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[1])->type==IS_NULL) arg2=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_addMemory. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_uint32_t, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OTPassword_addMemory. Expected SWIGTYPE_p_uint32_t");
    }
    arg3 = *tmp3;
  }
  result = (arg1)->addMemory((void const *)arg2,arg3);
  {
    int32_t * resultobj = new int32_t((const int32_t &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_int32_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_randomizeMemory__SWIG_0) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t arg2 ;
  uint32_t *tmp2 ;
  zval **args[2];
  int32_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_randomizeMemory. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_randomizeMemory. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  result = (arg1)->randomizeMemory(arg2);
  {
    int32_t * resultobj = new int32_t((const int32_t &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_int32_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_randomizeMemory__SWIG_1) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  int32_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_randomizeMemory. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->randomizeMemory();
  {
    int32_t * resultobj = new int32_t((const int32_t &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_int32_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_randomizeMemory_uint8) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  uint32_t *tmp2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_randomizeMemory_uint8. Expected SWIGTYPE_p_uint8_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_randomizeMemory_uint8. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  result = (bool)OTPassword::randomizeMemory_uint8(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_randomizeMemory__SWIG_2) {
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  uint32_t *tmp2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[0])->type==IS_NULL) arg1=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_randomizeMemory. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_randomizeMemory. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  result = (bool)OTPassword::randomizeMemory(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_randomizeMemory) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTPassword, 0) >= 0);
    }
    if (_v) {
      _wrap_OTPassword_randomizeMemory__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTPassword, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _wrap_OTPassword_randomizeMemory__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, 0, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _wrap_OTPassword_randomizeMemory__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OTPassword_randomizeMemory'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_getBlockSize) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  uint32_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_getBlockSize. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OTPassword const *)arg1)->getBlockSize();
  {
    uint32_t * resultobj = new uint32_t((const uint32_t &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_uint32_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_Compare) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  OTPassword *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_Compare. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTPassword, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_Compare. Expected SWIGTYPE_p_OTPassword");
    }
  }
  result = (bool)((OTPassword const *)arg1)->Compare(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_getPasswordSize) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  uint32_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_getPasswordSize. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OTPassword const *)arg1)->getPasswordSize();
  {
    uint32_t * resultobj = new uint32_t((const uint32_t &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_uint32_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_getMemorySize) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  uint32_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_getMemorySize. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((OTPassword const *)arg1)->getMemorySize();
  {
    uint32_t * resultobj = new uint32_t((const uint32_t &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_uint32_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_zeroMemory__SWIG_0) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_zeroMemory. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->zeroMemory();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_zeroMemory__SWIG_1) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  uint32_t *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_zeroMemory. Expected SWIGTYPE_p_uint8_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_zeroMemory. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  OTPassword::zeroMemory(arg1,arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_zeroMemory__SWIG_2) {
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  uint32_t *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[0])->type==IS_NULL) arg1=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_zeroMemory. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_zeroMemory. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  OTPassword::zeroMemory(arg1,arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_zeroMemory) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTPassword, 0) >= 0);
    }
    if (_v) {
      _wrap_OTPassword_zeroMemory__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_uint8_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _wrap_OTPassword_zeroMemory__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, 0, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _wrap_OTPassword_zeroMemory__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OTPassword_zeroMemory'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_safe_memcpy__SWIG_0) {
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  void *arg3 = (void *) 0 ;
  uint32_t arg4 ;
  bool arg5 ;
  uint32_t *tmp2 ;
  uint32_t *tmp4 ;
  zval **args[5];
  void *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[0])->type==IS_NULL) arg1=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_safe_memcpy. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_safe_memcpy. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[2])->type==IS_NULL) arg3=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OTPassword_safe_memcpy. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_uint32_t, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OTPassword_safe_memcpy. Expected SWIGTYPE_p_uint32_t");
    }
    arg4 = *tmp4;
  }
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[4]);
  arg5 = (bool) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  result = (void *)OTPassword::safe_memcpy(arg1,arg2,(void const *)arg3,arg4,arg5);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_void, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_safe_memcpy__SWIG_1) {
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  void *arg3 = (void *) 0 ;
  uint32_t arg4 ;
  uint32_t *tmp2 ;
  uint32_t *tmp4 ;
  zval **args[4];
  void *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[0])->type==IS_NULL) arg1=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTPassword_safe_memcpy. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTPassword_safe_memcpy. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[2])->type==IS_NULL) arg3=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OTPassword_safe_memcpy. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_uint32_t, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of OTPassword_safe_memcpy. Expected SWIGTYPE_p_uint32_t");
    }
    arg4 = *tmp4;
  }
  result = (void *)OTPassword::safe_memcpy(arg1,arg2,(void const *)arg3,arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_void, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_safe_memcpy) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, 0, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, 0, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
          }
          if (_v) {
            _wrap_OTPassword_safe_memcpy__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, 0, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, 0, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
          }
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_BOOL); 
            if (_v) {
              _wrap_OTPassword_safe_memcpy__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'OTPassword_safe_memcpy'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTPassword_CreateTextBuffer) {
  OTPassword *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (OTPassword *)OTPassword::CreateTextBuffer();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPassword, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTPassword__SWIG_0) {
  OTPassword::BlockSize arg1 ;
  zval **args[1];
  OTPassword *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTPassword::BlockSize) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (OTPassword *)new OTPassword(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPassword, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTPassword__SWIG_1) {
  OTPassword *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (OTPassword *)new OTPassword();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPassword, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTPassword__SWIG_2) {
  OTPassword *arg1 = 0 ;
  zval **args[1];
  OTPassword *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTPassword, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OTPassword. Expected SWIGTYPE_p_OTPassword");
    }
  }
  result = (OTPassword *)new OTPassword((OTPassword const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPassword, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTPassword__SWIG_3) {
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  OTPassword::BlockSize arg3 ;
  uint32_t *tmp2 ;
  zval **args[3];
  OTPassword *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OTPassword. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (OTPassword::BlockSize) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (OTPassword *)new OTPassword((char const *)arg1,arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPassword, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTPassword__SWIG_4) {
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  uint32_t *tmp2 ;
  zval **args[2];
  OTPassword *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OTPassword. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  result = (OTPassword *)new OTPassword((char const *)arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPassword, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTPassword__SWIG_5) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  OTPassword::BlockSize arg3 ;
  uint32_t *tmp2 ;
  zval **args[3];
  OTPassword *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OTPassword. Expected SWIGTYPE_p_uint8_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OTPassword. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (OTPassword::BlockSize) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (OTPassword *)new OTPassword((uint8_t const *)arg1,arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPassword, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTPassword__SWIG_6) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  uint32_t *tmp2 ;
  zval **args[2];
  OTPassword *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_uint8_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OTPassword. Expected SWIGTYPE_p_uint8_t");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OTPassword. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  result = (OTPassword *)new OTPassword((uint8_t const *)arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPassword, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTPassword__SWIG_7) {
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  OTPassword::BlockSize arg3 ;
  uint32_t *tmp2 ;
  zval **args[3];
  OTPassword *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[0])->type==IS_NULL) arg1=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OTPassword. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OTPassword. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (OTPassword::BlockSize) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (OTPassword *)new OTPassword((void const *)arg1,arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPassword, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTPassword__SWIG_8) {
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  uint32_t *tmp2 ;
  zval **args[2];
  OTPassword *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, 0, 0) < 0) {
      /* Allow NULL from php for void* */
      if ((*args[0])->type==IS_NULL) arg1=0;
      else
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_OTPassword. Expected SWIGTYPE_p_p_void");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_uint32_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_OTPassword. Expected SWIGTYPE_p_uint32_t");
    }
    arg2 = *tmp2;
  }
  result = (OTPassword *)new OTPassword((void const *)arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPassword, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTPassword) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_OTPassword__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTPassword, 0) >= 0);
    }
    if (_v) {
      _wrap_new_OTPassword__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_new_OTPassword__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_uint8_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _wrap_new_OTPassword__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, 0, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _wrap_new_OTPassword__SWIG_8(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_STRING); 
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _wrap_new_OTPassword__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_uint8_t, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_new_OTPassword__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, 0, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_new_OTPassword__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_STRING); 
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_uint32_t, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_new_OTPassword__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_OTPassword'";
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_OTPassword(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTPassword *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTPassword TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTPassword resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTCallback) {
  zval *arg0;
  zval **args[1];
  OTCallback *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  arg0 = *args[0];
  
  if ( arg0->type == IS_NULL ) {
    /* not subclassed */
    result = (OTCallback *)new OTCallback();
  } else {
    result = (OTCallback *)new SwigDirector_OTCallback(arg0 TSRMLS_CC);
  }
  
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTCallback, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_OTCallback(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTCallback *arg1 = (OTCallback *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTCallback *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTCallback TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTCallback resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTCallback_runOne) {
  OTCallback *arg1 = (OTCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  OTPassword *arg3 = 0 ;
  zval **args[3];
  Swig::Director *director = 0;
  bool upcall = false;
  
  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"OTCallback", (char *)"runOne");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCallback, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTCallback_runOne. Expected SWIGTYPE_p_OTCallback");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OTPassword, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OTCallback_runOne. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if (upcall) {
    (arg1)->OTCallback::runOne((char const *)arg2,*arg3);
  } else {
    (arg1)->runOne((char const *)arg2,*arg3);
  }
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTCallback_runTwo) {
  OTCallback *arg1 = (OTCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  OTPassword *arg3 = 0 ;
  zval **args[3];
  Swig::Director *director = 0;
  bool upcall = false;
  
  director = dynamic_cast<Swig::Director*>(arg1);
  upcall = !director->swig_is_overridden_method((char *)"OTCallback", (char *)"runTwo");
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCallback, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTCallback_runTwo. Expected SWIGTYPE_p_OTCallback");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_OTPassword, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of OTCallback_runTwo. Expected SWIGTYPE_p_OTPassword");
    }
  }
  if (upcall) {
    (arg1)->OTCallback::runTwo((char const *)arg2,*arg3);
  } else {
    (arg1)->runTwo((char const *)arg2,*arg3);
  }
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_OTCaller) {
  OTCaller *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (OTCaller *)new OTCaller();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTCaller, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_OTCaller(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTCaller *arg1 = (OTCaller *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTCaller *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTCaller TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTCaller resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTCaller_GetPassword) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  OTPassword *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCaller, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTCaller_GetPassword. Expected SWIGTYPE_p_OTCaller");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTPassword, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTCaller_GetPassword. Expected SWIGTYPE_p_OTPassword");
    }
  }
  result = (bool)((OTCaller const *)arg1)->GetPassword(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTCaller_ZeroOutPassword) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCaller, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTCaller_ZeroOutPassword. Expected SWIGTYPE_p_OTCaller");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->ZeroOutPassword();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTCaller_GetDisplay) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCaller, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTCaller_GetDisplay. Expected SWIGTYPE_p_OTCaller");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (char *)((OTCaller const *)arg1)->GetDisplay();
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTCaller_SetDisplay) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCaller, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTCaller_SetDisplay. Expected SWIGTYPE_p_OTCaller");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->SetDisplay((char const *)arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTCaller_delCallback) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCaller, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTCaller_delCallback. Expected SWIGTYPE_p_OTCaller");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->delCallback();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTCaller_setCallback) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  OTCallback *arg2 = (OTCallback *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCaller, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTCaller_setCallback. Expected SWIGTYPE_p_OTCaller");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTCallback, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OTCaller_setCallback. Expected SWIGTYPE_p_OTCallback");
    }
  }
  (arg1)->setCallback(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTCaller_isCallbackSet) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCaller, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTCaller_isCallbackSet. Expected SWIGTYPE_p_OTCaller");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((OTCaller const *)arg1)->isCallbackSet();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTCaller_callOne) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCaller, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTCaller_callOne. Expected SWIGTYPE_p_OTCaller");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->callOne();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTCaller_callTwo) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCaller, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTCaller_callTwo. Expected SWIGTYPE_p_OTCaller");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->callTwo();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Set_PasswordCallback) {
  OTCaller *arg1 = 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTCaller, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OT_API_Set_PasswordCallback. Expected SWIGTYPE_p_OTCaller");
    }
  }
  result = (bool)OT_API_Set_PasswordCallback(*arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Init) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_Init();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Cleanup) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_Cleanup();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SetWallet) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_SetWallet((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadWallet) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_LoadWallet();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SwitchWallet) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_SwitchWallet();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Output) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  OT_API_Output(arg1,(char const *)arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetTime) {
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (char *)OT_API_GetTime();
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_NumList_Add) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_NumList_Add((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_NumList_Remove) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_NumList_Remove((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_NumList_VerifyQuery) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_NumList_VerifyQuery((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_NumList_VerifyAll) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_NumList_VerifyAll((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_NumList_Count) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_NumList_Count((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Encode) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_Encode((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Decode) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_Decode((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Encrypt) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Encrypt((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Decrypt) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Decrypt((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_CreateSymmetricKey) {
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (char *)OT_API_CreateSymmetricKey();
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SymmetricEncrypt) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SymmetricEncrypt((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SymmetricDecrypt) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SymmetricDecrypt((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SignContract) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SignContract((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_FlatSign) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_FlatSign((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_AddSignature) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_AddSignature((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_VerifySignature) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_VerifySignature((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_VerifyAndRetrieveXMLContents) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_VerifyAndRetrieveXMLContents((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetMemlogSize) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_GetMemlogSize();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetMemlogAtIndex) {
  int arg1 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetMemlogAtIndex(arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_PeekMemlogFront) {
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (char *)OT_API_PeekMemlogFront();
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_PeekMemlogBack) {
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (char *)OT_API_PeekMemlogBack();
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_PopMemlogFront) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_PopMemlogFront();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_PopMemlogBack) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_PopMemlogBack();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_CreateNym) {
  int arg1 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_CreateNym(arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_CreateServerContract) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_CreateServerContract((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_CreateAssetContract) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_CreateAssetContract((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_AddServerContract) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_AddServerContract((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_AddAssetContract) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_AddAssetContract((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetServerCount) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_GetServerCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAssetTypeCount) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_GetAssetTypeCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAccountCount) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_GetAccountCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNymCount) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_GetNymCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetServer_ID) {
  int arg1 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetServer_ID(arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetServer_Name) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetServer_Name((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetServer_Contract) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetServer_Contract((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAssetType_ID) {
  int arg1 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAssetType_ID(arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAssetType_Name) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAssetType_Name((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAssetType_Contract) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAssetType_Contract((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_FormatAmount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_FormatAmount((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAccountWallet_ID) {
  int arg1 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAccountWallet_ID(arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAccountWallet_Name) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAccountWallet_Name((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAccountWallet_Balance) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAccountWallet_Balance((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAccountWallet_Type) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAccountWallet_Type((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAccountWallet_AssetTypeID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAccountWallet_AssetTypeID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAccountWallet_ServerID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAccountWallet_ServerID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAccountWallet_NymID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAccountWallet_NymID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAccountWallet_InboxHash) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAccountWallet_InboxHash((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetAccountWallet_OutboxHash) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetAccountWallet_OutboxHash((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_VerifyAccountReceipt) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_VerifyAccountReceipt((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_TransactionNumCount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_GetNym_TransactionNumCount((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_ID) {
  int arg1 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_ID(arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_Name) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_Name((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_Stats) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_Stats((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_NymboxHash) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_NymboxHash((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_RecentHash) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_RecentHash((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_InboxHash) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_InboxHash((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_OutboxHash) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_OutboxHash((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_IsNym_RegisteredAtServer) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_IsNym_RegisteredAtServer((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_MailCount) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_GetNym_MailCount((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_MailContentsByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_MailContentsByIndex((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_MailSenderIDByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_MailSenderIDByIndex((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_MailServerIDByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_MailServerIDByIndex((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Nym_RemoveMailByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)OT_API_Nym_RemoveMailByIndex((char const *)arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Nym_VerifyMailByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)OT_API_Nym_VerifyMailByIndex((char const *)arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_OutmailCount) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_GetNym_OutmailCount((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_OutmailContentsByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_OutmailContentsByIndex((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_OutmailRecipientIDByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_OutmailRecipientIDByIndex((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_OutmailServerIDByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_OutmailServerIDByIndex((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Nym_RemoveOutmailByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)OT_API_Nym_RemoveOutmailByIndex((char const *)arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Nym_VerifyOutmailByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)OT_API_Nym_VerifyOutmailByIndex((char const *)arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_OutpaymentsCount) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_GetNym_OutpaymentsCount((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_OutpaymentsContentsByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_OutpaymentsContentsByIndex((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_OutpaymentsRecipientIDByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_OutpaymentsRecipientIDByIndex((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetNym_OutpaymentsServerIDByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetNym_OutpaymentsServerIDByIndex((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Nym_RemoveOutpaymentsByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)OT_API_Nym_RemoveOutpaymentsByIndex((char const *)arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Nym_VerifyOutpaymentsByIndex) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)OT_API_Nym_VerifyOutpaymentsByIndex((char const *)arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_CanRemoveServer) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Wallet_CanRemoveServer((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_RemoveServer) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Wallet_RemoveServer((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_CanRemoveAssetType) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Wallet_CanRemoveAssetType((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_RemoveAssetType) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Wallet_RemoveAssetType((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_CanRemoveNym) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Wallet_CanRemoveNym((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_RemoveNym) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Wallet_RemoveNym((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_CanRemoveAccount) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Wallet_CanRemoveAccount((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_ChangePassphrase) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_Wallet_ChangePassphrase();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_ExportNym) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Wallet_ExportNym((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_ImportNym) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Wallet_ImportNym((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_ImportCert) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Wallet_ImportCert((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_ExportCert) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Wallet_ExportCert((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_GetNymIDFromPartial) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Wallet_GetNymIDFromPartial((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_GetServerIDFromPartial) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Wallet_GetServerIDFromPartial((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_GetAssetIDFromPartial) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Wallet_GetAssetIDFromPartial((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_GetAccountIDFromPartial) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Wallet_GetAccountIDFromPartial((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SetNym_Name) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_SetNym_Name((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SetAccountWallet_Name) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_SetAccountWallet_Name((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SetAssetType_Name) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_SetAssetType_Name((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SetServer_Name) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_SetServer_Name((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_WriteCheque) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  zval **args[8];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 8 || zend_get_parameters_array_ex(8, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[5])->type==IS_NULL) {
    arg6 = (char *) 0;
  } else {
    convert_to_string_ex(args[5]);
    arg6 = (char *) Z_STRVAL_PP(args[5]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[6])->type==IS_NULL) {
    arg7 = (char *) 0;
  } else {
    convert_to_string_ex(args[6]);
    arg7 = (char *) Z_STRVAL_PP(args[6]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[7])->type==IS_NULL) {
    arg8 = (char *) 0;
  } else {
    convert_to_string_ex(args[7]);
    arg8 = (char *) Z_STRVAL_PP(args[7]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_WriteCheque((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_DiscardCheque) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_DiscardCheque((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_ProposePaymentPlan) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  char *arg15 = (char *) 0 ;
  zval **args[15];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 15 || zend_get_parameters_array_ex(15, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[5])->type==IS_NULL) {
    arg6 = (char *) 0;
  } else {
    convert_to_string_ex(args[5]);
    arg6 = (char *) Z_STRVAL_PP(args[5]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[6])->type==IS_NULL) {
    arg7 = (char *) 0;
  } else {
    convert_to_string_ex(args[6]);
    arg7 = (char *) Z_STRVAL_PP(args[6]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[7])->type==IS_NULL) {
    arg8 = (char *) 0;
  } else {
    convert_to_string_ex(args[7]);
    arg8 = (char *) Z_STRVAL_PP(args[7]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[8])->type==IS_NULL) {
    arg9 = (char *) 0;
  } else {
    convert_to_string_ex(args[8]);
    arg9 = (char *) Z_STRVAL_PP(args[8]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[9])->type==IS_NULL) {
    arg10 = (char *) 0;
  } else {
    convert_to_string_ex(args[9]);
    arg10 = (char *) Z_STRVAL_PP(args[9]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[10])->type==IS_NULL) {
    arg11 = (char *) 0;
  } else {
    convert_to_string_ex(args[10]);
    arg11 = (char *) Z_STRVAL_PP(args[10]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[11])->type==IS_NULL) {
    arg12 = (char *) 0;
  } else {
    convert_to_string_ex(args[11]);
    arg12 = (char *) Z_STRVAL_PP(args[11]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[12])->type==IS_NULL) {
    arg13 = (char *) 0;
  } else {
    convert_to_string_ex(args[12]);
    arg13 = (char *) Z_STRVAL_PP(args[12]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[13])->type==IS_NULL) {
    arg14 = (char *) 0;
  } else {
    convert_to_string_ex(args[13]);
    arg14 = (char *) Z_STRVAL_PP(args[13]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[14])->type==IS_NULL) {
    arg15 = (char *) 0;
  } else {
    convert_to_string_ex(args[14]);
    arg15 = (char *) Z_STRVAL_PP(args[14]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_ProposePaymentPlan((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14,(char const *)arg15);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_ConfirmPaymentPlan) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_ConfirmPaymentPlan((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Create_SmartContract) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Create_SmartContract((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SmartContract_AddBylaw) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SmartContract_AddBylaw((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SmartContract_AddClause) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SmartContract_AddClause((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SmartContract_AddVariable) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  zval **args[7];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[5])->type==IS_NULL) {
    arg6 = (char *) 0;
  } else {
    convert_to_string_ex(args[5]);
    arg6 = (char *) Z_STRVAL_PP(args[5]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[6])->type==IS_NULL) {
    arg7 = (char *) 0;
  } else {
    convert_to_string_ex(args[6]);
    arg7 = (char *) Z_STRVAL_PP(args[6]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SmartContract_AddVariable((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SmartContract_AddCallback) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SmartContract_AddCallback((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SmartContract_AddHook) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SmartContract_AddHook((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SmartContract_AddParty) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SmartContract_AddParty((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SmartContract_AddAccount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SmartContract_AddAccount((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SmartContract_CountNumsNeeded) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_SmartContract_CountNumsNeeded((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SmartContract_ConfirmAccount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  zval **args[6];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[5])->type==IS_NULL) {
    arg6 = (char *) 0;
  } else {
    convert_to_string_ex(args[5]);
    arg6 = (char *) Z_STRVAL_PP(args[5]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SmartContract_ConfirmAccount((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SmartContract_ConfirmParty) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_SmartContract_ConfirmParty((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_activateSmartContract) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_activateSmartContract((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_triggerClause) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_triggerClause((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Msg_HarvestTransactionNumbers) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  zval **args[7];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (int) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[6]);
  arg7 = (int) Z_LVAL_PP(args[6]);
  /*@SWIG@*/;
  
  result = (int)OT_API_Msg_HarvestTransactionNumbers((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadUserPubkey) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadUserPubkey((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadPubkey) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadPubkey((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_VerifyUserPrivateKey) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_VerifyUserPrivateKey((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadPurse) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadPurse((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadMint) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadMint((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadAssetContract) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadAssetContract((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadServerContract) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadServerContract((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Mint_IsStillGood) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Mint_IsStillGood((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_IsBasketCurrency) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_IsBasketCurrency((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Basket_GetMemberCount) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Basket_GetMemberCount((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Basket_GetMemberType) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_Basket_GetMemberType((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Basket_GetMinimumTransferAmount) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Basket_GetMinimumTransferAmount((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Basket_GetMemberMinimumTransferAmount) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_Basket_GetMemberMinimumTransferAmount((char const *)arg1,arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadAssetAccount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadAssetAccount((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadInbox) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadInbox((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadOutbox) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadOutbox((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadInboxNoVerify) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadInboxNoVerify((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadOutboxNoVerify) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadOutboxNoVerify((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadPaymentInbox) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadPaymentInbox((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadPaymentInboxNoVerify) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadPaymentInboxNoVerify((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadRecordBox) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadRecordBox((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadRecordBoxNoVerify) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadRecordBoxNoVerify((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Ledger_GetCount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Ledger_GetCount((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Ledger_CreateResponse) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Ledger_CreateResponse((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Ledger_GetTransactionByIndex) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_Ledger_GetTransactionByIndex((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Ledger_GetTransactionByID) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Ledger_GetTransactionByID((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Ledger_GetTransactionIDByIndex) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_Ledger_GetTransactionIDByIndex((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Ledger_AddTransaction) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Ledger_AddTransaction((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_CreateResponse) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  zval **args[6];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (int) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_Transaction_CreateResponse((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Ledger_FinalizeResponse) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Ledger_FinalizeResponse((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Ledger_GetInstrument) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_Ledger_GetInstrument((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_GetType) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Transaction_GetType((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_ReplyNotice_GetRequestNum) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_ReplyNotice_GetRequestNum((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_GetVoucher) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Transaction_GetVoucher((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_GetSuccess) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Transaction_GetSuccess((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_GetBalanceAgreementSuccess) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Transaction_GetBalanceAgreementSuccess((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_GetDateSigned) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Transaction_GetDateSigned((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_GetAmount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Transaction_GetAmount((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Pending_GetNote) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Pending_GetNote((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_GetSenderUserID) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Transaction_GetSenderUserID((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_GetSenderAcctID) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Transaction_GetSenderAcctID((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_GetRecipientUserID) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Transaction_GetRecipientUserID((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_GetRecipientAcctID) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Transaction_GetRecipientAcctID((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Transaction_GetDisplayReferenceToNum) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Transaction_GetDisplayReferenceToNum((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_SavePurse) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_SavePurse((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_CreatePurse) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_CreatePurse((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_CreatePurse_Passphrase) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_CreatePurse_Passphrase((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Purse_GetTotalValue) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Purse_GetTotalValue((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Purse_Count) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Purse_Count((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Purse_HasPassword) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Purse_HasPassword((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Purse_Peek) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Purse_Peek((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Purse_Pop) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Purse_Pop((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Purse_Push) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  zval **args[6];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[5])->type==IS_NULL) {
    arg6 = (char *) 0;
  } else {
    convert_to_string_ex(args[5]);
    arg6 = (char *) Z_STRVAL_PP(args[5]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Purse_Push((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Purse_Empty) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Purse_Empty((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Wallet_ImportPurse) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Wallet_ImportPurse((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_exchangePurse) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_exchangePurse((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Token_ChangeOwner) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  zval **args[6];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[5])->type==IS_NULL) {
    arg6 = (char *) 0;
  } else {
    convert_to_string_ex(args[5]);
    arg6 = (char *) Z_STRVAL_PP(args[5]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Token_ChangeOwner((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Token_GetID) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Token_GetID((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Token_GetDenomination) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Token_GetDenomination((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Token_GetSeries) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Token_GetSeries((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Token_GetValidFrom) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Token_GetValidFrom((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Token_GetValidTo) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Token_GetValidTo((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Token_GetAssetID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Token_GetAssetID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Token_GetServerID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Token_GetServerID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetAmount) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetAmount((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetTransNum) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetTransNum((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetValidFrom) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetValidFrom((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetValidTo) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetValidTo((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetMemo) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetMemo((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetType) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetType((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetServerID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetServerID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetAssetID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetAssetID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetSenderUserID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetSenderUserID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetSenderAcctID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetSenderAcctID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetRecipientUserID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetRecipientUserID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Instrmnt_GetRecipientAcctID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Instrmnt_GetRecipientAcctID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_checkServerID) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_checkServerID((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_createUserAccount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_createUserAccount((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_deleteUserAccount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_deleteUserAccount((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_deleteAssetAccount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_deleteAssetAccount((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_usageCredits) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_usageCredits((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetUsageCredits) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Message_GetUsageCredits((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_checkUser) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_checkUser((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_sendUserMessage) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_sendUserMessage((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_sendUserInstrument) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_sendUserInstrument((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getRequest) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getRequest((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getTransactionNumber) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getTransactionNumber((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_issueAssetType) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_issueAssetType((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getContract) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getContract((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getMint) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getMint((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_createAssetAccount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_createAssetAccount((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getAccount) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getAccount((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GenerateBasketCreation) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GenerateBasketCreation((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_AddBasketCreationItem) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_AddBasketCreationItem((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_issueBasket) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_issueBasket((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GenerateBasketExchange) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  result = (char *)OT_API_GenerateBasketExchange((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_AddBasketExchangeItem) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_AddBasketExchangeItem((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_exchangeBasket) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  zval **args[5];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  result = (int)OT_API_exchangeBasket((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_notarizeWithdrawal) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_notarizeWithdrawal((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_notarizeDeposit) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_notarizeDeposit((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_notarizeTransfer) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  zval **args[6];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[5])->type==IS_NULL) {
    arg6 = (char *) 0;
  } else {
    convert_to_string_ex(args[5]);
    arg6 = (char *) Z_STRVAL_PP(args[5]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_notarizeTransfer((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getInbox) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getInbox((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getOutbox) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getOutbox((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getNymbox) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getNymbox((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadNymbox) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadNymbox((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_LoadNymboxNoVerify) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_LoadNymboxNoVerify((char const *)arg1,(char const *)arg2);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Nymbox_GetReplyNotice) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Nymbox_GetReplyNotice((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_HaveAlreadySeenReply) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_HaveAlreadySeenReply((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getBoxReceipt) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getBoxReceipt((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_DoesBoxReceiptExist) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_DoesBoxReceiptExist((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_processInbox) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_processInbox((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_processNymbox) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_processNymbox((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_withdrawVoucher) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  zval **args[6];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[5])->type==IS_NULL) {
    arg6 = (char *) 0;
  } else {
    convert_to_string_ex(args[5]);
    arg6 = (char *) Z_STRVAL_PP(args[5]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_withdrawVoucher((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_payDividend) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  zval **args[6];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[5])->type==IS_NULL) {
    arg6 = (char *) 0;
  } else {
    convert_to_string_ex(args[5]);
    arg6 = (char *) Z_STRVAL_PP(args[5]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_payDividend((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_depositCheque) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_depositCheque((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_depositPaymentPlan) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_depositPaymentPlan((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_issueMarketOffer) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  int arg11 ;
  zval **args[11];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 11 || zend_get_parameters_array_ex(11, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[5])->type==IS_NULL) {
    arg6 = (char *) 0;
  } else {
    convert_to_string_ex(args[5]);
    arg6 = (char *) Z_STRVAL_PP(args[5]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[6])->type==IS_NULL) {
    arg7 = (char *) 0;
  } else {
    convert_to_string_ex(args[6]);
    arg7 = (char *) Z_STRVAL_PP(args[6]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[7])->type==IS_NULL) {
    arg8 = (char *) 0;
  } else {
    convert_to_string_ex(args[7]);
    arg8 = (char *) Z_STRVAL_PP(args[7]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[8])->type==IS_NULL) {
    arg9 = (char *) 0;
  } else {
    convert_to_string_ex(args[8]);
    arg9 = (char *) Z_STRVAL_PP(args[8]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[9])->type==IS_NULL) {
    arg10 = (char *) 0;
  } else {
    convert_to_string_ex(args[9]);
    arg10 = (char *) Z_STRVAL_PP(args[9]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[10]);
  arg11 = (int) Z_LVAL_PP(args[10]);
  /*@SWIG@*/;
  
  result = (int)OT_API_issueMarketOffer((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,arg11);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getMarketList) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getMarketList((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getMarketOffers) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getMarketOffers((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getMarketRecentTrades) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getMarketRecentTrades((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_getNym_MarketOffers) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_getNym_MarketOffers((char const *)arg1,(char const *)arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_cancelMarketOffer) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_cancelMarketOffer((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_cancelPaymentPlan) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_cancelPaymentPlan((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_PopMessageBuffer) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_PopMessageBuffer((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_FlushMessageBuffer) {
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  OT_API_FlushMessageBuffer();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_GetSentMessage) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_GetSentMessage((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_RemoveSentMessage) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_RemoveSentMessage((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_FlushSentMessages) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  OT_API_FlushSentMessages(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Sleep) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  OT_API_Sleep((char const *)arg1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_ResyncNymWithServer) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_ResyncNymWithServer((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetCommand) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Message_GetCommand((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetSuccess) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Message_GetSuccess((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_queryAssetTypes) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_queryAssetTypes((char const *)arg1,(char const *)arg2,(char const *)arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetPayload) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Message_GetPayload((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetDepth) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Message_GetDepth((char const *)arg1);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetTransactionSuccess) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Message_GetTransactionSuccess((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetBalanceAgreementSuccess) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_Message_GetBalanceAgreementSuccess((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetLedger) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Message_GetLedger((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetNewAssetTypeID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Message_GetNewAssetTypeID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetNewIssuerAcctID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Message_GetNewIssuerAcctID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetNewAcctID) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Message_GetNewAcctID((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_Message_GetNymboxHash) {
  char *arg1 = (char *) 0 ;
  zval **args[1];
  char *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  result = (char *)OT_API_Message_GetNymboxHash((char const *)arg1);
  {
    if(!result) {
      ZVAL_NULL(return_value);
    } else {
      ZVAL_STRING(return_value, (char *)result, 1);
    }
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_ConnectServer) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  zval **args[5];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[0])->type==IS_NULL) {
    arg1 = (char *) 0;
  } else {
    convert_to_string_ex(args[0]);
    arg1 = (char *) Z_STRVAL_PP(args[0]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[1])->type==IS_NULL) {
    arg2 = (char *) 0;
  } else {
    convert_to_string_ex(args[1]);
    arg2 = (char *) Z_STRVAL_PP(args[1]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[2])->type==IS_NULL) {
    arg3 = (char *) 0;
  } else {
    convert_to_string_ex(args[2]);
    arg3 = (char *) Z_STRVAL_PP(args[2]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[3])->type==IS_NULL) {
    arg4 = (char *) 0;
  } else {
    convert_to_string_ex(args[3]);
    arg4 = (char *) Z_STRVAL_PP(args[3]);
  }
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,62,CONVERT_STRING_IN@*/
  if ((*args[4])->type==IS_NULL) {
    arg5 = (char *) 0;
  } else {
    convert_to_string_ex(args[4]);
    arg5 = (char *) Z_STRVAL_PP(args[4]);
  }
  /*@SWIG@*/;
  
  result = (int)OT_API_ConnectServer((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OT_API_ProcessSockets) {
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (int)OT_API_ProcessSockets();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Storable(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::Storable *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__Storable TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::Storable resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storable_Create) {
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  zval **args[2];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTDB::StoredObjectType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OTDB::PackType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storable_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storable_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::Storable *)OTDB::Storable::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_GetPacker__SWIG_0) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::PackType arg2 ;
  zval **args[2];
  OTPacker *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_GetPacker. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OTDB::PackType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTPacker *)(arg1)->GetPacker(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPacker, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_GetPacker__SWIG_1) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  zval **args[1];
  OTPacker *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_GetPacker. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OTPacker *)(arg1)->GetPacker();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTPacker, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_GetPacker) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _wrap_Storage_GetPacker__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_Storage_GetPacker__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Storage_GetPacker'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_Exists__SWIG_0) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_Exists. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (bool)(arg1)->Exists(arg2,arg3,arg4,arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_Exists__SWIG_1) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_Exists. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (bool)(arg1)->Exists(arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_Exists__SWIG_2) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_Exists. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (bool)(arg1)->Exists(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_Exists__SWIG_3) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_Exists. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = (bool)(arg1)->Exists(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_Exists) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_Storage_Exists__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_Storage_Exists__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_Storage_Exists__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_Storage_Exists__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Storage_Exists'";
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Storage(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::Storage *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__Storage TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::Storage resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StoreString__SWIG_0) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  zval **args[6];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StoreString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  
  convert_to_string_ex(args[5]);
  (&arg6)->assign(Z_STRVAL_PP(args[5]), Z_STRLEN_PP(args[5]));
  
  result = (bool)(arg1)->StoreString(arg2,arg3,arg4,arg5,arg6);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StoreString__SWIG_1) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StoreString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (bool)(arg1)->StoreString(arg2,arg3,arg4,arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StoreString__SWIG_2) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StoreString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (bool)(arg1)->StoreString(arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StoreString__SWIG_3) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StoreString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (bool)(arg1)->StoreString(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StoreString) {
  int argc;
  zval **argv[6];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_Storage_StoreString__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_Storage_StoreString__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_Storage_StoreString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _v = ( Z_TYPE_PP(argv[5]) == IS_STRING ) ? 1 : 0;
              
              if (_v) {
                _wrap_Storage_StoreString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Storage_StoreString'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryString__SWIG_0) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (arg1)->QueryString(arg2,arg3,arg4,arg5);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryString__SWIG_1) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (arg1)->QueryString(arg2,arg3,arg4);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryString__SWIG_2) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (arg1)->QueryString(arg2,arg3);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryString__SWIG_3) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  zval **args[2];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = (arg1)->QueryString(arg2);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryString) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_Storage_QueryString__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_Storage_QueryString__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_Storage_QueryString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_Storage_QueryString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Storage_QueryString'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StorePlainString__SWIG_0) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  zval **args[6];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StorePlainString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  
  convert_to_string_ex(args[5]);
  (&arg6)->assign(Z_STRVAL_PP(args[5]), Z_STRLEN_PP(args[5]));
  
  result = (bool)(arg1)->StorePlainString(arg2,arg3,arg4,arg5,arg6);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StorePlainString__SWIG_1) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StorePlainString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (bool)(arg1)->StorePlainString(arg2,arg3,arg4,arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StorePlainString__SWIG_2) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StorePlainString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (bool)(arg1)->StorePlainString(arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StorePlainString__SWIG_3) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StorePlainString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (bool)(arg1)->StorePlainString(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StorePlainString) {
  int argc;
  zval **argv[6];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_Storage_StorePlainString__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_Storage_StorePlainString__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_Storage_StorePlainString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _v = ( Z_TYPE_PP(argv[5]) == IS_STRING ) ? 1 : 0;
              
              if (_v) {
                _wrap_Storage_StorePlainString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Storage_StorePlainString'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryPlainString__SWIG_0) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryPlainString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (arg1)->QueryPlainString(arg2,arg3,arg4,arg5);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryPlainString__SWIG_1) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryPlainString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (arg1)->QueryPlainString(arg2,arg3,arg4);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryPlainString__SWIG_2) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryPlainString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (arg1)->QueryPlainString(arg2,arg3);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryPlainString__SWIG_3) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  zval **args[2];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryPlainString. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = (arg1)->QueryPlainString(arg2);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryPlainString) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_Storage_QueryPlainString__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_Storage_QueryPlainString__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_Storage_QueryPlainString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_Storage_QueryPlainString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Storage_QueryPlainString'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StoreObject__SWIG_0) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  zval **args[6];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StoreObject. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__Storable, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Storage_StoreObject. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  
  convert_to_string_ex(args[5]);
  (&arg6)->assign(Z_STRVAL_PP(args[5]), Z_STRLEN_PP(args[5]));
  
  result = (bool)(arg1)->StoreObject(*arg2,arg3,arg4,arg5,arg6);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StoreObject__SWIG_1) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StoreObject. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__Storable, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Storage_StoreObject. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (bool)(arg1)->StoreObject(*arg2,arg3,arg4,arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StoreObject__SWIG_2) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StoreObject. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__Storable, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Storage_StoreObject. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (bool)(arg1)->StoreObject(*arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StoreObject__SWIG_3) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_StoreObject. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__Storable, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Storage_StoreObject. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (bool)(arg1)->StoreObject(*arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_StoreObject) {
  int argc;
  zval **argv[6];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OTDB__Storable, 0) >= 0);
      }
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_Storage_StoreObject__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OTDB__Storable, 0) >= 0);
      }
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_Storage_StoreObject__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OTDB__Storable, 0) >= 0);
      }
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_Storage_StoreObject__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_OTDB__Storable, 0) >= 0);
      }
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _v = ( Z_TYPE_PP(argv[5]) == IS_STRING ) ? 1 : 0;
              
              if (_v) {
                _wrap_Storage_StoreObject__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Storage_StoreObject'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryObject__SWIG_0) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  zval **args[6];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryObject. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OTDB::StoredObjectType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  
  convert_to_string_ex(args[5]);
  (&arg6)->assign(Z_STRVAL_PP(args[5]), Z_STRLEN_PP(args[5]));
  
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3,arg4,arg5,arg6);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryObject__SWIG_1) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryObject. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OTDB::StoredObjectType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3,arg4,arg5);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryObject__SWIG_2) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryObject. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OTDB::StoredObjectType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3,arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryObject__SWIG_3) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  zval **args[3];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_QueryObject. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OTDB::StoredObjectType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_QueryObject) {
  int argc;
  zval **argv[6];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_Storage_QueryObject__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_Storage_QueryObject__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_Storage_QueryObject__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _v = ( Z_TYPE_PP(argv[5]) == IS_STRING ) ? 1 : 0;
              
              if (_v) {
                _wrap_Storage_QueryObject__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Storage_QueryObject'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_EncodeObject) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  zval **args[2];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_EncodeObject. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__Storable, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Storage_EncodeObject. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (arg1)->EncodeObject(*arg2);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_DecodeObject) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  zval **args[3];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_DecodeObject. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OTDB::StoredObjectType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (OTDB::Storable *)(arg1)->DecodeObject(arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_EraseValueByKey__SWIG_0) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_EraseValueByKey. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (bool)(arg1)->EraseValueByKey(arg2,arg3,arg4,arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_EraseValueByKey__SWIG_1) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_EraseValueByKey. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (bool)(arg1)->EraseValueByKey(arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_EraseValueByKey__SWIG_2) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_EraseValueByKey. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (bool)(arg1)->EraseValueByKey(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_EraseValueByKey__SWIG_3) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_EraseValueByKey. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = (bool)(arg1)->EraseValueByKey(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_EraseValueByKey) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_Storage_EraseValueByKey__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_Storage_EraseValueByKey__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_Storage_EraseValueByKey__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storage, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_Storage_EraseValueByKey__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Storage_EraseValueByKey'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_CreateObject) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  zval **args[2];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_CreateObject. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OTDB::StoredObjectType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::Storable *)(arg1)->CreateObject(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_Create) {
  OTDB::StorageType arg1 ;
  OTDB::PackType arg2 ;
  zval **args[2];
  OTDB::Storage *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTDB::StorageType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OTDB::PackType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::Storage *)OTDB::Storage::Create(arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storage, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Storage_GetType) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  zval **args[1];
  OTDB::StorageType result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storage, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Storage_GetType. Expected SWIGTYPE_p_OTDB__Storage");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (OTDB::StorageType)((OTDB::Storage const *)arg1)->GetType();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_InitDefaultStorage) {
  OTDB::StorageType arg1 ;
  OTDB::PackType arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTDB::StorageType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OTDB::PackType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)OTDB::InitDefaultStorage(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_GetDefaultStorage) {
  OTDB::Storage *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (OTDB::Storage *)OTDB::GetDefaultStorage();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storage, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CreateStorageContext__SWIG_0) {
  OTDB::StorageType arg1 ;
  OTDB::PackType arg2 ;
  zval **args[2];
  OTDB::Storage *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTDB::StorageType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (OTDB::PackType) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::Storage *)OTDB::CreateStorageContext(arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storage, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CreateStorageContext__SWIG_1) {
  OTDB::StorageType arg1 ;
  zval **args[1];
  OTDB::Storage *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTDB::StorageType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (OTDB::Storage *)OTDB::CreateStorageContext(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storage, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CreateStorageContext) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_CreateStorageContext__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_CreateStorageContext__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'CreateStorageContext'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_CreateObject) {
  OTDB::StoredObjectType arg1 ;
  zval **args[1];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTDB::StoredObjectType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (OTDB::Storable *)OTDB::CreateObject(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Exists__SWIG_0) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (bool)OTDB::Exists(arg1,arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Exists__SWIG_1) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (bool)OTDB::Exists(arg1,arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Exists__SWIG_2) {
  std::string arg1 ;
  std::string arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = (bool)OTDB::Exists(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Exists__SWIG_3) {
  std::string arg1 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  result = (bool)OTDB::Exists(arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Exists) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _wrap_Exists__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_Exists__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_Exists__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_Exists__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'Exists'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StoreString__SWIG_0) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (bool)OTDB::StoreString(arg1,arg2,arg3,arg4,arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StoreString__SWIG_1) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (bool)OTDB::StoreString(arg1,arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StoreString__SWIG_2) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (bool)OTDB::StoreString(arg1,arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StoreString__SWIG_3) {
  std::string arg1 ;
  std::string arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = (bool)OTDB::StoreString(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StoreString) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_StoreString__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_StoreString__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_StoreString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_StoreString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'StoreString'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryString__SWIG_0) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = OTDB::QueryString(arg1,arg2,arg3,arg4);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryString__SWIG_1) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = OTDB::QueryString(arg1,arg2,arg3);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryString__SWIG_2) {
  std::string arg1 ;
  std::string arg2 ;
  zval **args[2];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = OTDB::QueryString(arg1,arg2);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryString__SWIG_3) {
  std::string arg1 ;
  zval **args[1];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  result = OTDB::QueryString(arg1);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryString) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _wrap_QueryString__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_QueryString__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_QueryString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_QueryString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'QueryString'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StorePlainString__SWIG_0) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (bool)OTDB::StorePlainString(arg1,arg2,arg3,arg4,arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StorePlainString__SWIG_1) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (bool)OTDB::StorePlainString(arg1,arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StorePlainString__SWIG_2) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (bool)OTDB::StorePlainString(arg1,arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StorePlainString__SWIG_3) {
  std::string arg1 ;
  std::string arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = (bool)OTDB::StorePlainString(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StorePlainString) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_StorePlainString__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_StorePlainString__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_StorePlainString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_StorePlainString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'StorePlainString'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryPlainString__SWIG_0) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = OTDB::QueryPlainString(arg1,arg2,arg3,arg4);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryPlainString__SWIG_1) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = OTDB::QueryPlainString(arg1,arg2,arg3);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryPlainString__SWIG_2) {
  std::string arg1 ;
  std::string arg2 ;
  zval **args[2];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = OTDB::QueryPlainString(arg1,arg2);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryPlainString__SWIG_3) {
  std::string arg1 ;
  zval **args[1];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  result = OTDB::QueryPlainString(arg1);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryPlainString) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _wrap_QueryPlainString__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_QueryPlainString__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_QueryPlainString__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_QueryPlainString__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'QueryPlainString'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StoreObject__SWIG_0) {
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StoreObject. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (bool)OTDB::StoreObject(*arg1,arg2,arg3,arg4,arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StoreObject__SWIG_1) {
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StoreObject. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (bool)OTDB::StoreObject(*arg1,arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StoreObject__SWIG_2) {
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StoreObject. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (bool)OTDB::StoreObject(*arg1,arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StoreObject__SWIG_3) {
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StoreObject. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = (bool)OTDB::StoreObject(*arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StoreObject) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storable, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_StoreObject__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storable, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_StoreObject__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storable, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_StoreObject__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_OTDB__Storable, 0) >= 0);
    }
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_StoreObject__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'StoreObject'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryObject__SWIG_0) {
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  zval **args[5];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTDB::StoredObjectType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  
  convert_to_string_ex(args[4]);
  (&arg5)->assign(Z_STRVAL_PP(args[4]), Z_STRLEN_PP(args[4]));
  
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2,arg3,arg4,arg5);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryObject__SWIG_1) {
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTDB::StoredObjectType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2,arg3,arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryObject__SWIG_2) {
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTDB::StoredObjectType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryObject__SWIG_3) {
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  zval **args[2];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTDB::StoredObjectType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_QueryObject) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_QueryObject__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_QueryObject__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_QueryObject__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _v = ( Z_TYPE_PP(argv[4]) == IS_STRING ) ? 1 : 0;
            
            if (_v) {
              _wrap_QueryObject__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'QueryObject'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_EncodeObject) {
  OTDB::Storable *arg1 = 0 ;
  zval **args[1];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of EncodeObject. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = OTDB::EncodeObject(*arg1);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_DecodeObject) {
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  zval **args[2];
  OTDB::Storable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (OTDB::StoredObjectType) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = (OTDB::Storable *)OTDB::DecodeObject(arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Storable, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_EraseValueByKey__SWIG_0) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  
  convert_to_string_ex(args[3]);
  (&arg4)->assign(Z_STRVAL_PP(args[3]), Z_STRLEN_PP(args[3]));
  
  result = (bool)OTDB::EraseValueByKey(arg1,arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_EraseValueByKey__SWIG_1) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  
  convert_to_string_ex(args[2]);
  (&arg3)->assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  
  result = (bool)OTDB::EraseValueByKey(arg1,arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_EraseValueByKey__SWIG_2) {
  std::string arg1 ;
  std::string arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  
  convert_to_string_ex(args[1]);
  (&arg2)->assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  
  result = (bool)OTDB::EraseValueByKey(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_EraseValueByKey__SWIG_3) {
  std::string arg1 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  convert_to_string_ex(args[0]);
  (&arg1)->assign(Z_STRVAL_PP(args[0]), Z_STRLEN_PP(args[0]));
  
  result = (bool)OTDB::EraseValueByKey(arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_EraseValueByKey) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _wrap_EraseValueByKey__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _wrap_EraseValueByKey__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _wrap_EraseValueByKey__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    
    _v = ( Z_TYPE_PP(argv[0]) == IS_STRING ) ? 1 : 0;
    
    if (_v) {
      _v = ( Z_TYPE_PP(argv[1]) == IS_STRING ) ? 1 : 0;
      
      if (_v) {
        _v = ( Z_TYPE_PP(argv[2]) == IS_STRING ) ? 1 : 0;
        
        if (_v) {
          _v = ( Z_TYPE_PP(argv[3]) == IS_STRING ) ? 1 : 0;
          
          if (_v) {
            _wrap_EraseValueByKey__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'EraseValueByKey'";
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_OTDBString(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::OTDBString *arg1 = (OTDB::OTDBString *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::OTDBString *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__OTDBString TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::OTDBString resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTDBString_m_string_set) {
  OTDB::OTDBString *arg1 = (OTDB::OTDBString *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OTDBString, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTDBString_m_string_set. Expected SWIGTYPE_p_OTDB__OTDBString");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->m_string = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTDBString_m_string_get) {
  OTDB::OTDBString *arg1 = (OTDB::OTDBString *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OTDBString, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTDBString_m_string_get. Expected SWIGTYPE_p_OTDB__OTDBString");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->m_string);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OTDBString_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::OTDBString *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OTDBString_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::OTDBString *)OTDB::OTDBString::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__OTDBString, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Blob(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::Blob *arg1 = (OTDB::Blob *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::Blob *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__Blob TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::Blob resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Blob_m_memBuffer_set) {
  OTDB::Blob *arg1 = (OTDB::Blob *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Blob, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Blob_m_memBuffer_set. Expected SWIGTYPE_p_OTDB__Blob");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Blob_m_memBuffer_set. Expected SWIGTYPE_p_std__vectorT_unsigned_char_t");
    }
    arg2 = *tmp2;
  }
  if (arg1) (arg1)->m_memBuffer = arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Blob_m_memBuffer_get) {
  OTDB::Blob *arg1 = (OTDB::Blob *) 0 ;
  zval **args[1];
  std::vector< unsigned char > result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Blob, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Blob_m_memBuffer_get. Expected SWIGTYPE_p_OTDB__Blob");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result =  ((arg1)->m_memBuffer);
  {
    std::vector< unsigned char > * resultobj = new std::vector< unsigned char >((const std::vector< unsigned char > &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_std__vectorT_unsigned_char_t, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Blob_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::Blob *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Blob_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::Blob *)OTDB::Blob::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Blob, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_StringMap(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::StringMap *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__StringMap TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::StringMap resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringMap_the_map_set) {
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__StringMap, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringMap_the_map_set. Expected SWIGTYPE_p_OTDB__StringMap");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of StringMap_the_map_set. Expected SWIGTYPE_p_std__mapT_std__string_std__string_t");
    }
  }
  if (arg1) (arg1)->the_map = *arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringMap_the_map_get) {
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  zval **args[1];
  std::map< std::string,std::string > *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__StringMap, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringMap_the_map_get. Expected SWIGTYPE_p_OTDB__StringMap");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::map< std::string,std::string > *)& ((arg1)->the_map);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringMap_SetValue) {
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__StringMap, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringMap_SetValue. Expected SWIGTYPE_p_OTDB__StringMap");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  
  convert_to_string_ex(args[2]);
  temp3.assign(Z_STRVAL_PP(args[2]), Z_STRLEN_PP(args[2]));
  arg3 = &temp3;
  
  (arg1)->SetValue((std::string const &)*arg2,(std::string const &)*arg3);
  
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringMap_GetValue) {
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  std::string result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__StringMap, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringMap_GetValue. Expected SWIGTYPE_p_OTDB__StringMap");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  result = (arg1)->GetValue((std::string const &)*arg2);
  
  ZVAL_STRINGL(return_value, const_cast<char*>((&result)->data()), (&result)->size(), 1);
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_StringMap_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::StringMap *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of StringMap_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::StringMap *)OTDB::StringMap::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__StringMap, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Displayable(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::Displayable *arg1 = (OTDB::Displayable *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::Displayable *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__Displayable TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::Displayable resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Displayable_gui_label_set) {
  OTDB::Displayable *arg1 = (OTDB::Displayable *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Displayable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Displayable_gui_label_set. Expected SWIGTYPE_p_OTDB__Displayable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Displayable_gui_label_get) {
  OTDB::Displayable *arg1 = (OTDB::Displayable *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Displayable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Displayable_gui_label_get. Expected SWIGTYPE_p_OTDB__Displayable");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Displayable_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::Displayable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Displayable_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::Displayable *)OTDB::Displayable::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Displayable, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_MarketData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::MarketData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__MarketData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::MarketData resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_gui_label_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_gui_label_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_gui_label_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_gui_label_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_server_id_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_server_id_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_server_id_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_server_id_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_market_id_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_market_id_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->market_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_market_id_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_market_id_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->market_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_asset_type_id_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_asset_type_id_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->asset_type_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_asset_type_id_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_asset_type_id_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->asset_type_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_currency_type_id_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_currency_type_id_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->currency_type_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_currency_type_id_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_currency_type_id_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->currency_type_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_scale_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_scale_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->scale = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_scale_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_scale_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->scale);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_total_assets_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_total_assets_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->total_assets = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_total_assets_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_total_assets_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->total_assets);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_number_bids_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_number_bids_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->number_bids = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_number_bids_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_number_bids_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->number_bids);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_number_asks_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_number_asks_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->number_asks = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_number_asks_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_number_asks_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->number_asks);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_last_sale_price_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_last_sale_price_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->last_sale_price = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_last_sale_price_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_last_sale_price_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->last_sale_price);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_current_bid_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_current_bid_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->current_bid = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_current_bid_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_current_bid_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->current_bid);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_current_ask_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_current_ask_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->current_ask = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_current_ask_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_current_ask_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->current_ask);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_volume_trades_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_volume_trades_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->volume_trades = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_volume_trades_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_volume_trades_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->volume_trades);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_volume_assets_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_volume_assets_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->volume_assets = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_volume_assets_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_volume_assets_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->volume_assets);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_volume_currency_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_volume_currency_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->volume_currency = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_volume_currency_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_volume_currency_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->volume_currency);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_recent_highest_bid_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_recent_highest_bid_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->recent_highest_bid = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_recent_highest_bid_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_recent_highest_bid_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->recent_highest_bid);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_recent_lowest_ask_set) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_recent_lowest_ask_set. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->recent_lowest_ask = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_recent_lowest_ask_get) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_recent_lowest_ask_get. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->recent_lowest_ask);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketData_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::MarketData *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketData_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::MarketData *)OTDB::MarketData::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__MarketData, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_MarketList(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::MarketList *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__MarketList TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::MarketList resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketList_GetMarketDataCount) {
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketList_GetMarketDataCount. Expected SWIGTYPE_p_OTDB__MarketList");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetMarketDataCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketList_GetMarketData) {
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::MarketData *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketList_GetMarketData. Expected SWIGTYPE_p_OTDB__MarketList");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::MarketData *)(arg1)->GetMarketData(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__MarketData, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketList_RemoveMarketData) {
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketList_RemoveMarketData. Expected SWIGTYPE_p_OTDB__MarketList");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveMarketData(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketList_AddMarketData) {
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  OTDB::MarketData *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__MarketList, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketList_AddMarketData. Expected SWIGTYPE_p_OTDB__MarketList");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__MarketData, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of MarketList_AddMarketData. Expected SWIGTYPE_p_OTDB__MarketData");
    }
  }
  result = (bool)(arg1)->AddMarketData(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_MarketList_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::MarketList *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of MarketList_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::MarketList *)OTDB::MarketList::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__MarketList, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_OfferDataMarket(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::OfferDataMarket *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__OfferDataMarket TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::OfferDataMarket resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataMarket_gui_label_set) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataMarket_gui_label_set. Expected SWIGTYPE_p_OTDB__OfferDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataMarket_gui_label_get) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataMarket_gui_label_get. Expected SWIGTYPE_p_OTDB__OfferDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataMarket_transaction_id_set) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataMarket_transaction_id_set. Expected SWIGTYPE_p_OTDB__OfferDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataMarket_transaction_id_get) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataMarket_transaction_id_get. Expected SWIGTYPE_p_OTDB__OfferDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->transaction_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataMarket_price_per_scale_set) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataMarket_price_per_scale_set. Expected SWIGTYPE_p_OTDB__OfferDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->price_per_scale = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataMarket_price_per_scale_get) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataMarket_price_per_scale_get. Expected SWIGTYPE_p_OTDB__OfferDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->price_per_scale);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataMarket_available_assets_set) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataMarket_available_assets_set. Expected SWIGTYPE_p_OTDB__OfferDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->available_assets = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataMarket_available_assets_get) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataMarket_available_assets_get. Expected SWIGTYPE_p_OTDB__OfferDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->available_assets);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataMarket_minimum_increment_set) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataMarket_minimum_increment_set. Expected SWIGTYPE_p_OTDB__OfferDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->minimum_increment = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataMarket_minimum_increment_get) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataMarket_minimum_increment_get. Expected SWIGTYPE_p_OTDB__OfferDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->minimum_increment);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataMarket_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::OfferDataMarket *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataMarket_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::OfferDataMarket *)OTDB::OfferDataMarket::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__OfferDataMarket, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_BidData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::BidData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__BidData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::BidData resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BidData_gui_label_set) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BidData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BidData_gui_label_set. Expected SWIGTYPE_p_OTDB__BidData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BidData_gui_label_get) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BidData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BidData_gui_label_get. Expected SWIGTYPE_p_OTDB__BidData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BidData_transaction_id_set) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BidData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BidData_transaction_id_set. Expected SWIGTYPE_p_OTDB__BidData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BidData_transaction_id_get) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BidData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BidData_transaction_id_get. Expected SWIGTYPE_p_OTDB__BidData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->transaction_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BidData_price_per_scale_set) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BidData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BidData_price_per_scale_set. Expected SWIGTYPE_p_OTDB__BidData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->price_per_scale = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BidData_price_per_scale_get) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BidData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BidData_price_per_scale_get. Expected SWIGTYPE_p_OTDB__BidData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->price_per_scale);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BidData_available_assets_set) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BidData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BidData_available_assets_set. Expected SWIGTYPE_p_OTDB__BidData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->available_assets = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BidData_available_assets_get) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BidData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BidData_available_assets_get. Expected SWIGTYPE_p_OTDB__BidData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->available_assets);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BidData_minimum_increment_set) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BidData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BidData_minimum_increment_set. Expected SWIGTYPE_p_OTDB__BidData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->minimum_increment = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BidData_minimum_increment_get) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BidData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BidData_minimum_increment_get. Expected SWIGTYPE_p_OTDB__BidData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->minimum_increment);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BidData_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::BidData *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BidData_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::BidData *)OTDB::BidData::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__BidData, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_AskData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::AskData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__AskData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::AskData resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AskData_gui_label_set) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AskData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AskData_gui_label_set. Expected SWIGTYPE_p_OTDB__AskData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AskData_gui_label_get) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AskData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AskData_gui_label_get. Expected SWIGTYPE_p_OTDB__AskData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AskData_transaction_id_set) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AskData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AskData_transaction_id_set. Expected SWIGTYPE_p_OTDB__AskData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AskData_transaction_id_get) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AskData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AskData_transaction_id_get. Expected SWIGTYPE_p_OTDB__AskData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->transaction_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AskData_price_per_scale_set) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AskData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AskData_price_per_scale_set. Expected SWIGTYPE_p_OTDB__AskData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->price_per_scale = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AskData_price_per_scale_get) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AskData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AskData_price_per_scale_get. Expected SWIGTYPE_p_OTDB__AskData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->price_per_scale);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AskData_available_assets_set) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AskData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AskData_available_assets_set. Expected SWIGTYPE_p_OTDB__AskData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->available_assets = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AskData_available_assets_get) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AskData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AskData_available_assets_get. Expected SWIGTYPE_p_OTDB__AskData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->available_assets);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AskData_minimum_increment_set) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AskData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AskData_minimum_increment_set. Expected SWIGTYPE_p_OTDB__AskData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->minimum_increment = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AskData_minimum_increment_get) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AskData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AskData_minimum_increment_get. Expected SWIGTYPE_p_OTDB__AskData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->minimum_increment);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AskData_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::AskData *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AskData_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::AskData *)OTDB::AskData::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__AskData, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_OfferListMarket(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::OfferListMarket *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__OfferListMarket TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::OfferListMarket resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListMarket_GetBidDataCount) {
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListMarket_GetBidDataCount. Expected SWIGTYPE_p_OTDB__OfferListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetBidDataCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListMarket_GetBidData) {
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::BidData *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListMarket_GetBidData. Expected SWIGTYPE_p_OTDB__OfferListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::BidData *)(arg1)->GetBidData(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__BidData, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListMarket_RemoveBidData) {
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListMarket_RemoveBidData. Expected SWIGTYPE_p_OTDB__OfferListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveBidData(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListMarket_AddBidData) {
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  OTDB::BidData *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListMarket_AddBidData. Expected SWIGTYPE_p_OTDB__OfferListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__BidData, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OfferListMarket_AddBidData. Expected SWIGTYPE_p_OTDB__BidData");
    }
  }
  result = (bool)(arg1)->AddBidData(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListMarket_GetAskDataCount) {
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListMarket_GetAskDataCount. Expected SWIGTYPE_p_OTDB__OfferListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetAskDataCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListMarket_GetAskData) {
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::AskData *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListMarket_GetAskData. Expected SWIGTYPE_p_OTDB__OfferListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::AskData *)(arg1)->GetAskData(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__AskData, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListMarket_RemoveAskData) {
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListMarket_RemoveAskData. Expected SWIGTYPE_p_OTDB__OfferListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveAskData(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListMarket_AddAskData) {
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  OTDB::AskData *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListMarket_AddAskData. Expected SWIGTYPE_p_OTDB__OfferListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__AskData, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OfferListMarket_AddAskData. Expected SWIGTYPE_p_OTDB__AskData");
    }
  }
  result = (bool)(arg1)->AddAskData(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListMarket_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::OfferListMarket *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListMarket_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::OfferListMarket *)OTDB::OfferListMarket::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__OfferListMarket, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_TradeDataMarket(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::TradeDataMarket *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__TradeDataMarket TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::TradeDataMarket resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataMarket_gui_label_set) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataMarket_gui_label_set. Expected SWIGTYPE_p_OTDB__TradeDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataMarket_gui_label_get) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataMarket_gui_label_get. Expected SWIGTYPE_p_OTDB__TradeDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataMarket_transaction_id_set) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataMarket_transaction_id_set. Expected SWIGTYPE_p_OTDB__TradeDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataMarket_transaction_id_get) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataMarket_transaction_id_get. Expected SWIGTYPE_p_OTDB__TradeDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->transaction_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataMarket_date_set) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataMarket_date_set. Expected SWIGTYPE_p_OTDB__TradeDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->date = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataMarket_date_get) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataMarket_date_get. Expected SWIGTYPE_p_OTDB__TradeDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->date);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataMarket_price_set) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataMarket_price_set. Expected SWIGTYPE_p_OTDB__TradeDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->price = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataMarket_price_get) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataMarket_price_get. Expected SWIGTYPE_p_OTDB__TradeDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->price);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataMarket_amount_sold_set) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataMarket_amount_sold_set. Expected SWIGTYPE_p_OTDB__TradeDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->amount_sold = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataMarket_amount_sold_get) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataMarket_amount_sold_get. Expected SWIGTYPE_p_OTDB__TradeDataMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->amount_sold);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataMarket_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::TradeDataMarket *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataMarket_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::TradeDataMarket *)OTDB::TradeDataMarket::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__TradeDataMarket, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_TradeListMarket(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::TradeListMarket *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__TradeListMarket TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::TradeListMarket resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeListMarket_GetTradeDataMarketCount) {
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeListMarket_GetTradeDataMarketCount. Expected SWIGTYPE_p_OTDB__TradeListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetTradeDataMarketCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeListMarket_GetTradeDataMarket) {
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::TradeDataMarket *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeListMarket_GetTradeDataMarket. Expected SWIGTYPE_p_OTDB__TradeListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::TradeDataMarket *)(arg1)->GetTradeDataMarket(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__TradeDataMarket, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeListMarket_RemoveTradeDataMarket) {
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeListMarket_RemoveTradeDataMarket. Expected SWIGTYPE_p_OTDB__TradeListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveTradeDataMarket(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeListMarket_AddTradeDataMarket) {
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  OTDB::TradeDataMarket *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeListMarket, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeListMarket_AddTradeDataMarket. Expected SWIGTYPE_p_OTDB__TradeListMarket");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__TradeDataMarket, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TradeListMarket_AddTradeDataMarket. Expected SWIGTYPE_p_OTDB__TradeDataMarket");
    }
  }
  result = (bool)(arg1)->AddTradeDataMarket(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeListMarket_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::TradeListMarket *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeListMarket_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::TradeListMarket *)OTDB::TradeListMarket::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__TradeListMarket, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_OfferDataNym(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::OfferDataNym *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__OfferDataNym TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::OfferDataNym resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_gui_label_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_gui_label_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_gui_label_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_gui_label_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_valid_from_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_valid_from_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->valid_from = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_valid_from_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_valid_from_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->valid_from);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_valid_to_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_valid_to_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->valid_to = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_valid_to_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_valid_to_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->valid_to);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_server_id_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_server_id_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_server_id_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_server_id_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_asset_type_id_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_asset_type_id_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->asset_type_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_asset_type_id_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_asset_type_id_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->asset_type_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_asset_acct_id_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_asset_acct_id_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->asset_acct_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_asset_acct_id_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_asset_acct_id_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->asset_acct_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_currency_type_id_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_currency_type_id_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->currency_type_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_currency_type_id_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_currency_type_id_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->currency_type_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_currency_acct_id_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_currency_acct_id_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->currency_acct_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_currency_acct_id_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_currency_acct_id_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->currency_acct_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_selling_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_selling_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->selling = arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_selling_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_selling_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool) ((arg1)->selling);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_scale_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_scale_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->scale = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_scale_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_scale_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->scale);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_price_per_scale_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_price_per_scale_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->price_per_scale = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_price_per_scale_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_price_per_scale_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->price_per_scale);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_transaction_id_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_transaction_id_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_transaction_id_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_transaction_id_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->transaction_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_total_assets_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_total_assets_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->total_assets = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_total_assets_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_total_assets_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->total_assets);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_finished_so_far_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_finished_so_far_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->finished_so_far = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_finished_so_far_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_finished_so_far_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->finished_so_far);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_minimum_increment_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_minimum_increment_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->minimum_increment = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_minimum_increment_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_minimum_increment_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->minimum_increment);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_stop_sign_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_stop_sign_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->stop_sign = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_stop_sign_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_stop_sign_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->stop_sign);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_stop_price_set) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_stop_price_set. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->stop_price = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_stop_price_get) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_stop_price_get. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->stop_price);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferDataNym_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::OfferDataNym *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferDataNym_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::OfferDataNym *)OTDB::OfferDataNym::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__OfferDataNym, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_OfferListNym(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::OfferListNym *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__OfferListNym TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::OfferListNym resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListNym_GetOfferDataNymCount) {
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListNym_GetOfferDataNymCount. Expected SWIGTYPE_p_OTDB__OfferListNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetOfferDataNymCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListNym_GetOfferDataNym) {
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::OfferDataNym *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListNym_GetOfferDataNym. Expected SWIGTYPE_p_OTDB__OfferListNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::OfferDataNym *)(arg1)->GetOfferDataNym(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__OfferDataNym, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListNym_RemoveOfferDataNym) {
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListNym_RemoveOfferDataNym. Expected SWIGTYPE_p_OTDB__OfferListNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveOfferDataNym(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListNym_AddOfferDataNym) {
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  OTDB::OfferDataNym *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__OfferListNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListNym_AddOfferDataNym. Expected SWIGTYPE_p_OTDB__OfferListNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__OfferDataNym, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of OfferListNym_AddOfferDataNym. Expected SWIGTYPE_p_OTDB__OfferDataNym");
    }
  }
  result = (bool)(arg1)->AddOfferDataNym(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_OfferListNym_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::OfferListNym *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of OfferListNym_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::OfferListNym *)OTDB::OfferListNym::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__OfferListNym, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_TradeDataNym(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::TradeDataNym *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__TradeDataNym TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::TradeDataNym resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_gui_label_set) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_gui_label_set. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_gui_label_get) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_gui_label_get. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_transaction_id_set) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_transaction_id_set. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_transaction_id_get) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_transaction_id_get. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->transaction_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_completed_count_set) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_completed_count_set. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->completed_count = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_completed_count_get) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_completed_count_get. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->completed_count);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_date_set) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_date_set. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->date = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_date_get) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_date_get. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->date);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_price_set) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_price_set. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->price = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_price_get) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_price_get. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->price);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_amount_sold_set) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_amount_sold_set. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->amount_sold = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_amount_sold_get) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_amount_sold_get. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->amount_sold);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeDataNym_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::TradeDataNym *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeDataNym_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::TradeDataNym *)OTDB::TradeDataNym::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__TradeDataNym, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_TradeListNym(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::TradeListNym *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__TradeListNym TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::TradeListNym resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeListNym_GetTradeDataNymCount) {
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeListNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeListNym_GetTradeDataNymCount. Expected SWIGTYPE_p_OTDB__TradeListNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetTradeDataNymCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeListNym_GetTradeDataNym) {
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::TradeDataNym *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeListNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeListNym_GetTradeDataNym. Expected SWIGTYPE_p_OTDB__TradeListNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::TradeDataNym *)(arg1)->GetTradeDataNym(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__TradeDataNym, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeListNym_RemoveTradeDataNym) {
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeListNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeListNym_RemoveTradeDataNym. Expected SWIGTYPE_p_OTDB__TradeListNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveTradeDataNym(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeListNym_AddTradeDataNym) {
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  OTDB::TradeDataNym *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__TradeListNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeListNym_AddTradeDataNym. Expected SWIGTYPE_p_OTDB__TradeListNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__TradeDataNym, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of TradeListNym_AddTradeDataNym. Expected SWIGTYPE_p_OTDB__TradeDataNym");
    }
  }
  result = (bool)(arg1)->AddTradeDataNym(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_TradeListNym_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::TradeListNym *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of TradeListNym_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::TradeListNym *)OTDB::TradeListNym::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__TradeListNym, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Acct(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::Acct *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__Acct TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::Acct resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Acct_gui_label_set) {
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Acct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Acct_gui_label_set. Expected SWIGTYPE_p_OTDB__Acct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Acct_gui_label_get) {
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Acct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Acct_gui_label_get. Expected SWIGTYPE_p_OTDB__Acct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Acct_acct_id_set) {
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Acct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Acct_acct_id_set. Expected SWIGTYPE_p_OTDB__Acct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->acct_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Acct_acct_id_get) {
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Acct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Acct_acct_id_get. Expected SWIGTYPE_p_OTDB__Acct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->acct_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Acct_server_id_set) {
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Acct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Acct_server_id_set. Expected SWIGTYPE_p_OTDB__Acct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Acct_server_id_get) {
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Acct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Acct_server_id_get. Expected SWIGTYPE_p_OTDB__Acct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Acct_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::Acct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Acct_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::Acct *)OTDB::Acct::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Acct, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_BitcoinAcct(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::BitcoinAcct *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__BitcoinAcct TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::BitcoinAcct resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinAcct_gui_label_set) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinAcct_gui_label_set. Expected SWIGTYPE_p_OTDB__BitcoinAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinAcct_gui_label_get) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinAcct_gui_label_get. Expected SWIGTYPE_p_OTDB__BitcoinAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinAcct_acct_id_set) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinAcct_acct_id_set. Expected SWIGTYPE_p_OTDB__BitcoinAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->acct_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinAcct_acct_id_get) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinAcct_acct_id_get. Expected SWIGTYPE_p_OTDB__BitcoinAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->acct_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinAcct_server_id_set) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinAcct_server_id_set. Expected SWIGTYPE_p_OTDB__BitcoinAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinAcct_server_id_get) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinAcct_server_id_get. Expected SWIGTYPE_p_OTDB__BitcoinAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinAcct_bitcoin_acct_name_set) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinAcct_bitcoin_acct_name_set. Expected SWIGTYPE_p_OTDB__BitcoinAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->bitcoin_acct_name = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinAcct_bitcoin_acct_name_get) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinAcct_bitcoin_acct_name_get. Expected SWIGTYPE_p_OTDB__BitcoinAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->bitcoin_acct_name);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinAcct_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::BitcoinAcct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinAcct_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::BitcoinAcct *)OTDB::BitcoinAcct::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__BitcoinAcct, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ServerInfo(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::ServerInfo *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__ServerInfo TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::ServerInfo resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ServerInfo_gui_label_set) {
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ServerInfo, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ServerInfo_gui_label_set. Expected SWIGTYPE_p_OTDB__ServerInfo");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ServerInfo_gui_label_get) {
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ServerInfo, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ServerInfo_gui_label_get. Expected SWIGTYPE_p_OTDB__ServerInfo");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ServerInfo_server_id_set) {
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ServerInfo, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ServerInfo_server_id_set. Expected SWIGTYPE_p_OTDB__ServerInfo");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ServerInfo_server_id_get) {
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ServerInfo, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ServerInfo_server_id_get. Expected SWIGTYPE_p_OTDB__ServerInfo");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ServerInfo_server_type_set) {
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ServerInfo, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ServerInfo_server_type_set. Expected SWIGTYPE_p_OTDB__ServerInfo");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_type = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ServerInfo_server_type_get) {
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ServerInfo, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ServerInfo_server_type_get. Expected SWIGTYPE_p_OTDB__ServerInfo");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_type);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ServerInfo_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::ServerInfo *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ServerInfo_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::ServerInfo *)OTDB::ServerInfo::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__ServerInfo, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Server(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::Server *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__Server TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::Server resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Server_gui_label_set) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Server, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Server_gui_label_set. Expected SWIGTYPE_p_OTDB__Server");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Server_gui_label_get) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Server, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Server_gui_label_get. Expected SWIGTYPE_p_OTDB__Server");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Server_server_id_set) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Server, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Server_server_id_set. Expected SWIGTYPE_p_OTDB__Server");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Server_server_id_get) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Server, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Server_server_id_get. Expected SWIGTYPE_p_OTDB__Server");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Server_server_type_set) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Server, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Server_server_type_set. Expected SWIGTYPE_p_OTDB__Server");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_type = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Server_server_type_get) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Server, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Server_server_type_get. Expected SWIGTYPE_p_OTDB__Server");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_type);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Server_server_host_set) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Server, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Server_server_host_set. Expected SWIGTYPE_p_OTDB__Server");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_host = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Server_server_host_get) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Server, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Server_server_host_get. Expected SWIGTYPE_p_OTDB__Server");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_host);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Server_server_port_set) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Server, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Server_server_port_set. Expected SWIGTYPE_p_OTDB__Server");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_port = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Server_server_port_get) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Server, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Server_server_port_get. Expected SWIGTYPE_p_OTDB__Server");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_port);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Server_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::Server *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Server_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::Server *)OTDB::Server::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Server, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_BitcoinServer(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::BitcoinServer *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__BitcoinServer TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::BitcoinServer resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_gui_label_set) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_gui_label_set. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_gui_label_get) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_gui_label_get. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_server_id_set) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_server_id_set. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_server_id_get) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_server_id_get. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_server_type_set) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_server_type_set. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_type = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_server_type_get) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_server_type_get. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_type);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_server_host_set) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_server_host_set. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_host = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_server_host_get) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_server_host_get. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_host);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_server_port_set) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_server_port_set. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_port = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_server_port_get) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_server_port_get. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_port);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_bitcoin_username_set) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_bitcoin_username_set. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->bitcoin_username = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_bitcoin_username_get) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_bitcoin_username_get. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->bitcoin_username);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_bitcoin_password_set) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_bitcoin_password_set. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->bitcoin_password = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_bitcoin_password_get) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_bitcoin_password_get. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->bitcoin_password);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_BitcoinServer_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::BitcoinServer *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of BitcoinServer_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::BitcoinServer *)OTDB::BitcoinServer::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__BitcoinServer, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_RippleServer(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::RippleServer *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__RippleServer TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::RippleServer resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_gui_label_set) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_gui_label_set. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_gui_label_get) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_gui_label_get. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_server_id_set) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_server_id_set. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_server_id_get) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_server_id_get. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_server_type_set) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_server_type_set. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_type = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_server_type_get) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_server_type_get. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_type);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_server_host_set) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_server_host_set. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_host = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_server_host_get) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_server_host_get. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_host);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_server_port_set) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_server_port_set. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_port = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_server_port_get) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_server_port_get. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_port);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_ripple_username_set) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_ripple_username_set. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->ripple_username = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_ripple_username_get) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_ripple_username_get. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->ripple_username);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_ripple_password_set) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_ripple_password_set. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->ripple_password = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_ripple_password_get) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_ripple_password_get. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->ripple_password);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_namefield_id_set) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_namefield_id_set. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->namefield_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_namefield_id_get) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_namefield_id_get. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->namefield_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_passfield_id_set) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_passfield_id_set. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->passfield_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_passfield_id_get) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__RippleServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_passfield_id_get. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->passfield_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_RippleServer_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::RippleServer *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of RippleServer_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::RippleServer *)OTDB::RippleServer::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__RippleServer, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_LoomServer(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::LoomServer *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__LoomServer TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::LoomServer resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_gui_label_set) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_gui_label_set. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_gui_label_get) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_gui_label_get. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_server_id_set) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_server_id_set. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_server_id_get) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_server_id_get. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_server_type_set) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_server_type_set. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_type = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_server_type_get) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_server_type_get. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_type);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_server_host_set) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_server_host_set. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_host = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_server_host_get) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_server_host_get. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_host);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_server_port_set) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_server_port_set. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_port = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_server_port_get) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_server_port_get. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_port);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_loom_username_set) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_loom_username_set. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->loom_username = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_loom_username_get) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_loom_username_get. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->loom_username);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_namefield_id_set) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_namefield_id_set. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->namefield_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_namefield_id_get) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__LoomServer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_namefield_id_get. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->namefield_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_LoomServer_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::LoomServer *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of LoomServer_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::LoomServer *)OTDB::LoomServer::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__LoomServer, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ContactNym(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::ContactNym *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__ContactNym TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::ContactNym resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_gui_label_set) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_gui_label_set. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_gui_label_get) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_gui_label_get. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_nym_type_set) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_nym_type_set. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->nym_type = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_nym_type_get) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_nym_type_get. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->nym_type);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_nym_id_set) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_nym_id_set. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->nym_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_nym_id_get) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_nym_id_get. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->nym_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_public_key_set) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_public_key_set. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->public_key = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_public_key_get) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_public_key_get. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->public_key);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_memo_set) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_memo_set. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->memo = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_memo_get) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_memo_get. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->memo);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_GetServerInfoCount) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_GetServerInfoCount. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetServerInfoCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_GetServerInfo) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::ServerInfo *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_GetServerInfo. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::ServerInfo *)(arg1)->GetServerInfo(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__ServerInfo, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_RemoveServerInfo) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_RemoveServerInfo. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveServerInfo(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_AddServerInfo) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  OTDB::ServerInfo *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactNym, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_AddServerInfo. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__ServerInfo, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of ContactNym_AddServerInfo. Expected SWIGTYPE_p_OTDB__ServerInfo");
    }
  }
  result = (bool)(arg1)->AddServerInfo(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactNym_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::ContactNym *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactNym_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::ContactNym *)OTDB::ContactNym::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__ContactNym, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_WalletData(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::WalletData *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__WalletData TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::WalletData resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_GetBitcoinServerCount) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_GetBitcoinServerCount. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetBitcoinServerCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_GetBitcoinServer) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::BitcoinServer *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_GetBitcoinServer. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::BitcoinServer *)(arg1)->GetBitcoinServer(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__BitcoinServer, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_RemoveBitcoinServer) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_RemoveBitcoinServer. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveBitcoinServer(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_AddBitcoinServer) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::BitcoinServer *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_AddBitcoinServer. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__BitcoinServer, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of WalletData_AddBitcoinServer. Expected SWIGTYPE_p_OTDB__BitcoinServer");
    }
  }
  result = (bool)(arg1)->AddBitcoinServer(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_GetBitcoinAcctCount) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_GetBitcoinAcctCount. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetBitcoinAcctCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_GetBitcoinAcct) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::BitcoinAcct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_GetBitcoinAcct. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::BitcoinAcct *)(arg1)->GetBitcoinAcct(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__BitcoinAcct, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_RemoveBitcoinAcct) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_RemoveBitcoinAcct. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveBitcoinAcct(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_AddBitcoinAcct) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::BitcoinAcct *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_AddBitcoinAcct. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__BitcoinAcct, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of WalletData_AddBitcoinAcct. Expected SWIGTYPE_p_OTDB__BitcoinAcct");
    }
  }
  result = (bool)(arg1)->AddBitcoinAcct(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_GetRippleServerCount) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_GetRippleServerCount. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetRippleServerCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_GetRippleServer) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::RippleServer *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_GetRippleServer. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::RippleServer *)(arg1)->GetRippleServer(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__RippleServer, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_RemoveRippleServer) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_RemoveRippleServer. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveRippleServer(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_AddRippleServer) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::RippleServer *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_AddRippleServer. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__RippleServer, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of WalletData_AddRippleServer. Expected SWIGTYPE_p_OTDB__RippleServer");
    }
  }
  result = (bool)(arg1)->AddRippleServer(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_GetLoomServerCount) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_GetLoomServerCount. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetLoomServerCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_GetLoomServer) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::LoomServer *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_GetLoomServer. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::LoomServer *)(arg1)->GetLoomServer(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__LoomServer, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_RemoveLoomServer) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_RemoveLoomServer. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveLoomServer(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_AddLoomServer) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::LoomServer *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__WalletData, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_AddLoomServer. Expected SWIGTYPE_p_OTDB__WalletData");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__LoomServer, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of WalletData_AddLoomServer. Expected SWIGTYPE_p_OTDB__LoomServer");
    }
  }
  result = (bool)(arg1)->AddLoomServer(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_WalletData_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::WalletData *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of WalletData_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::WalletData *)OTDB::WalletData::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__WalletData, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_ContactAcct(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::ContactAcct *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__ContactAcct TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::ContactAcct resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_gui_label_set) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_gui_label_set. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_gui_label_get) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_gui_label_get. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_server_type_set) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_server_type_set. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_type = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_server_type_get) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_server_type_get. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_type);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_server_id_set) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_server_id_set. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->server_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_server_id_get) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_server_id_get. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->server_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_asset_type_id_set) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_asset_type_id_set. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->asset_type_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_asset_type_id_get) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_asset_type_id_get. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->asset_type_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_acct_id_set) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_acct_id_set. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->acct_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_acct_id_get) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_acct_id_get. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->acct_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_nym_id_set) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_nym_id_set. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->nym_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_nym_id_get) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_nym_id_get. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->nym_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_memo_set) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_memo_set. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->memo = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_memo_get) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_memo_get. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->memo);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_public_key_set) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_public_key_set. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->public_key = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_public_key_get) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_public_key_get. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->public_key);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_ContactAcct_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::ContactAcct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of ContactAcct_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::ContactAcct *)OTDB::ContactAcct::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__ContactAcct, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_Contact(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::Contact *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__Contact TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::Contact resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_gui_label_set) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_gui_label_set. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->gui_label = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_gui_label_get) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_gui_label_get. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->gui_label);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_contact_id_set) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_contact_id_set. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->contact_id = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_contact_id_get) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_contact_id_get. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->contact_id);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_email_set) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_email_set. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->email = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_email_get) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_email_get. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->email);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_memo_set) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_memo_set. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->memo = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_memo_get) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_memo_get. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->memo);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_public_key_set) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_public_key_set. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  convert_to_string_ex(args[1]);
  temp2.assign(Z_STRVAL_PP(args[1]), Z_STRLEN_PP(args[1]));
  arg2 = &temp2;
  
  if (arg1) (arg1)->public_key = *arg2;
  
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_public_key_get) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  zval **args[1];
  std::string *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_public_key_get. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (std::string *) & ((arg1)->public_key);
  
  ZVAL_STRINGL(return_value, const_cast<char*>(result->data()), result->size(), 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_GetContactNymCount) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_GetContactNymCount. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetContactNymCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_GetContactNym) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::ContactNym *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_GetContactNym. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::ContactNym *)(arg1)->GetContactNym(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__ContactNym, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_RemoveContactNym) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_RemoveContactNym. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveContactNym(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_AddContactNym) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  OTDB::ContactNym *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_AddContactNym. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__ContactNym, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Contact_AddContactNym. Expected SWIGTYPE_p_OTDB__ContactNym");
    }
  }
  result = (bool)(arg1)->AddContactNym(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_GetContactAcctCount) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_GetContactAcctCount. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetContactAcctCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_GetContactAcct) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::ContactAcct *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_GetContactAcct. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::ContactAcct *)(arg1)->GetContactAcct(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__ContactAcct, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_RemoveContactAcct) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_RemoveContactAcct. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveContactAcct(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_AddContactAcct) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  OTDB::ContactAcct *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Contact, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_AddContactAcct. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__ContactAcct, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of Contact_AddContactAcct. Expected SWIGTYPE_p_OTDB__ContactAcct");
    }
  }
  result = (bool)(arg1)->AddContactAcct(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_Contact_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::Contact *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of Contact_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::Contact *)OTDB::Contact::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Contact, 0);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_AddressBook(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (OTDB::AddressBook *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_OTDB__AddressBook TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "OTDB::AddressBook resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AddressBook_GetContactCount) {
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  zval **args[1];
  size_t result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AddressBook, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AddressBook_GetContactCount. Expected SWIGTYPE_p_OTDB__AddressBook");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (arg1)->GetContactCount();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AddressBook_GetContact) {
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  size_t arg2 ;
  zval **args[2];
  OTDB::Contact *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AddressBook, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AddressBook_GetContact. Expected SWIGTYPE_p_OTDB__AddressBook");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (OTDB::Contact *)(arg1)->GetContact(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__Contact, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AddressBook_RemoveContact) {
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  size_t arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AddressBook, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AddressBook_RemoveContact. Expected SWIGTYPE_p_OTDB__AddressBook");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:d:\Users\Cameron Garnham\Documents\dev\swigwin-2.0.8\Lib\php\utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (size_t) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->RemoveContact(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AddressBook_AddContact) {
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  OTDB::Contact *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__AddressBook, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AddressBook_AddContact. Expected SWIGTYPE_p_OTDB__AddressBook");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_OTDB__Contact, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of AddressBook_AddContact. Expected SWIGTYPE_p_OTDB__Contact");
    }
  }
  result = (bool)(arg1)->AddContact(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_AddressBook_ot_dynamic_cast) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  zval **args[1];
  OTDB::AddressBook *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_OTDB__Storable, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of AddressBook_ot_dynamic_cast. Expected SWIGTYPE_p_OTDB__Storable");
    }
  }
  result = (OTDB::AddressBook *)OTDB::AddressBook::ot_dynamic_cast(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_OTDB__AddressBook, 0);
  
  return;
fail:
  SWIG_FAIL();
}


static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__vectorT_unsigned_char_t) {
  /* No destructor for simple type _p_std__vectorT_unsigned_char_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__Storage) {
  __wrap_delete_Storage(rsrc, SWIGTYPE_p_OTDB__Storage->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__BitcoinAcct) {
  __wrap_delete_BitcoinAcct(rsrc, SWIGTYPE_p_OTDB__BitcoinAcct->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__BidData) {
  __wrap_delete_BidData(rsrc, SWIGTYPE_p_OTDB__BidData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTPassword) {
  __wrap_delete_OTPassword(rsrc, SWIGTYPE_p_OTPassword->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__Blob) {
  __wrap_delete_Blob(rsrc, SWIGTYPE_p_OTDB__Blob->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__TradeListNym) {
  __wrap_delete_TradeListNym(rsrc, SWIGTYPE_p_OTDB__TradeListNym->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__OfferListNym) {
  __wrap_delete_OfferListNym(rsrc, SWIGTYPE_p_OTDB__OfferListNym->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__ContactAcct) {
  __wrap_delete_ContactAcct(rsrc, SWIGTYPE_p_OTDB__ContactAcct->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_char) {
  /* No destructor for simple type _p_char */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__TradeListMarket) {
  __wrap_delete_TradeListMarket(rsrc, SWIGTYPE_p_OTDB__TradeListMarket->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__OfferListMarket) {
  __wrap_delete_OfferListMarket(rsrc, SWIGTYPE_p_OTDB__OfferListMarket->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_uint8_t) {
  /* No destructor for simple type _p_uint8_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__WalletData) {
  __wrap_delete_WalletData(rsrc, SWIGTYPE_p_OTDB__WalletData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_void) {
  /* No destructor for simple type _p_void */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_void) {
  /* No destructor for simple type _p_p_void */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__StringMap) {
  __wrap_delete_StringMap(rsrc, SWIGTYPE_p_OTDB__StringMap->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_int) {
  /* No destructor for simple type _int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__BitcoinServer) {
  __wrap_delete_BitcoinServer(rsrc, SWIGTYPE_p_OTDB__BitcoinServer->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__Displayable) {
  __wrap_delete_Displayable(rsrc, SWIGTYPE_p_OTDB__Displayable->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTPacker) {
  /* No destructor for simple type _p_OTPacker */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__AskData) {
  __wrap_delete_AskData(rsrc, SWIGTYPE_p_OTDB__AskData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__OTDBString) {
  __wrap_delete_OTDBString(rsrc, SWIGTYPE_p_OTDB__OTDBString->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__TradeDataMarket) {
  __wrap_delete_TradeDataMarket(rsrc, SWIGTYPE_p_OTDB__TradeDataMarket->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__OfferDataMarket) {
  __wrap_delete_OfferDataMarket(rsrc, SWIGTYPE_p_OTDB__OfferDataMarket->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__Acct) {
  __wrap_delete_Acct(rsrc, SWIGTYPE_p_OTDB__Acct->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__ContactNym) {
  __wrap_delete_ContactNym(rsrc, SWIGTYPE_p_OTDB__ContactNym->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__ServerInfo) {
  __wrap_delete_ServerInfo(rsrc, SWIGTYPE_p_OTDB__ServerInfo->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__Contact) {
  __wrap_delete_Contact(rsrc, SWIGTYPE_p_OTDB__Contact->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTCaller) {
  __wrap_delete_OTCaller(rsrc, SWIGTYPE_p_OTCaller->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__Server) {
  __wrap_delete_Server(rsrc, SWIGTYPE_p_OTDB__Server->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__RippleServer) {
  __wrap_delete_RippleServer(rsrc, SWIGTYPE_p_OTDB__RippleServer->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__LoomServer) {
  __wrap_delete_LoomServer(rsrc, SWIGTYPE_p_OTDB__LoomServer->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__Storable) {
  __wrap_delete_Storable(rsrc, SWIGTYPE_p_OTDB__Storable->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__AddressBook) {
  __wrap_delete_AddressBook(rsrc, SWIGTYPE_p_OTDB__AddressBook->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTCallback) {
  __wrap_delete_OTCallback(rsrc, SWIGTYPE_p_OTCallback->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_uint32_t) {
  /* No destructor for simple type _p_uint32_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_int32_t) {
  /* No destructor for simple type _p_int32_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__TradeDataNym) {
  __wrap_delete_TradeDataNym(rsrc, SWIGTYPE_p_OTDB__TradeDataNym->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__OfferDataNym) {
  __wrap_delete_OfferDataNym(rsrc, SWIGTYPE_p_OTDB__OfferDataNym->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__MarketData) {
  __wrap_delete_MarketData(rsrc, SWIGTYPE_p_OTDB__MarketData->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_std__mapT_std__string_std__string_t) {
  /* No destructor for simple type _p_std__mapT_std__string_std__string_t */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_OTDB__MarketList) {
  __wrap_delete_MarketList(rsrc, SWIGTYPE_p_OTDB__MarketList->name TSRMLS_CC);
}
/* end wrapper section */
/* class entry subsection */


/* entry subsection */
/* Every non-class user visible function must have an entry here */
static zend_function_entry otapi_functions[] = {
 SWIG_ZEND_NAMED_FE(otpassword_m_theblocksize_get,_wrap_OTPassword_m_theBlockSize_get,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_ispassword,_wrap_OTPassword_isPassword,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_getpassword_uint8,_wrap_OTPassword_getPassword_uint8,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_getpassword,_wrap_OTPassword_getPassword,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_getpasswordwritable,_wrap_OTPassword_getPasswordWritable,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_getpasswordwritable_char,_wrap_OTPassword_getPasswordWritable_char,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_setpassword,_wrap_OTPassword_setPassword,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_setpassword_uint8,_wrap_OTPassword_setPassword_uint8,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_addchar,_wrap_OTPassword_addChar,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_randomizepassword_uint8,_wrap_OTPassword_randomizePassword_uint8,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_randomizepassword,_wrap_OTPassword_randomizePassword,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_ismemory,_wrap_OTPassword_isMemory,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_getmemory,_wrap_OTPassword_getMemory,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_getmemory_uint8,_wrap_OTPassword_getMemory_uint8,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_getmemorywritable,_wrap_OTPassword_getMemoryWritable,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_setmemory,_wrap_OTPassword_setMemory,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_addmemory,_wrap_OTPassword_addMemory,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_randomizememory_uint8,_wrap_OTPassword_randomizeMemory_uint8,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_randomizememory,_wrap_OTPassword_randomizeMemory,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_getblocksize,_wrap_OTPassword_getBlockSize,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_compare,_wrap_OTPassword_Compare,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_getpasswordsize,_wrap_OTPassword_getPasswordSize,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_getmemorysize,_wrap_OTPassword_getMemorySize,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_zeromemory,_wrap_OTPassword_zeroMemory,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_safe_memcpy,_wrap_OTPassword_safe_memcpy,NULL)
 SWIG_ZEND_NAMED_FE(otpassword_createtextbuffer,_wrap_OTPassword_CreateTextBuffer,NULL)
 SWIG_ZEND_NAMED_FE(new_otpassword,_wrap_new_OTPassword,NULL)
 SWIG_ZEND_NAMED_FE(new_otcallback,_wrap_new_OTCallback,NULL)
 SWIG_ZEND_NAMED_FE(otcallback_runone,_wrap_OTCallback_runOne,NULL)
 SWIG_ZEND_NAMED_FE(otcallback_runtwo,_wrap_OTCallback_runTwo,NULL)
 SWIG_ZEND_NAMED_FE(new_otcaller,_wrap_new_OTCaller,NULL)
 SWIG_ZEND_NAMED_FE(otcaller_getpassword,_wrap_OTCaller_GetPassword,NULL)
 SWIG_ZEND_NAMED_FE(otcaller_zerooutpassword,_wrap_OTCaller_ZeroOutPassword,NULL)
 SWIG_ZEND_NAMED_FE(otcaller_getdisplay,_wrap_OTCaller_GetDisplay,NULL)
 SWIG_ZEND_NAMED_FE(otcaller_setdisplay,_wrap_OTCaller_SetDisplay,NULL)
 SWIG_ZEND_NAMED_FE(otcaller_delcallback,_wrap_OTCaller_delCallback,NULL)
 SWIG_ZEND_NAMED_FE(otcaller_setcallback,_wrap_OTCaller_setCallback,NULL)
 SWIG_ZEND_NAMED_FE(otcaller_iscallbackset,_wrap_OTCaller_isCallbackSet,NULL)
 SWIG_ZEND_NAMED_FE(otcaller_callone,_wrap_OTCaller_callOne,NULL)
 SWIG_ZEND_NAMED_FE(otcaller_calltwo,_wrap_OTCaller_callTwo,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_set_passwordcallback,_wrap_OT_API_Set_PasswordCallback,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_init,_wrap_OT_API_Init,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_cleanup,_wrap_OT_API_Cleanup,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_setwallet,_wrap_OT_API_SetWallet,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadwallet,_wrap_OT_API_LoadWallet,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_switchwallet,_wrap_OT_API_SwitchWallet,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_output,_wrap_OT_API_Output,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_gettime,_wrap_OT_API_GetTime,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_numlist_add,_wrap_OT_API_NumList_Add,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_numlist_remove,_wrap_OT_API_NumList_Remove,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_numlist_verifyquery,_wrap_OT_API_NumList_VerifyQuery,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_numlist_verifyall,_wrap_OT_API_NumList_VerifyAll,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_numlist_count,_wrap_OT_API_NumList_Count,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_encode,_wrap_OT_API_Encode,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_decode,_wrap_OT_API_Decode,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_encrypt,_wrap_OT_API_Encrypt,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_decrypt,_wrap_OT_API_Decrypt,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_createsymmetrickey,_wrap_OT_API_CreateSymmetricKey,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_symmetricencrypt,_wrap_OT_API_SymmetricEncrypt,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_symmetricdecrypt,_wrap_OT_API_SymmetricDecrypt,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_signcontract,_wrap_OT_API_SignContract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_flatsign,_wrap_OT_API_FlatSign,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_addsignature,_wrap_OT_API_AddSignature,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_verifysignature,_wrap_OT_API_VerifySignature,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_verifyandretrievexmlcontents,_wrap_OT_API_VerifyAndRetrieveXMLContents,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getmemlogsize,_wrap_OT_API_GetMemlogSize,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getmemlogatindex,_wrap_OT_API_GetMemlogAtIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_peekmemlogfront,_wrap_OT_API_PeekMemlogFront,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_peekmemlogback,_wrap_OT_API_PeekMemlogBack,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_popmemlogfront,_wrap_OT_API_PopMemlogFront,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_popmemlogback,_wrap_OT_API_PopMemlogBack,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_createnym,_wrap_OT_API_CreateNym,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_createservercontract,_wrap_OT_API_CreateServerContract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_createassetcontract,_wrap_OT_API_CreateAssetContract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_addservercontract,_wrap_OT_API_AddServerContract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_addassetcontract,_wrap_OT_API_AddAssetContract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getservercount,_wrap_OT_API_GetServerCount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getassettypecount,_wrap_OT_API_GetAssetTypeCount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getaccountcount,_wrap_OT_API_GetAccountCount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnymcount,_wrap_OT_API_GetNymCount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getserver_id,_wrap_OT_API_GetServer_ID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getserver_name,_wrap_OT_API_GetServer_Name,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getserver_contract,_wrap_OT_API_GetServer_Contract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getassettype_id,_wrap_OT_API_GetAssetType_ID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getassettype_name,_wrap_OT_API_GetAssetType_Name,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getassettype_contract,_wrap_OT_API_GetAssetType_Contract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_formatamount,_wrap_OT_API_FormatAmount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getaccountwallet_id,_wrap_OT_API_GetAccountWallet_ID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getaccountwallet_name,_wrap_OT_API_GetAccountWallet_Name,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getaccountwallet_balance,_wrap_OT_API_GetAccountWallet_Balance,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getaccountwallet_type,_wrap_OT_API_GetAccountWallet_Type,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getaccountwallet_assettypeid,_wrap_OT_API_GetAccountWallet_AssetTypeID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getaccountwallet_serverid,_wrap_OT_API_GetAccountWallet_ServerID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getaccountwallet_nymid,_wrap_OT_API_GetAccountWallet_NymID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getaccountwallet_inboxhash,_wrap_OT_API_GetAccountWallet_InboxHash,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getaccountwallet_outboxhash,_wrap_OT_API_GetAccountWallet_OutboxHash,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_verifyaccountreceipt,_wrap_OT_API_VerifyAccountReceipt,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_transactionnumcount,_wrap_OT_API_GetNym_TransactionNumCount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_id,_wrap_OT_API_GetNym_ID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_name,_wrap_OT_API_GetNym_Name,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_stats,_wrap_OT_API_GetNym_Stats,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_nymboxhash,_wrap_OT_API_GetNym_NymboxHash,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_recenthash,_wrap_OT_API_GetNym_RecentHash,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_inboxhash,_wrap_OT_API_GetNym_InboxHash,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_outboxhash,_wrap_OT_API_GetNym_OutboxHash,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_isnym_registeredatserver,_wrap_OT_API_IsNym_RegisteredAtServer,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_mailcount,_wrap_OT_API_GetNym_MailCount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_mailcontentsbyindex,_wrap_OT_API_GetNym_MailContentsByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_mailsenderidbyindex,_wrap_OT_API_GetNym_MailSenderIDByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_mailserveridbyindex,_wrap_OT_API_GetNym_MailServerIDByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_nym_removemailbyindex,_wrap_OT_API_Nym_RemoveMailByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_nym_verifymailbyindex,_wrap_OT_API_Nym_VerifyMailByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_outmailcount,_wrap_OT_API_GetNym_OutmailCount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_outmailcontentsbyindex,_wrap_OT_API_GetNym_OutmailContentsByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_outmailrecipientidbyindex,_wrap_OT_API_GetNym_OutmailRecipientIDByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_outmailserveridbyindex,_wrap_OT_API_GetNym_OutmailServerIDByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_nym_removeoutmailbyindex,_wrap_OT_API_Nym_RemoveOutmailByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_nym_verifyoutmailbyindex,_wrap_OT_API_Nym_VerifyOutmailByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_outpaymentscount,_wrap_OT_API_GetNym_OutpaymentsCount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_outpaymentscontentsbyindex,_wrap_OT_API_GetNym_OutpaymentsContentsByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_outpaymentsrecipientidbyindex,_wrap_OT_API_GetNym_OutpaymentsRecipientIDByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_outpaymentsserveridbyindex,_wrap_OT_API_GetNym_OutpaymentsServerIDByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_nym_removeoutpaymentsbyindex,_wrap_OT_API_Nym_RemoveOutpaymentsByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_nym_verifyoutpaymentsbyindex,_wrap_OT_API_Nym_VerifyOutpaymentsByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_canremoveserver,_wrap_OT_API_Wallet_CanRemoveServer,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_removeserver,_wrap_OT_API_Wallet_RemoveServer,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_canremoveassettype,_wrap_OT_API_Wallet_CanRemoveAssetType,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_removeassettype,_wrap_OT_API_Wallet_RemoveAssetType,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_canremovenym,_wrap_OT_API_Wallet_CanRemoveNym,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_removenym,_wrap_OT_API_Wallet_RemoveNym,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_canremoveaccount,_wrap_OT_API_Wallet_CanRemoveAccount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_changepassphrase,_wrap_OT_API_Wallet_ChangePassphrase,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_exportnym,_wrap_OT_API_Wallet_ExportNym,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_importnym,_wrap_OT_API_Wallet_ImportNym,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_importcert,_wrap_OT_API_Wallet_ImportCert,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_exportcert,_wrap_OT_API_Wallet_ExportCert,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_getnymidfrompartial,_wrap_OT_API_Wallet_GetNymIDFromPartial,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_getserveridfrompartial,_wrap_OT_API_Wallet_GetServerIDFromPartial,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_getassetidfrompartial,_wrap_OT_API_Wallet_GetAssetIDFromPartial,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_getaccountidfrompartial,_wrap_OT_API_Wallet_GetAccountIDFromPartial,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_setnym_name,_wrap_OT_API_SetNym_Name,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_setaccountwallet_name,_wrap_OT_API_SetAccountWallet_Name,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_setassettype_name,_wrap_OT_API_SetAssetType_Name,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_setserver_name,_wrap_OT_API_SetServer_Name,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_writecheque,_wrap_OT_API_WriteCheque,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_discardcheque,_wrap_OT_API_DiscardCheque,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_proposepaymentplan,_wrap_OT_API_ProposePaymentPlan,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_confirmpaymentplan,_wrap_OT_API_ConfirmPaymentPlan,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_create_smartcontract,_wrap_OT_API_Create_SmartContract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_smartcontract_addbylaw,_wrap_OT_API_SmartContract_AddBylaw,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_smartcontract_addclause,_wrap_OT_API_SmartContract_AddClause,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_smartcontract_addvariable,_wrap_OT_API_SmartContract_AddVariable,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_smartcontract_addcallback,_wrap_OT_API_SmartContract_AddCallback,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_smartcontract_addhook,_wrap_OT_API_SmartContract_AddHook,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_smartcontract_addparty,_wrap_OT_API_SmartContract_AddParty,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_smartcontract_addaccount,_wrap_OT_API_SmartContract_AddAccount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_smartcontract_countnumsneeded,_wrap_OT_API_SmartContract_CountNumsNeeded,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_smartcontract_confirmaccount,_wrap_OT_API_SmartContract_ConfirmAccount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_smartcontract_confirmparty,_wrap_OT_API_SmartContract_ConfirmParty,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_activatesmartcontract,_wrap_OT_API_activateSmartContract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_triggerclause,_wrap_OT_API_triggerClause,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_msg_harvesttransactionnumbers,_wrap_OT_API_Msg_HarvestTransactionNumbers,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loaduserpubkey,_wrap_OT_API_LoadUserPubkey,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadpubkey,_wrap_OT_API_LoadPubkey,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_verifyuserprivatekey,_wrap_OT_API_VerifyUserPrivateKey,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadpurse,_wrap_OT_API_LoadPurse,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadmint,_wrap_OT_API_LoadMint,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadassetcontract,_wrap_OT_API_LoadAssetContract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadservercontract,_wrap_OT_API_LoadServerContract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_mint_isstillgood,_wrap_OT_API_Mint_IsStillGood,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_isbasketcurrency,_wrap_OT_API_IsBasketCurrency,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_basket_getmembercount,_wrap_OT_API_Basket_GetMemberCount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_basket_getmembertype,_wrap_OT_API_Basket_GetMemberType,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_basket_getminimumtransferamount,_wrap_OT_API_Basket_GetMinimumTransferAmount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_basket_getmemberminimumtransferamount,_wrap_OT_API_Basket_GetMemberMinimumTransferAmount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadassetaccount,_wrap_OT_API_LoadAssetAccount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadinbox,_wrap_OT_API_LoadInbox,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadoutbox,_wrap_OT_API_LoadOutbox,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadinboxnoverify,_wrap_OT_API_LoadInboxNoVerify,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadoutboxnoverify,_wrap_OT_API_LoadOutboxNoVerify,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadpaymentinbox,_wrap_OT_API_LoadPaymentInbox,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadpaymentinboxnoverify,_wrap_OT_API_LoadPaymentInboxNoVerify,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadrecordbox,_wrap_OT_API_LoadRecordBox,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadrecordboxnoverify,_wrap_OT_API_LoadRecordBoxNoVerify,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_ledger_getcount,_wrap_OT_API_Ledger_GetCount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_ledger_createresponse,_wrap_OT_API_Ledger_CreateResponse,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_ledger_gettransactionbyindex,_wrap_OT_API_Ledger_GetTransactionByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_ledger_gettransactionbyid,_wrap_OT_API_Ledger_GetTransactionByID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_ledger_gettransactionidbyindex,_wrap_OT_API_Ledger_GetTransactionIDByIndex,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_ledger_addtransaction,_wrap_OT_API_Ledger_AddTransaction,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_createresponse,_wrap_OT_API_Transaction_CreateResponse,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_ledger_finalizeresponse,_wrap_OT_API_Ledger_FinalizeResponse,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_ledger_getinstrument,_wrap_OT_API_Ledger_GetInstrument,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_gettype,_wrap_OT_API_Transaction_GetType,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_replynotice_getrequestnum,_wrap_OT_API_ReplyNotice_GetRequestNum,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_getvoucher,_wrap_OT_API_Transaction_GetVoucher,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_getsuccess,_wrap_OT_API_Transaction_GetSuccess,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_getbalanceagreementsuccess,_wrap_OT_API_Transaction_GetBalanceAgreementSuccess,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_getdatesigned,_wrap_OT_API_Transaction_GetDateSigned,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_getamount,_wrap_OT_API_Transaction_GetAmount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_pending_getnote,_wrap_OT_API_Pending_GetNote,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_getsenderuserid,_wrap_OT_API_Transaction_GetSenderUserID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_getsenderacctid,_wrap_OT_API_Transaction_GetSenderAcctID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_getrecipientuserid,_wrap_OT_API_Transaction_GetRecipientUserID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_getrecipientacctid,_wrap_OT_API_Transaction_GetRecipientAcctID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_transaction_getdisplayreferencetonum,_wrap_OT_API_Transaction_GetDisplayReferenceToNum,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_savepurse,_wrap_OT_API_SavePurse,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_createpurse,_wrap_OT_API_CreatePurse,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_createpurse_passphrase,_wrap_OT_API_CreatePurse_Passphrase,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_purse_gettotalvalue,_wrap_OT_API_Purse_GetTotalValue,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_purse_count,_wrap_OT_API_Purse_Count,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_purse_haspassword,_wrap_OT_API_Purse_HasPassword,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_purse_peek,_wrap_OT_API_Purse_Peek,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_purse_pop,_wrap_OT_API_Purse_Pop,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_purse_push,_wrap_OT_API_Purse_Push,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_purse_empty,_wrap_OT_API_Purse_Empty,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_wallet_importpurse,_wrap_OT_API_Wallet_ImportPurse,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_exchangepurse,_wrap_OT_API_exchangePurse,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_token_changeowner,_wrap_OT_API_Token_ChangeOwner,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_token_getid,_wrap_OT_API_Token_GetID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_token_getdenomination,_wrap_OT_API_Token_GetDenomination,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_token_getseries,_wrap_OT_API_Token_GetSeries,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_token_getvalidfrom,_wrap_OT_API_Token_GetValidFrom,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_token_getvalidto,_wrap_OT_API_Token_GetValidTo,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_token_getassetid,_wrap_OT_API_Token_GetAssetID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_token_getserverid,_wrap_OT_API_Token_GetServerID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_getamount,_wrap_OT_API_Instrmnt_GetAmount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_gettransnum,_wrap_OT_API_Instrmnt_GetTransNum,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_getvalidfrom,_wrap_OT_API_Instrmnt_GetValidFrom,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_getvalidto,_wrap_OT_API_Instrmnt_GetValidTo,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_getmemo,_wrap_OT_API_Instrmnt_GetMemo,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_gettype,_wrap_OT_API_Instrmnt_GetType,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_getserverid,_wrap_OT_API_Instrmnt_GetServerID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_getassetid,_wrap_OT_API_Instrmnt_GetAssetID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_getsenderuserid,_wrap_OT_API_Instrmnt_GetSenderUserID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_getsenderacctid,_wrap_OT_API_Instrmnt_GetSenderAcctID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_getrecipientuserid,_wrap_OT_API_Instrmnt_GetRecipientUserID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_instrmnt_getrecipientacctid,_wrap_OT_API_Instrmnt_GetRecipientAcctID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_checkserverid,_wrap_OT_API_checkServerID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_createuseraccount,_wrap_OT_API_createUserAccount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_deleteuseraccount,_wrap_OT_API_deleteUserAccount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_deleteassetaccount,_wrap_OT_API_deleteAssetAccount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_usagecredits,_wrap_OT_API_usageCredits,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_getusagecredits,_wrap_OT_API_Message_GetUsageCredits,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_checkuser,_wrap_OT_API_checkUser,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_sendusermessage,_wrap_OT_API_sendUserMessage,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_senduserinstrument,_wrap_OT_API_sendUserInstrument,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getrequest,_wrap_OT_API_getRequest,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_gettransactionnumber,_wrap_OT_API_getTransactionNumber,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_issueassettype,_wrap_OT_API_issueAssetType,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getcontract,_wrap_OT_API_getContract,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getmint,_wrap_OT_API_getMint,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_createassetaccount,_wrap_OT_API_createAssetAccount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getaccount,_wrap_OT_API_getAccount,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_generatebasketcreation,_wrap_OT_API_GenerateBasketCreation,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_addbasketcreationitem,_wrap_OT_API_AddBasketCreationItem,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_issuebasket,_wrap_OT_API_issueBasket,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_generatebasketexchange,_wrap_OT_API_GenerateBasketExchange,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_addbasketexchangeitem,_wrap_OT_API_AddBasketExchangeItem,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_exchangebasket,_wrap_OT_API_exchangeBasket,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_notarizewithdrawal,_wrap_OT_API_notarizeWithdrawal,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_notarizedeposit,_wrap_OT_API_notarizeDeposit,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_notarizetransfer,_wrap_OT_API_notarizeTransfer,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getinbox,_wrap_OT_API_getInbox,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getoutbox,_wrap_OT_API_getOutbox,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnymbox,_wrap_OT_API_getNymbox,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadnymbox,_wrap_OT_API_LoadNymbox,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_loadnymboxnoverify,_wrap_OT_API_LoadNymboxNoVerify,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_nymbox_getreplynotice,_wrap_OT_API_Nymbox_GetReplyNotice,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_havealreadyseenreply,_wrap_OT_API_HaveAlreadySeenReply,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getboxreceipt,_wrap_OT_API_getBoxReceipt,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_doesboxreceiptexist,_wrap_OT_API_DoesBoxReceiptExist,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_processinbox,_wrap_OT_API_processInbox,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_processnymbox,_wrap_OT_API_processNymbox,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_withdrawvoucher,_wrap_OT_API_withdrawVoucher,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_paydividend,_wrap_OT_API_payDividend,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_depositcheque,_wrap_OT_API_depositCheque,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_depositpaymentplan,_wrap_OT_API_depositPaymentPlan,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_issuemarketoffer,_wrap_OT_API_issueMarketOffer,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getmarketlist,_wrap_OT_API_getMarketList,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getmarketoffers,_wrap_OT_API_getMarketOffers,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getmarketrecenttrades,_wrap_OT_API_getMarketRecentTrades,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getnym_marketoffers,_wrap_OT_API_getNym_MarketOffers,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_cancelmarketoffer,_wrap_OT_API_cancelMarketOffer,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_cancelpaymentplan,_wrap_OT_API_cancelPaymentPlan,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_popmessagebuffer,_wrap_OT_API_PopMessageBuffer,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_flushmessagebuffer,_wrap_OT_API_FlushMessageBuffer,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_getsentmessage,_wrap_OT_API_GetSentMessage,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_removesentmessage,_wrap_OT_API_RemoveSentMessage,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_flushsentmessages,_wrap_OT_API_FlushSentMessages,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_sleep,_wrap_OT_API_Sleep,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_resyncnymwithserver,_wrap_OT_API_ResyncNymWithServer,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_getcommand,_wrap_OT_API_Message_GetCommand,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_getsuccess,_wrap_OT_API_Message_GetSuccess,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_queryassettypes,_wrap_OT_API_queryAssetTypes,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_getpayload,_wrap_OT_API_Message_GetPayload,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_getdepth,_wrap_OT_API_Message_GetDepth,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_gettransactionsuccess,_wrap_OT_API_Message_GetTransactionSuccess,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_getbalanceagreementsuccess,_wrap_OT_API_Message_GetBalanceAgreementSuccess,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_getledger,_wrap_OT_API_Message_GetLedger,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_getnewassettypeid,_wrap_OT_API_Message_GetNewAssetTypeID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_getnewissueracctid,_wrap_OT_API_Message_GetNewIssuerAcctID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_getnewacctid,_wrap_OT_API_Message_GetNewAcctID,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_message_getnymboxhash,_wrap_OT_API_Message_GetNymboxHash,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_connectserver,_wrap_OT_API_ConnectServer,NULL)
 SWIG_ZEND_NAMED_FE(ot_api_processsockets,_wrap_OT_API_ProcessSockets,NULL)
 SWIG_ZEND_NAMED_FE(storable_create,_wrap_Storable_Create,NULL)
 SWIG_ZEND_NAMED_FE(storable_ot_dynamic_cast,_wrap_Storable_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(storage_getpacker,_wrap_Storage_GetPacker,NULL)
 SWIG_ZEND_NAMED_FE(storage_exists,_wrap_Storage_Exists,NULL)
 SWIG_ZEND_NAMED_FE(storage_storestring,_wrap_Storage_StoreString,NULL)
 SWIG_ZEND_NAMED_FE(storage_querystring,_wrap_Storage_QueryString,NULL)
 SWIG_ZEND_NAMED_FE(storage_storeplainstring,_wrap_Storage_StorePlainString,NULL)
 SWIG_ZEND_NAMED_FE(storage_queryplainstring,_wrap_Storage_QueryPlainString,NULL)
 SWIG_ZEND_NAMED_FE(storage_storeobject,_wrap_Storage_StoreObject,NULL)
 SWIG_ZEND_NAMED_FE(storage_queryobject,_wrap_Storage_QueryObject,NULL)
 SWIG_ZEND_NAMED_FE(storage_encodeobject,_wrap_Storage_EncodeObject,NULL)
 SWIG_ZEND_NAMED_FE(storage_decodeobject,_wrap_Storage_DecodeObject,NULL)
 SWIG_ZEND_NAMED_FE(storage_erasevaluebykey,_wrap_Storage_EraseValueByKey,NULL)
 SWIG_ZEND_NAMED_FE(storage_createobject,_wrap_Storage_CreateObject,NULL)
 SWIG_ZEND_NAMED_FE(storage_create,_wrap_Storage_Create,NULL)
 SWIG_ZEND_NAMED_FE(storage_gettype,_wrap_Storage_GetType,NULL)
 SWIG_ZEND_NAMED_FE(initdefaultstorage,_wrap_InitDefaultStorage,NULL)
 SWIG_ZEND_NAMED_FE(getdefaultstorage,_wrap_GetDefaultStorage,NULL)
 SWIG_ZEND_NAMED_FE(createstoragecontext,_wrap_CreateStorageContext,NULL)
 SWIG_ZEND_NAMED_FE(createobject,_wrap_CreateObject,NULL)
 SWIG_ZEND_NAMED_FE(exists,_wrap_Exists,NULL)
 SWIG_ZEND_NAMED_FE(storestring,_wrap_StoreString,NULL)
 SWIG_ZEND_NAMED_FE(querystring,_wrap_QueryString,NULL)
 SWIG_ZEND_NAMED_FE(storeplainstring,_wrap_StorePlainString,NULL)
 SWIG_ZEND_NAMED_FE(queryplainstring,_wrap_QueryPlainString,NULL)
 SWIG_ZEND_NAMED_FE(storeobject,_wrap_StoreObject,NULL)
 SWIG_ZEND_NAMED_FE(queryobject,_wrap_QueryObject,NULL)
 SWIG_ZEND_NAMED_FE(encodeobject,_wrap_EncodeObject,NULL)
 SWIG_ZEND_NAMED_FE(decodeobject,_wrap_DecodeObject,NULL)
 SWIG_ZEND_NAMED_FE(erasevaluebykey,_wrap_EraseValueByKey,NULL)
 SWIG_ZEND_NAMED_FE(otdbstring_m_string_set,_wrap_OTDBString_m_string_set,NULL)
 SWIG_ZEND_NAMED_FE(otdbstring_m_string_get,_wrap_OTDBString_m_string_get,NULL)
 SWIG_ZEND_NAMED_FE(otdbstring_ot_dynamic_cast,_wrap_OTDBString_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(blob_m_membuffer_set,_wrap_Blob_m_memBuffer_set,NULL)
 SWIG_ZEND_NAMED_FE(blob_m_membuffer_get,_wrap_Blob_m_memBuffer_get,NULL)
 SWIG_ZEND_NAMED_FE(blob_ot_dynamic_cast,_wrap_Blob_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(stringmap_the_map_set,_wrap_StringMap_the_map_set,NULL)
 SWIG_ZEND_NAMED_FE(stringmap_the_map_get,_wrap_StringMap_the_map_get,NULL)
 SWIG_ZEND_NAMED_FE(stringmap_setvalue,_wrap_StringMap_SetValue,NULL)
 SWIG_ZEND_NAMED_FE(stringmap_getvalue,_wrap_StringMap_GetValue,NULL)
 SWIG_ZEND_NAMED_FE(stringmap_ot_dynamic_cast,_wrap_StringMap_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(displayable_gui_label_set,_wrap_Displayable_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(displayable_gui_label_get,_wrap_Displayable_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(displayable_ot_dynamic_cast,_wrap_Displayable_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_gui_label_set,_wrap_MarketData_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_gui_label_get,_wrap_MarketData_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_server_id_set,_wrap_MarketData_server_id_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_server_id_get,_wrap_MarketData_server_id_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_market_id_set,_wrap_MarketData_market_id_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_market_id_get,_wrap_MarketData_market_id_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_asset_type_id_set,_wrap_MarketData_asset_type_id_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_asset_type_id_get,_wrap_MarketData_asset_type_id_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_currency_type_id_set,_wrap_MarketData_currency_type_id_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_currency_type_id_get,_wrap_MarketData_currency_type_id_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_scale_set,_wrap_MarketData_scale_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_scale_get,_wrap_MarketData_scale_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_total_assets_set,_wrap_MarketData_total_assets_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_total_assets_get,_wrap_MarketData_total_assets_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_number_bids_set,_wrap_MarketData_number_bids_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_number_bids_get,_wrap_MarketData_number_bids_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_number_asks_set,_wrap_MarketData_number_asks_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_number_asks_get,_wrap_MarketData_number_asks_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_last_sale_price_set,_wrap_MarketData_last_sale_price_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_last_sale_price_get,_wrap_MarketData_last_sale_price_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_current_bid_set,_wrap_MarketData_current_bid_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_current_bid_get,_wrap_MarketData_current_bid_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_current_ask_set,_wrap_MarketData_current_ask_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_current_ask_get,_wrap_MarketData_current_ask_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_volume_trades_set,_wrap_MarketData_volume_trades_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_volume_trades_get,_wrap_MarketData_volume_trades_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_volume_assets_set,_wrap_MarketData_volume_assets_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_volume_assets_get,_wrap_MarketData_volume_assets_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_volume_currency_set,_wrap_MarketData_volume_currency_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_volume_currency_get,_wrap_MarketData_volume_currency_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_recent_highest_bid_set,_wrap_MarketData_recent_highest_bid_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_recent_highest_bid_get,_wrap_MarketData_recent_highest_bid_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_recent_lowest_ask_set,_wrap_MarketData_recent_lowest_ask_set,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_recent_lowest_ask_get,_wrap_MarketData_recent_lowest_ask_get,NULL)
 SWIG_ZEND_NAMED_FE(marketdata_ot_dynamic_cast,_wrap_MarketData_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(marketlist_getmarketdatacount,_wrap_MarketList_GetMarketDataCount,NULL)
 SWIG_ZEND_NAMED_FE(marketlist_getmarketdata,_wrap_MarketList_GetMarketData,NULL)
 SWIG_ZEND_NAMED_FE(marketlist_removemarketdata,_wrap_MarketList_RemoveMarketData,NULL)
 SWIG_ZEND_NAMED_FE(marketlist_addmarketdata,_wrap_MarketList_AddMarketData,NULL)
 SWIG_ZEND_NAMED_FE(marketlist_ot_dynamic_cast,_wrap_MarketList_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(offerdatamarket_gui_label_set,_wrap_OfferDataMarket_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatamarket_gui_label_get,_wrap_OfferDataMarket_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatamarket_transaction_id_set,_wrap_OfferDataMarket_transaction_id_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatamarket_transaction_id_get,_wrap_OfferDataMarket_transaction_id_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatamarket_price_per_scale_set,_wrap_OfferDataMarket_price_per_scale_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatamarket_price_per_scale_get,_wrap_OfferDataMarket_price_per_scale_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatamarket_available_assets_set,_wrap_OfferDataMarket_available_assets_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatamarket_available_assets_get,_wrap_OfferDataMarket_available_assets_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatamarket_minimum_increment_set,_wrap_OfferDataMarket_minimum_increment_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatamarket_minimum_increment_get,_wrap_OfferDataMarket_minimum_increment_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatamarket_ot_dynamic_cast,_wrap_OfferDataMarket_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(biddata_gui_label_set,_wrap_BidData_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(biddata_gui_label_get,_wrap_BidData_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(biddata_transaction_id_set,_wrap_BidData_transaction_id_set,NULL)
 SWIG_ZEND_NAMED_FE(biddata_transaction_id_get,_wrap_BidData_transaction_id_get,NULL)
 SWIG_ZEND_NAMED_FE(biddata_price_per_scale_set,_wrap_BidData_price_per_scale_set,NULL)
 SWIG_ZEND_NAMED_FE(biddata_price_per_scale_get,_wrap_BidData_price_per_scale_get,NULL)
 SWIG_ZEND_NAMED_FE(biddata_available_assets_set,_wrap_BidData_available_assets_set,NULL)
 SWIG_ZEND_NAMED_FE(biddata_available_assets_get,_wrap_BidData_available_assets_get,NULL)
 SWIG_ZEND_NAMED_FE(biddata_minimum_increment_set,_wrap_BidData_minimum_increment_set,NULL)
 SWIG_ZEND_NAMED_FE(biddata_minimum_increment_get,_wrap_BidData_minimum_increment_get,NULL)
 SWIG_ZEND_NAMED_FE(biddata_ot_dynamic_cast,_wrap_BidData_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(askdata_gui_label_set,_wrap_AskData_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(askdata_gui_label_get,_wrap_AskData_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(askdata_transaction_id_set,_wrap_AskData_transaction_id_set,NULL)
 SWIG_ZEND_NAMED_FE(askdata_transaction_id_get,_wrap_AskData_transaction_id_get,NULL)
 SWIG_ZEND_NAMED_FE(askdata_price_per_scale_set,_wrap_AskData_price_per_scale_set,NULL)
 SWIG_ZEND_NAMED_FE(askdata_price_per_scale_get,_wrap_AskData_price_per_scale_get,NULL)
 SWIG_ZEND_NAMED_FE(askdata_available_assets_set,_wrap_AskData_available_assets_set,NULL)
 SWIG_ZEND_NAMED_FE(askdata_available_assets_get,_wrap_AskData_available_assets_get,NULL)
 SWIG_ZEND_NAMED_FE(askdata_minimum_increment_set,_wrap_AskData_minimum_increment_set,NULL)
 SWIG_ZEND_NAMED_FE(askdata_minimum_increment_get,_wrap_AskData_minimum_increment_get,NULL)
 SWIG_ZEND_NAMED_FE(askdata_ot_dynamic_cast,_wrap_AskData_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(offerlistmarket_getbiddatacount,_wrap_OfferListMarket_GetBidDataCount,NULL)
 SWIG_ZEND_NAMED_FE(offerlistmarket_getbiddata,_wrap_OfferListMarket_GetBidData,NULL)
 SWIG_ZEND_NAMED_FE(offerlistmarket_removebiddata,_wrap_OfferListMarket_RemoveBidData,NULL)
 SWIG_ZEND_NAMED_FE(offerlistmarket_addbiddata,_wrap_OfferListMarket_AddBidData,NULL)
 SWIG_ZEND_NAMED_FE(offerlistmarket_getaskdatacount,_wrap_OfferListMarket_GetAskDataCount,NULL)
 SWIG_ZEND_NAMED_FE(offerlistmarket_getaskdata,_wrap_OfferListMarket_GetAskData,NULL)
 SWIG_ZEND_NAMED_FE(offerlistmarket_removeaskdata,_wrap_OfferListMarket_RemoveAskData,NULL)
 SWIG_ZEND_NAMED_FE(offerlistmarket_addaskdata,_wrap_OfferListMarket_AddAskData,NULL)
 SWIG_ZEND_NAMED_FE(offerlistmarket_ot_dynamic_cast,_wrap_OfferListMarket_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(tradedatamarket_gui_label_set,_wrap_TradeDataMarket_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(tradedatamarket_gui_label_get,_wrap_TradeDataMarket_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(tradedatamarket_transaction_id_set,_wrap_TradeDataMarket_transaction_id_set,NULL)
 SWIG_ZEND_NAMED_FE(tradedatamarket_transaction_id_get,_wrap_TradeDataMarket_transaction_id_get,NULL)
 SWIG_ZEND_NAMED_FE(tradedatamarket_date_set,_wrap_TradeDataMarket_date_set,NULL)
 SWIG_ZEND_NAMED_FE(tradedatamarket_date_get,_wrap_TradeDataMarket_date_get,NULL)
 SWIG_ZEND_NAMED_FE(tradedatamarket_price_set,_wrap_TradeDataMarket_price_set,NULL)
 SWIG_ZEND_NAMED_FE(tradedatamarket_price_get,_wrap_TradeDataMarket_price_get,NULL)
 SWIG_ZEND_NAMED_FE(tradedatamarket_amount_sold_set,_wrap_TradeDataMarket_amount_sold_set,NULL)
 SWIG_ZEND_NAMED_FE(tradedatamarket_amount_sold_get,_wrap_TradeDataMarket_amount_sold_get,NULL)
 SWIG_ZEND_NAMED_FE(tradedatamarket_ot_dynamic_cast,_wrap_TradeDataMarket_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(tradelistmarket_gettradedatamarketcount,_wrap_TradeListMarket_GetTradeDataMarketCount,NULL)
 SWIG_ZEND_NAMED_FE(tradelistmarket_gettradedatamarket,_wrap_TradeListMarket_GetTradeDataMarket,NULL)
 SWIG_ZEND_NAMED_FE(tradelistmarket_removetradedatamarket,_wrap_TradeListMarket_RemoveTradeDataMarket,NULL)
 SWIG_ZEND_NAMED_FE(tradelistmarket_addtradedatamarket,_wrap_TradeListMarket_AddTradeDataMarket,NULL)
 SWIG_ZEND_NAMED_FE(tradelistmarket_ot_dynamic_cast,_wrap_TradeListMarket_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_gui_label_set,_wrap_OfferDataNym_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_gui_label_get,_wrap_OfferDataNym_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_valid_from_set,_wrap_OfferDataNym_valid_from_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_valid_from_get,_wrap_OfferDataNym_valid_from_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_valid_to_set,_wrap_OfferDataNym_valid_to_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_valid_to_get,_wrap_OfferDataNym_valid_to_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_server_id_set,_wrap_OfferDataNym_server_id_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_server_id_get,_wrap_OfferDataNym_server_id_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_asset_type_id_set,_wrap_OfferDataNym_asset_type_id_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_asset_type_id_get,_wrap_OfferDataNym_asset_type_id_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_asset_acct_id_set,_wrap_OfferDataNym_asset_acct_id_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_asset_acct_id_get,_wrap_OfferDataNym_asset_acct_id_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_currency_type_id_set,_wrap_OfferDataNym_currency_type_id_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_currency_type_id_get,_wrap_OfferDataNym_currency_type_id_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_currency_acct_id_set,_wrap_OfferDataNym_currency_acct_id_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_currency_acct_id_get,_wrap_OfferDataNym_currency_acct_id_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_selling_set,_wrap_OfferDataNym_selling_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_selling_get,_wrap_OfferDataNym_selling_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_scale_set,_wrap_OfferDataNym_scale_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_scale_get,_wrap_OfferDataNym_scale_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_price_per_scale_set,_wrap_OfferDataNym_price_per_scale_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_price_per_scale_get,_wrap_OfferDataNym_price_per_scale_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_transaction_id_set,_wrap_OfferDataNym_transaction_id_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_transaction_id_get,_wrap_OfferDataNym_transaction_id_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_total_assets_set,_wrap_OfferDataNym_total_assets_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_total_assets_get,_wrap_OfferDataNym_total_assets_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_finished_so_far_set,_wrap_OfferDataNym_finished_so_far_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_finished_so_far_get,_wrap_OfferDataNym_finished_so_far_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_minimum_increment_set,_wrap_OfferDataNym_minimum_increment_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_minimum_increment_get,_wrap_OfferDataNym_minimum_increment_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_stop_sign_set,_wrap_OfferDataNym_stop_sign_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_stop_sign_get,_wrap_OfferDataNym_stop_sign_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_stop_price_set,_wrap_OfferDataNym_stop_price_set,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_stop_price_get,_wrap_OfferDataNym_stop_price_get,NULL)
 SWIG_ZEND_NAMED_FE(offerdatanym_ot_dynamic_cast,_wrap_OfferDataNym_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(offerlistnym_getofferdatanymcount,_wrap_OfferListNym_GetOfferDataNymCount,NULL)
 SWIG_ZEND_NAMED_FE(offerlistnym_getofferdatanym,_wrap_OfferListNym_GetOfferDataNym,NULL)
 SWIG_ZEND_NAMED_FE(offerlistnym_removeofferdatanym,_wrap_OfferListNym_RemoveOfferDataNym,NULL)
 SWIG_ZEND_NAMED_FE(offerlistnym_addofferdatanym,_wrap_OfferListNym_AddOfferDataNym,NULL)
 SWIG_ZEND_NAMED_FE(offerlistnym_ot_dynamic_cast,_wrap_OfferListNym_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_gui_label_set,_wrap_TradeDataNym_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_gui_label_get,_wrap_TradeDataNym_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_transaction_id_set,_wrap_TradeDataNym_transaction_id_set,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_transaction_id_get,_wrap_TradeDataNym_transaction_id_get,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_completed_count_set,_wrap_TradeDataNym_completed_count_set,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_completed_count_get,_wrap_TradeDataNym_completed_count_get,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_date_set,_wrap_TradeDataNym_date_set,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_date_get,_wrap_TradeDataNym_date_get,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_price_set,_wrap_TradeDataNym_price_set,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_price_get,_wrap_TradeDataNym_price_get,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_amount_sold_set,_wrap_TradeDataNym_amount_sold_set,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_amount_sold_get,_wrap_TradeDataNym_amount_sold_get,NULL)
 SWIG_ZEND_NAMED_FE(tradedatanym_ot_dynamic_cast,_wrap_TradeDataNym_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(tradelistnym_gettradedatanymcount,_wrap_TradeListNym_GetTradeDataNymCount,NULL)
 SWIG_ZEND_NAMED_FE(tradelistnym_gettradedatanym,_wrap_TradeListNym_GetTradeDataNym,NULL)
 SWIG_ZEND_NAMED_FE(tradelistnym_removetradedatanym,_wrap_TradeListNym_RemoveTradeDataNym,NULL)
 SWIG_ZEND_NAMED_FE(tradelistnym_addtradedatanym,_wrap_TradeListNym_AddTradeDataNym,NULL)
 SWIG_ZEND_NAMED_FE(tradelistnym_ot_dynamic_cast,_wrap_TradeListNym_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(acct_gui_label_set,_wrap_Acct_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(acct_gui_label_get,_wrap_Acct_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(acct_acct_id_set,_wrap_Acct_acct_id_set,NULL)
 SWIG_ZEND_NAMED_FE(acct_acct_id_get,_wrap_Acct_acct_id_get,NULL)
 SWIG_ZEND_NAMED_FE(acct_server_id_set,_wrap_Acct_server_id_set,NULL)
 SWIG_ZEND_NAMED_FE(acct_server_id_get,_wrap_Acct_server_id_get,NULL)
 SWIG_ZEND_NAMED_FE(acct_ot_dynamic_cast,_wrap_Acct_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinacct_gui_label_set,_wrap_BitcoinAcct_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinacct_gui_label_get,_wrap_BitcoinAcct_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinacct_acct_id_set,_wrap_BitcoinAcct_acct_id_set,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinacct_acct_id_get,_wrap_BitcoinAcct_acct_id_get,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinacct_server_id_set,_wrap_BitcoinAcct_server_id_set,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinacct_server_id_get,_wrap_BitcoinAcct_server_id_get,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinacct_bitcoin_acct_name_set,_wrap_BitcoinAcct_bitcoin_acct_name_set,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinacct_bitcoin_acct_name_get,_wrap_BitcoinAcct_bitcoin_acct_name_get,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinacct_ot_dynamic_cast,_wrap_BitcoinAcct_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(serverinfo_gui_label_set,_wrap_ServerInfo_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(serverinfo_gui_label_get,_wrap_ServerInfo_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(serverinfo_server_id_set,_wrap_ServerInfo_server_id_set,NULL)
 SWIG_ZEND_NAMED_FE(serverinfo_server_id_get,_wrap_ServerInfo_server_id_get,NULL)
 SWIG_ZEND_NAMED_FE(serverinfo_server_type_set,_wrap_ServerInfo_server_type_set,NULL)
 SWIG_ZEND_NAMED_FE(serverinfo_server_type_get,_wrap_ServerInfo_server_type_get,NULL)
 SWIG_ZEND_NAMED_FE(serverinfo_ot_dynamic_cast,_wrap_ServerInfo_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(server_gui_label_set,_wrap_Server_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(server_gui_label_get,_wrap_Server_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(server_server_id_set,_wrap_Server_server_id_set,NULL)
 SWIG_ZEND_NAMED_FE(server_server_id_get,_wrap_Server_server_id_get,NULL)
 SWIG_ZEND_NAMED_FE(server_server_type_set,_wrap_Server_server_type_set,NULL)
 SWIG_ZEND_NAMED_FE(server_server_type_get,_wrap_Server_server_type_get,NULL)
 SWIG_ZEND_NAMED_FE(server_server_host_set,_wrap_Server_server_host_set,NULL)
 SWIG_ZEND_NAMED_FE(server_server_host_get,_wrap_Server_server_host_get,NULL)
 SWIG_ZEND_NAMED_FE(server_server_port_set,_wrap_Server_server_port_set,NULL)
 SWIG_ZEND_NAMED_FE(server_server_port_get,_wrap_Server_server_port_get,NULL)
 SWIG_ZEND_NAMED_FE(server_ot_dynamic_cast,_wrap_Server_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_gui_label_set,_wrap_BitcoinServer_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_gui_label_get,_wrap_BitcoinServer_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_server_id_set,_wrap_BitcoinServer_server_id_set,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_server_id_get,_wrap_BitcoinServer_server_id_get,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_server_type_set,_wrap_BitcoinServer_server_type_set,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_server_type_get,_wrap_BitcoinServer_server_type_get,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_server_host_set,_wrap_BitcoinServer_server_host_set,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_server_host_get,_wrap_BitcoinServer_server_host_get,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_server_port_set,_wrap_BitcoinServer_server_port_set,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_server_port_get,_wrap_BitcoinServer_server_port_get,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_bitcoin_username_set,_wrap_BitcoinServer_bitcoin_username_set,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_bitcoin_username_get,_wrap_BitcoinServer_bitcoin_username_get,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_bitcoin_password_set,_wrap_BitcoinServer_bitcoin_password_set,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_bitcoin_password_get,_wrap_BitcoinServer_bitcoin_password_get,NULL)
 SWIG_ZEND_NAMED_FE(bitcoinserver_ot_dynamic_cast,_wrap_BitcoinServer_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_gui_label_set,_wrap_RippleServer_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_gui_label_get,_wrap_RippleServer_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_server_id_set,_wrap_RippleServer_server_id_set,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_server_id_get,_wrap_RippleServer_server_id_get,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_server_type_set,_wrap_RippleServer_server_type_set,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_server_type_get,_wrap_RippleServer_server_type_get,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_server_host_set,_wrap_RippleServer_server_host_set,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_server_host_get,_wrap_RippleServer_server_host_get,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_server_port_set,_wrap_RippleServer_server_port_set,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_server_port_get,_wrap_RippleServer_server_port_get,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_ripple_username_set,_wrap_RippleServer_ripple_username_set,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_ripple_username_get,_wrap_RippleServer_ripple_username_get,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_ripple_password_set,_wrap_RippleServer_ripple_password_set,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_ripple_password_get,_wrap_RippleServer_ripple_password_get,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_namefield_id_set,_wrap_RippleServer_namefield_id_set,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_namefield_id_get,_wrap_RippleServer_namefield_id_get,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_passfield_id_set,_wrap_RippleServer_passfield_id_set,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_passfield_id_get,_wrap_RippleServer_passfield_id_get,NULL)
 SWIG_ZEND_NAMED_FE(rippleserver_ot_dynamic_cast,_wrap_RippleServer_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_gui_label_set,_wrap_LoomServer_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_gui_label_get,_wrap_LoomServer_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_server_id_set,_wrap_LoomServer_server_id_set,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_server_id_get,_wrap_LoomServer_server_id_get,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_server_type_set,_wrap_LoomServer_server_type_set,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_server_type_get,_wrap_LoomServer_server_type_get,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_server_host_set,_wrap_LoomServer_server_host_set,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_server_host_get,_wrap_LoomServer_server_host_get,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_server_port_set,_wrap_LoomServer_server_port_set,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_server_port_get,_wrap_LoomServer_server_port_get,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_loom_username_set,_wrap_LoomServer_loom_username_set,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_loom_username_get,_wrap_LoomServer_loom_username_get,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_namefield_id_set,_wrap_LoomServer_namefield_id_set,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_namefield_id_get,_wrap_LoomServer_namefield_id_get,NULL)
 SWIG_ZEND_NAMED_FE(loomserver_ot_dynamic_cast,_wrap_LoomServer_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_gui_label_set,_wrap_ContactNym_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_gui_label_get,_wrap_ContactNym_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_nym_type_set,_wrap_ContactNym_nym_type_set,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_nym_type_get,_wrap_ContactNym_nym_type_get,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_nym_id_set,_wrap_ContactNym_nym_id_set,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_nym_id_get,_wrap_ContactNym_nym_id_get,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_public_key_set,_wrap_ContactNym_public_key_set,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_public_key_get,_wrap_ContactNym_public_key_get,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_memo_set,_wrap_ContactNym_memo_set,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_memo_get,_wrap_ContactNym_memo_get,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_getserverinfocount,_wrap_ContactNym_GetServerInfoCount,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_getserverinfo,_wrap_ContactNym_GetServerInfo,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_removeserverinfo,_wrap_ContactNym_RemoveServerInfo,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_addserverinfo,_wrap_ContactNym_AddServerInfo,NULL)
 SWIG_ZEND_NAMED_FE(contactnym_ot_dynamic_cast,_wrap_ContactNym_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_getbitcoinservercount,_wrap_WalletData_GetBitcoinServerCount,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_getbitcoinserver,_wrap_WalletData_GetBitcoinServer,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_removebitcoinserver,_wrap_WalletData_RemoveBitcoinServer,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_addbitcoinserver,_wrap_WalletData_AddBitcoinServer,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_getbitcoinacctcount,_wrap_WalletData_GetBitcoinAcctCount,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_getbitcoinacct,_wrap_WalletData_GetBitcoinAcct,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_removebitcoinacct,_wrap_WalletData_RemoveBitcoinAcct,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_addbitcoinacct,_wrap_WalletData_AddBitcoinAcct,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_getrippleservercount,_wrap_WalletData_GetRippleServerCount,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_getrippleserver,_wrap_WalletData_GetRippleServer,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_removerippleserver,_wrap_WalletData_RemoveRippleServer,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_addrippleserver,_wrap_WalletData_AddRippleServer,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_getloomservercount,_wrap_WalletData_GetLoomServerCount,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_getloomserver,_wrap_WalletData_GetLoomServer,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_removeloomserver,_wrap_WalletData_RemoveLoomServer,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_addloomserver,_wrap_WalletData_AddLoomServer,NULL)
 SWIG_ZEND_NAMED_FE(walletdata_ot_dynamic_cast,_wrap_WalletData_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_gui_label_set,_wrap_ContactAcct_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_gui_label_get,_wrap_ContactAcct_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_server_type_set,_wrap_ContactAcct_server_type_set,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_server_type_get,_wrap_ContactAcct_server_type_get,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_server_id_set,_wrap_ContactAcct_server_id_set,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_server_id_get,_wrap_ContactAcct_server_id_get,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_asset_type_id_set,_wrap_ContactAcct_asset_type_id_set,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_asset_type_id_get,_wrap_ContactAcct_asset_type_id_get,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_acct_id_set,_wrap_ContactAcct_acct_id_set,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_acct_id_get,_wrap_ContactAcct_acct_id_get,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_nym_id_set,_wrap_ContactAcct_nym_id_set,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_nym_id_get,_wrap_ContactAcct_nym_id_get,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_memo_set,_wrap_ContactAcct_memo_set,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_memo_get,_wrap_ContactAcct_memo_get,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_public_key_set,_wrap_ContactAcct_public_key_set,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_public_key_get,_wrap_ContactAcct_public_key_get,NULL)
 SWIG_ZEND_NAMED_FE(contactacct_ot_dynamic_cast,_wrap_ContactAcct_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(contact_gui_label_set,_wrap_Contact_gui_label_set,NULL)
 SWIG_ZEND_NAMED_FE(contact_gui_label_get,_wrap_Contact_gui_label_get,NULL)
 SWIG_ZEND_NAMED_FE(contact_contact_id_set,_wrap_Contact_contact_id_set,NULL)
 SWIG_ZEND_NAMED_FE(contact_contact_id_get,_wrap_Contact_contact_id_get,NULL)
 SWIG_ZEND_NAMED_FE(contact_email_set,_wrap_Contact_email_set,NULL)
 SWIG_ZEND_NAMED_FE(contact_email_get,_wrap_Contact_email_get,NULL)
 SWIG_ZEND_NAMED_FE(contact_memo_set,_wrap_Contact_memo_set,NULL)
 SWIG_ZEND_NAMED_FE(contact_memo_get,_wrap_Contact_memo_get,NULL)
 SWIG_ZEND_NAMED_FE(contact_public_key_set,_wrap_Contact_public_key_set,NULL)
 SWIG_ZEND_NAMED_FE(contact_public_key_get,_wrap_Contact_public_key_get,NULL)
 SWIG_ZEND_NAMED_FE(contact_getcontactnymcount,_wrap_Contact_GetContactNymCount,NULL)
 SWIG_ZEND_NAMED_FE(contact_getcontactnym,_wrap_Contact_GetContactNym,NULL)
 SWIG_ZEND_NAMED_FE(contact_removecontactnym,_wrap_Contact_RemoveContactNym,NULL)
 SWIG_ZEND_NAMED_FE(contact_addcontactnym,_wrap_Contact_AddContactNym,NULL)
 SWIG_ZEND_NAMED_FE(contact_getcontactacctcount,_wrap_Contact_GetContactAcctCount,NULL)
 SWIG_ZEND_NAMED_FE(contact_getcontactacct,_wrap_Contact_GetContactAcct,NULL)
 SWIG_ZEND_NAMED_FE(contact_removecontactacct,_wrap_Contact_RemoveContactAcct,NULL)
 SWIG_ZEND_NAMED_FE(contact_addcontactacct,_wrap_Contact_AddContactAcct,NULL)
 SWIG_ZEND_NAMED_FE(contact_ot_dynamic_cast,_wrap_Contact_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(addressbook_getcontactcount,_wrap_AddressBook_GetContactCount,NULL)
 SWIG_ZEND_NAMED_FE(addressbook_getcontact,_wrap_AddressBook_GetContact,NULL)
 SWIG_ZEND_NAMED_FE(addressbook_removecontact,_wrap_AddressBook_RemoveContact,NULL)
 SWIG_ZEND_NAMED_FE(addressbook_addcontact,_wrap_AddressBook_AddContact,NULL)
 SWIG_ZEND_NAMED_FE(addressbook_ot_dynamic_cast,_wrap_AddressBook_ot_dynamic_cast,NULL)
 SWIG_ZEND_NAMED_FE(swig_otapi_alter_newobject,_wrap_swig_otapi_alter_newobject,NULL)
 SWIG_ZEND_NAMED_FE(swig_otapi_get_newobject,_wrap_swig_otapi_get_newobject,NULL)
{NULL, NULL, NULL}
};

/* init section */
#if ZEND_MODULE_API_NO <= 20090626
#undef ZEND_MODULE_BUILD_ID
#define ZEND_MODULE_BUILD_ID (char*)"API" ZEND_TOSTR(ZEND_MODULE_API_NO) ZEND_BUILD_TS ZEND_BUILD_DEBUG ZEND_BUILD_SYSTEM ZEND_BUILD_EXTRA
#endif
zend_module_entry otapi_module_entry = {
    STANDARD_MODULE_HEADER,
    (char*)"otapi",
    otapi_functions,
    PHP_MINIT(otapi),
    PHP_MSHUTDOWN(otapi),
    PHP_RINIT(otapi),
    PHP_RSHUTDOWN(otapi),
    PHP_MINFO(otapi),
    NO_VERSION_YET,
    STANDARD_MODULE_PROPERTIES
};
zend_module_entry* SWIG_module_entry = &otapi_module_entry;

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT zend_module_entry *get_module(void) { return &otapi_module_entry; }
#ifdef __cplusplus
}
#endif

#define SWIG_php_minit PHP_MINIT_FUNCTION(otapi)
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  (void *)clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


  SWIG_php_minit {
    SWIG_InitializeModule(0);

/* oinit subsection */
ZEND_INIT_MODULE_GLOBALS(otapi, otapi_init_globals, otapi_destroy_globals);

/* Register resource destructors for pointer types */
le_swig__p_std__vectorT_unsigned_char_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__vectorT_unsigned_char_t,NULL,(char *)(SWIGTYPE_p_std__vectorT_unsigned_char_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_unsigned_char_t,&le_swig__p_std__vectorT_unsigned_char_t);
le_swig__p_OTDB__Storage=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__Storage,NULL,(char *)(SWIGTYPE_p_OTDB__Storage->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__Storage,&le_swig__p_OTDB__Storage);
le_swig__p_OTDB__BitcoinAcct=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__BitcoinAcct,NULL,(char *)(SWIGTYPE_p_OTDB__BitcoinAcct->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__BitcoinAcct,&le_swig__p_OTDB__BitcoinAcct);
le_swig__p_OTDB__BidData=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__BidData,NULL,(char *)(SWIGTYPE_p_OTDB__BidData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__BidData,&le_swig__p_OTDB__BidData);
le_swig__p_OTPassword=zend_register_list_destructors_ex(_wrap_destroy_p_OTPassword,NULL,(char *)(SWIGTYPE_p_OTPassword->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTPassword,&le_swig__p_OTPassword);
le_swig__p_OTDB__Blob=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__Blob,NULL,(char *)(SWIGTYPE_p_OTDB__Blob->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__Blob,&le_swig__p_OTDB__Blob);
le_swig__p_OTDB__TradeListNym=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__TradeListNym,NULL,(char *)(SWIGTYPE_p_OTDB__TradeListNym->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__TradeListNym,&le_swig__p_OTDB__TradeListNym);
le_swig__p_OTDB__OfferListNym=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__OfferListNym,NULL,(char *)(SWIGTYPE_p_OTDB__OfferListNym->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__OfferListNym,&le_swig__p_OTDB__OfferListNym);
le_swig__p_OTDB__ContactAcct=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__ContactAcct,NULL,(char *)(SWIGTYPE_p_OTDB__ContactAcct->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__ContactAcct,&le_swig__p_OTDB__ContactAcct);
le_swig__p_char=zend_register_list_destructors_ex(_wrap_destroy_p_char,NULL,(char *)(SWIGTYPE_p_char->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_char,&le_swig__p_char);
le_swig__p_OTDB__TradeListMarket=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__TradeListMarket,NULL,(char *)(SWIGTYPE_p_OTDB__TradeListMarket->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__TradeListMarket,&le_swig__p_OTDB__TradeListMarket);
le_swig__p_OTDB__OfferListMarket=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__OfferListMarket,NULL,(char *)(SWIGTYPE_p_OTDB__OfferListMarket->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__OfferListMarket,&le_swig__p_OTDB__OfferListMarket);
le_swig__p_uint8_t=zend_register_list_destructors_ex(_wrap_destroy_p_uint8_t,NULL,(char *)(SWIGTYPE_p_uint8_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_uint8_t,&le_swig__p_uint8_t);
le_swig__p_OTDB__WalletData=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__WalletData,NULL,(char *)(SWIGTYPE_p_OTDB__WalletData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__WalletData,&le_swig__p_OTDB__WalletData);
le_swig__p_void=zend_register_list_destructors_ex(_wrap_destroy_p_void,NULL,(char *)(SWIGTYPE_p_void->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_void,&le_swig__p_void);
le_swig__p_p_void=zend_register_list_destructors_ex(_wrap_destroy_p_p_void,NULL,(char *)(SWIGTYPE_p_p_void->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_void,&le_swig__p_p_void);
le_swig__p_OTDB__StringMap=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__StringMap,NULL,(char *)(SWIGTYPE_p_OTDB__StringMap->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__StringMap,&le_swig__p_OTDB__StringMap);
le_swig__int=zend_register_list_destructors_ex(_wrap_destroy_int,NULL,(char *)(SWIGTYPE_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_int,&le_swig__int);
le_swig__p_OTDB__BitcoinServer=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__BitcoinServer,NULL,(char *)(SWIGTYPE_p_OTDB__BitcoinServer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__BitcoinServer,&le_swig__p_OTDB__BitcoinServer);
le_swig__p_OTDB__Displayable=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__Displayable,NULL,(char *)(SWIGTYPE_p_OTDB__Displayable->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__Displayable,&le_swig__p_OTDB__Displayable);
le_swig__p_OTPacker=zend_register_list_destructors_ex(_wrap_destroy_p_OTPacker,NULL,(char *)(SWIGTYPE_p_OTPacker->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTPacker,&le_swig__p_OTPacker);
le_swig__p_OTDB__AskData=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__AskData,NULL,(char *)(SWIGTYPE_p_OTDB__AskData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__AskData,&le_swig__p_OTDB__AskData);
le_swig__p_OTDB__OTDBString=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__OTDBString,NULL,(char *)(SWIGTYPE_p_OTDB__OTDBString->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__OTDBString,&le_swig__p_OTDB__OTDBString);
le_swig__p_OTDB__TradeDataMarket=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__TradeDataMarket,NULL,(char *)(SWIGTYPE_p_OTDB__TradeDataMarket->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__TradeDataMarket,&le_swig__p_OTDB__TradeDataMarket);
le_swig__p_OTDB__OfferDataMarket=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__OfferDataMarket,NULL,(char *)(SWIGTYPE_p_OTDB__OfferDataMarket->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__OfferDataMarket,&le_swig__p_OTDB__OfferDataMarket);
le_swig__p_OTDB__Acct=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__Acct,NULL,(char *)(SWIGTYPE_p_OTDB__Acct->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__Acct,&le_swig__p_OTDB__Acct);
le_swig__p_OTDB__ContactNym=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__ContactNym,NULL,(char *)(SWIGTYPE_p_OTDB__ContactNym->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__ContactNym,&le_swig__p_OTDB__ContactNym);
le_swig__p_OTDB__ServerInfo=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__ServerInfo,NULL,(char *)(SWIGTYPE_p_OTDB__ServerInfo->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__ServerInfo,&le_swig__p_OTDB__ServerInfo);
le_swig__p_OTDB__Contact=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__Contact,NULL,(char *)(SWIGTYPE_p_OTDB__Contact->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__Contact,&le_swig__p_OTDB__Contact);
le_swig__p_OTCaller=zend_register_list_destructors_ex(_wrap_destroy_p_OTCaller,NULL,(char *)(SWIGTYPE_p_OTCaller->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTCaller,&le_swig__p_OTCaller);
le_swig__p_OTDB__Server=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__Server,NULL,(char *)(SWIGTYPE_p_OTDB__Server->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__Server,&le_swig__p_OTDB__Server);
le_swig__p_OTDB__RippleServer=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__RippleServer,NULL,(char *)(SWIGTYPE_p_OTDB__RippleServer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__RippleServer,&le_swig__p_OTDB__RippleServer);
le_swig__p_OTDB__LoomServer=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__LoomServer,NULL,(char *)(SWIGTYPE_p_OTDB__LoomServer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__LoomServer,&le_swig__p_OTDB__LoomServer);
le_swig__p_OTDB__Storable=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__Storable,NULL,(char *)(SWIGTYPE_p_OTDB__Storable->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__Storable,&le_swig__p_OTDB__Storable);
le_swig__p_OTDB__AddressBook=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__AddressBook,NULL,(char *)(SWIGTYPE_p_OTDB__AddressBook->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__AddressBook,&le_swig__p_OTDB__AddressBook);
le_swig__p_OTCallback=zend_register_list_destructors_ex(_wrap_destroy_p_OTCallback,NULL,(char *)(SWIGTYPE_p_OTCallback->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTCallback,&le_swig__p_OTCallback);
le_swig__p_uint32_t=zend_register_list_destructors_ex(_wrap_destroy_p_uint32_t,NULL,(char *)(SWIGTYPE_p_uint32_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_uint32_t,&le_swig__p_uint32_t);
le_swig__p_int32_t=zend_register_list_destructors_ex(_wrap_destroy_p_int32_t,NULL,(char *)(SWIGTYPE_p_int32_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_int32_t,&le_swig__p_int32_t);
le_swig__p_OTDB__TradeDataNym=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__TradeDataNym,NULL,(char *)(SWIGTYPE_p_OTDB__TradeDataNym->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__TradeDataNym,&le_swig__p_OTDB__TradeDataNym);
le_swig__p_OTDB__OfferDataNym=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__OfferDataNym,NULL,(char *)(SWIGTYPE_p_OTDB__OfferDataNym->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__OfferDataNym,&le_swig__p_OTDB__OfferDataNym);
le_swig__p_OTDB__MarketData=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__MarketData,NULL,(char *)(SWIGTYPE_p_OTDB__MarketData->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__MarketData,&le_swig__p_OTDB__MarketData);
le_swig__p_std__mapT_std__string_std__string_t=zend_register_list_destructors_ex(_wrap_destroy_p_std__mapT_std__string_std__string_t,NULL,(char *)(SWIGTYPE_p_std__mapT_std__string_std__string_t->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_std__mapT_std__string_std__string_t,&le_swig__p_std__mapT_std__string_std__string_t);
le_swig__p_OTDB__MarketList=zend_register_list_destructors_ex(_wrap_destroy_p_OTDB__MarketList,NULL,(char *)(SWIGTYPE_p_OTDB__MarketList->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_OTDB__MarketList,&le_swig__p_OTDB__MarketList);
CG(active_class_entry) = NULL;
/* end oinit subsection */

/* cinit subsection */
SWIG_LONG_CONSTANT(OTPASSWORD_BLOCKSIZE, 128);
SWIG_LONG_CONSTANT(OTPASSWORD_MEMSIZE, 129);
SWIG_LONG_CONSTANT(OT_LARGE_BLOCKSIZE, 32767);
SWIG_LONG_CONSTANT(OT_LARGE_MEMSIZE, 32768);
SWIG_LONG_CONSTANT(OT_DEFAULT_BLOCKSIZE, 128);
SWIG_LONG_CONSTANT(OT_DEFAULT_MEMSIZE, 129);
SWIG_LONG_CONSTANT(OTPassword_DEFAULT_SIZE, OTPassword::DEFAULT_SIZE);
SWIG_LONG_CONSTANT(OTPassword_LARGER_SIZE, OTPassword::LARGER_SIZE);
SWIG_LONG_CONSTANT(PACK_MESSAGE_PACK, OTDB::PACK_MESSAGE_PACK);
SWIG_LONG_CONSTANT(PACK_PROTOCOL_BUFFERS, OTDB::PACK_PROTOCOL_BUFFERS);
SWIG_LONG_CONSTANT(PACK_TYPE_ERROR, OTDB::PACK_TYPE_ERROR);
SWIG_LONG_CONSTANT(STORE_FILESYSTEM, OTDB::STORE_FILESYSTEM);
SWIG_LONG_CONSTANT(STORE_TYPE_SUBCLASS, OTDB::STORE_TYPE_SUBCLASS);
SWIG_LONG_CONSTANT(STORED_OBJ_STRING, OTDB::STORED_OBJ_STRING);
SWIG_LONG_CONSTANT(STORED_OBJ_BLOB, OTDB::STORED_OBJ_BLOB);
SWIG_LONG_CONSTANT(STORED_OBJ_STRING_MAP, OTDB::STORED_OBJ_STRING_MAP);
SWIG_LONG_CONSTANT(STORED_OBJ_WALLET_DATA, OTDB::STORED_OBJ_WALLET_DATA);
SWIG_LONG_CONSTANT(STORED_OBJ_BITCOIN_ACCT, OTDB::STORED_OBJ_BITCOIN_ACCT);
SWIG_LONG_CONSTANT(STORED_OBJ_BITCOIN_SERVER, OTDB::STORED_OBJ_BITCOIN_SERVER);
SWIG_LONG_CONSTANT(STORED_OBJ_RIPPLE_SERVER, OTDB::STORED_OBJ_RIPPLE_SERVER);
SWIG_LONG_CONSTANT(STORED_OBJ_LOOM_SERVER, OTDB::STORED_OBJ_LOOM_SERVER);
SWIG_LONG_CONSTANT(STORED_OBJ_SERVER_INFO, OTDB::STORED_OBJ_SERVER_INFO);
SWIG_LONG_CONSTANT(STORED_OBJ_CONTACT_NYM, OTDB::STORED_OBJ_CONTACT_NYM);
SWIG_LONG_CONSTANT(STORED_OBJ_CONTACT_ACCT, OTDB::STORED_OBJ_CONTACT_ACCT);
SWIG_LONG_CONSTANT(STORED_OBJ_CONTACT, OTDB::STORED_OBJ_CONTACT);
SWIG_LONG_CONSTANT(STORED_OBJ_ADDRESS_BOOK, OTDB::STORED_OBJ_ADDRESS_BOOK);
SWIG_LONG_CONSTANT(STORED_OBJ_MARKET_DATA, OTDB::STORED_OBJ_MARKET_DATA);
SWIG_LONG_CONSTANT(STORED_OBJ_MARKET_LIST, OTDB::STORED_OBJ_MARKET_LIST);
SWIG_LONG_CONSTANT(STORED_OBJ_BID_DATA, OTDB::STORED_OBJ_BID_DATA);
SWIG_LONG_CONSTANT(STORED_OBJ_ASK_DATA, OTDB::STORED_OBJ_ASK_DATA);
SWIG_LONG_CONSTANT(STORED_OBJ_OFFER_LIST_MARKET, OTDB::STORED_OBJ_OFFER_LIST_MARKET);
SWIG_LONG_CONSTANT(STORED_OBJ_TRADE_DATA_MARKET, OTDB::STORED_OBJ_TRADE_DATA_MARKET);
SWIG_LONG_CONSTANT(STORED_OBJ_TRADE_LIST_MARKET, OTDB::STORED_OBJ_TRADE_LIST_MARKET);
SWIG_LONG_CONSTANT(STORED_OBJ_OFFER_DATA_NYM, OTDB::STORED_OBJ_OFFER_DATA_NYM);
SWIG_LONG_CONSTANT(STORED_OBJ_OFFER_LIST_NYM, OTDB::STORED_OBJ_OFFER_LIST_NYM);
SWIG_LONG_CONSTANT(STORED_OBJ_TRADE_DATA_NYM, OTDB::STORED_OBJ_TRADE_DATA_NYM);
SWIG_LONG_CONSTANT(STORED_OBJ_TRADE_LIST_NYM, OTDB::STORED_OBJ_TRADE_LIST_NYM);
SWIG_LONG_CONSTANT(STORED_OBJ_ERROR, OTDB::STORED_OBJ_ERROR);
/* end cinit subsection */

    return SUCCESS;
}

PHP_RINIT_FUNCTION(otapi)
{
/* rinit section */

/* vinit subsection */
/* end vinit subsection */

    return SUCCESS;
}

PHP_MSHUTDOWN_FUNCTION(otapi)
{
/* shutdown section */
#ifdef ZTS
    ts_free_id(otapi_globals_id);
#endif
    return SUCCESS;
}

PHP_RSHUTDOWN_FUNCTION(otapi)
{
/* rshutdown section */

    return SUCCESS;
}

PHP_MINFO_FUNCTION(otapi)
{
}
/* end init section */
