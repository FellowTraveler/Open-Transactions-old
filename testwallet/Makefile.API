#
# Open-Transactions:  Makefile for dynamic libs (Python, Java, Ruby, etc)
#
# IMPORTANT:  WHEN USING THIS MAKEFILE, YOU *MUST* USE THE OPTIONS. EXAMPLE:
#
# So you have to do: 
#      make -f Makefile.API PLATFORM=linux LANGUAGE=php5 TRANSPORT=ZMQ
#  OR: make -f Makefile.API PLATFORM=darwin LANGUAGE=c  TRANSPORT=ZMQ debug
#  OR: make -f Makefile.API PLATFORM=freebsd LANGUAGE=ruby
#  Etc...
#
# (Example only. Transport is optional, but you MUST choose a platform and language.)
#
# Platform options are darwin, linux and freebsd (untested)
#
# Language options are c, d, csharp, java, ruby, python, perl5, php5, tcl, and lisp. 
#

PROGRAM = libOTAPI.a
DEBUG_PROGRAM = libOTAPId.a


# Set root names for LIBS

# --- Common Lisp
PROGRAM_LISP = libotapi-lisp
PROGRAM_LISP_DBG = otapi-lisp-dbg
# --- C# (C-Sharp)
PROGRAM_CSHARP = libotapi-csharp
PROGRAM_CSHARP_DBG = libotapi-csharp-dbg
# --- D (D Language)
PROGRAM_D = libotapi-d
PROGRAM_D_DBG = libotapi-d-dbg
# --- JAVA
PROGRAM_JAVA = libotapi-java
PROGRAM_JAVA_DBG = libotapi-java-dbg
# --- PERL5
PROGRAM_PERL5 = libotapi-perl5
PROGRAM_PERL5_DBG = otapi-perl5-dbg
# --- PHP5
PROGRAM_PHP5 = libotapi-php5
PROGRAM_PHP5_dbg = otapi-php5-dbg
# --- PYTHON
PROGRAM__PYTHON = libotapi-python
PROGRAM__PYTHON_DBG = _otapi-python-dbg
# --- RUBY!
PROGRAM_RUBY = libotapi-ruby
PROGRAM_RUBY_DBG = otapi-ruby-dbg
# --- TCL
PROGRAM_TLC = libotapi-tlc
PROGRAM_TLC_DBG = otapi-tlc-dbg



# Find out what platform we're on.
UNAME := $(shell uname -s)

OT_PLATFORM := ___OT_PLATFORM_UNKNOWN___

# ---------------------------------------------------------------------

ifeq ($(FELLOW_TRAVELER), 1)
FT_FLAGS = -DFELLOW_TRAVELER
else
FT_FLAGS = #empty
endif

# ---------------------------------------------------------------------

ifeq ($(DSP), 1)
FT_FLAGS += -DDSP
endif

# ---------------------------------------------------------------------

# I allow the user the option to force-override the build platform.
# Using make PLATFORM=darwin, for example, you will build in darwin mode
# even if you are on a linux box.
#

ifeq ($(PLATFORM), darwin)
UNAME := Darwin
endif
ifeq ($(PLATFORM), linux)
UNAME := Linux
endif
ifeq ($(PLATFORM), freebsd)
UNAME := FreeBSD
endif

ifeq ($(UNAME), Darwin)
OT_PLATFORM := darwin
endif
ifeq ($(UNAME), Linux)
OT_PLATFORM := linux
endif
ifeq ($(UNAME), FreeBSD)
OT_PLATFORM := freebsd
endif


PLATFORM = $(OT_PLATFORM)



OT_INCLUDEDIRS = \
	-I../OTLib/irrxml \
	-I../OTLib \
	-I./SSL-Example \
	-I../OTLib/simpleini \
	-I.


# The LIBDIRS macro contains a list of library directories
# to pass to the linker so it can find necessary libraries.
#
OT_LIBDIRS = \
	-L../OTLib


API_CSOURCES = ./SSL-Example/SFSocket.c
API_CPPSOURCES = #empty
API_CFLAGS = #empty
API_LDFLAGS = #empty


C_COMPILER = cc

# The LIBS macro contains a list of libraries that the the
# executable must be linked against.
API_LIBS =  -lssl -lcrypto  -lOTLib -lssl -lcrypto  -lOTLib  -lssl -lcrypto -lOTLib  -lssl -lcrypto -lprotobuf -lmsgpack -lzmq -lOTLib
API_DEBUG_LIBS = -lssl -lcrypto -lOTLibd -lssl -lcrypto -lOTLibd  -lssl -lcrypto -lOTLibd -lssl -lcrypto -lprotobuf -lmsgpack -lzmq -lOTLibd
#
# FT: I tested this recently. The above version worked on Linux, and the below version did not.
#
#API_LIBS = -lssl  -lcrypto -lOTLib
#API_DEBUG_LIBS =  -lssl -lcrypto  -lOTLibd




LINUX_LIBDIR = lib
LBITS := $(shell getconf LONG_BIT)
ifeq ($(LBITS),64)
LINUX_LIBDIR = lib64
API_CFLAGS = -m64
API_LDFLAGS = -m64
endif

# ---------------------------------------------------------------------

# SSL Folders!

# For Darwin I use /opt instead of /usr, since OpenSSL 1.0.0a is
# installed to that location by MacPorts.
#
ifeq ($(PLATFORM), darwin)
SSL_INCLUDEDIRS = -I/opt/local/include
SSL_LIBDIRS = -L/opt/local/lib
endif

ifeq ($(PLATFORM), linux)
SSL_INCLUDEDIRS = -I/usr/local/ssl/include
SSL_LIBDIRS = -L/usr/local/ssl/$(LINUX_LIBDIR)
endif

ifeq ($(PLATFORM), freebsd)
SSL_INCLUDEDIRS = -I/usr/local/include
SSL_LIBDIRS = -L/usr/local/lib
#SSL_LIBDIRS = -L/usr/ports/security/openssl/work/openssl-1.0.0c
endif


# ---------------------------------------------------------------------


OT_EXTRA_INCLUDEDIRS = #empty
OT_EXTRA_LIBDIRS = #empty


ifeq ($(DSP), 1)
PLATFORM_INCLUDEDIRS = -I../openssl/include 
PLATFORM_LIBDIRS = -L../openssl 
else
PLATFORM_INCLUDEDIRS = #empty
PLATFORM_LIBDIRS = #empty
endif

# ---------------------------------------------------------------------




# ---------------------------------------------------------------------

# --- DARWIN
#
ifeq ($(PLATFORM), darwin)


DYNAMIC_OTLIB_CONTENTS = # empty

# C_COMPILER = gcc


# --- Common Lisp
LISP_PROGRAM = $(PROGRAM_LISP).so
LISP_DEBUG_PROGRAM = $(PROGRAM_LISP_DBG).so 
LISP_LDFLAGS = -dynamiclib

# --- C# (C-Sharp)
CSHARP_PROGRAM = $(PROGRAM_CSHARP).so  
CSHARP_DEBUG_PROGRAM = $(PROGRAM_CSHARP_DBG).so
CSHARP_LDFLAGS = -dynamiclib


# --- D (D Language)
D_PROGRAM = $(PROGRAM_D).so  
D_DEBUG_PROGRAM = $(PROGRAM_D_DBG).so
D_LDFLAGS = -dynamiclib -bundle


# --- JAVA
# -I/Developer/SDKs/MacOSX10.6.sdk/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Headers
JAVA_PROGRAM = $(PROGRAM_JAVA).jnilib  
JAVA_DEBUG_PROGRAM = $(PROGRAM_JAVA_DBG).jnilib  
JAVA_INCLUDEDIRS = -I$(shell javaconfig Headers)
JAVA_LDFLAGS = -framework JavaVM -bundle

# --- PERL5
# NOTE: the perl commands here (commented out), used at the command line, generated
# the actual CFLAGS and LDFLAGS that are used below in the uncommented section.
# (You may find them similarly useful on your machine.)
#PERL5_CFLAGS = -bundle $(shell perl -MExtUtils::Embed -e ccopts)
#PERL5_LDFLAGS = -bundle $(shell perl -MExtUtils::Embed -e ldopts)
#DEBUG_LDFLAGS += -bundle $(shell perl -MExtUtils::Embed -e ldopts)
#
PERL5_PROGRAM = $(PROGRAM_PERL5).bundle 
PERL5_DEBUG_PROGRAM = $(PROGRAM_PERL5_DBG).bundle
PERL5_INCLUDEDIRS = # empty
PERL5_CFLAGS =  -bundle -arch x86_64  -g -pipe -fno-common -DPERL_DARWIN -fno-strict-aliasing  -no-cpp-precomp -I/opt/local/include  -I/System/Library/Perl/5.10.0/darwin-thread-multi-2level/CORE
PERL5_LDFLAGS = -bundle -arch x86_64 -L/opt/local/lib  -L/System/Library/Perl/5.10.0/darwin-thread-multi-2level/CORE -lperl -ldl -lm -lutil -lc


# --- PHP5
#/usr/libexec/apache2/libphp5.so
#
PHP5_PROGRAM = $(PROGRAM_PHP5).so
PHP5_DEBUG_PROGRAM = $(PROGRAM_PHP5_DBG).so
PHP5_INCLUDEDIRS = $(shell php-config --includes) 
PHP5_LDFLAGS = -bundle_loader /usr/libexec/apache2/libphp5.so -flat_namespace -bundle

# --- PYTHON
#CFLAGS += -fPIC $(shell python-config --cflags) 
#LDFLAGS += -dynamiclib $(shell python-config --ldflags) 
#DEBUG_LDFLAGS += -dynamiclib $(shell python-config --ldflags) 
#
#INCLUDEDIRS += -I/usr/include/python2.6
#LIBDIRS += -L/usr/lib/python2.6
#
#CFLAGS += -fPIC
#LDFLAGS += -dynamiclib -lpython
#DEBUG_LDFLAGS += -dynamiclib -lpython
#
PYTHON_PROGRAM = $(PROGRAM__PYTHON).so
PYTHON_DEBUG_PROGRAM = $(PROGRAM__PYTHON_DBG).so
PYTHON_INCLUDEDIRS = -I/usr/include/python2.6
PYTHON_LIBDIRS = -L/usr/lib/python2.6
PYTHON_LDFLAGS = -dynamiclib -lpython

# --- RUBY!
RUBY_PROGRAM = $(PROGRAM_RUBY).bundle
RUBY_DEBUG_PROGRAM = $(PROGRAM_RUBY_DBG).bundle
RUBY_INCLUDEDIRS = -I$(shell ruby -e 'require "rbconfig"; puts RbConfig::CONFIG["topdir"]') 
RUBY_LDFLAGS = -dynamiclib $(shell ruby -e 'require "rbconfig"; puts RbConfig::CONFIG["LIBRUBYARG"]')

# --- TCL
TCL_PROGRAM = $(PROGRAM_TLC).so
RUBY_DEBUG_PROGRAM = $(PROGRAM_TLC_DBG).so
TCL_INCLUDEDIRS = # empty
TCL_LDFLAGS = -dynamiclib -framework Tcl

endif
# End DARWIN -------------------------------------------------------------




ifeq ($(PLATFORM), linux)


C_COMPILER = gcc

DYNAMIC_OTLIB_CONTENTS = DYNAMIC_OTLIB=1

# --- Common Lisp
LISP_PROGRAM = $(PROGRAM_LISP).so
LISP_DEBUG_PROGRAM = $(PROGRAM_LISP_DBG).so 
LISP_LDFLAGS = -shared

# --- C# (C-Sharp)
CSHARP_PROGRAM = $(PROGRAM_CSHARP).so  
CSHARP_DEBUG_PROGRAM = $(PROGRAM_CSHARP_DBG).so
CSHARP_LDFLAGS = -shared

# --- D (D Language)
D_PROGRAM = $(PROGRAM_D).so  
D_DEBUG_PROGRAM = $(PROGRAM_D_DBG).so
D_LDFLAGS = -shared

# --- JAVA
JAVA_PROGRAM = $(PROGRAM_JAVA).so
JAVA_DEBUG_PROGRAM = $(PROGRAM_JAVA_DBG).so 
JAVA_INCLUDEDIRS = -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/linux
JAVA_LDFLAGS = -shared


# --- PERL5
#PERL5_CFLAGS -- Run this at the command line: perl -e 'use Config; print $Config{ccflags}'
#PERL5_LDFLAGS -- Run this at the command line: perl -e 'use Config; print $Config{ldflags}'
#
# When you run the command commands, they will produce output allowing you to set these
# as appropriate for your system:
#
#PERL5_CFLAGS = -shared $(shell perl -e 'use Config; print $Config{ccflags}')
#PERL5_LDFLAGS = -shared $(shell perl -e 'use Config; print $Config{ldflags}')
#PERL5_CFLAGS = -shared -D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fno-strict-aliasing -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
#PERL5_LDFLAGS = -shared -L/usr/local/$(LINUX_LIBDIR)
#
PERL5_PROGRAM = $(PROGRAM_PERL5).so 
PERL5_DEBUG_PROGRAM = $(PROGRAM_PERL5_DBG).so
PERL5_INCLUDEDIRS = -I/usr/$(LINUX_LIBDIR)/perl/5.10.0/CORE
PERL5_CFLAGS = -shared -D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fno-strict-aliasing -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
PERL5_LDFLAGS = -shared -L/usr/local/$(LINUX_LIBDIR)


# --- PHP5
#/usr/libexec/apache2/libphp5.so
#PHP5_INCLUDEDIRS = `php-config --includes`
#
PHP5_PROGRAM = $(PROGRAM_PHP5).so
PHP5_DEBUG_PROGRAM = $(PROGRAM_PHP5_DBG).so
PHP5_INCLUDEDIRS = `php-config --includes`
PHP5_LDFLAGS = -shared


# --- PYTHON
#
#PYTHON_INCLUDEDIRS = -I/usr/include/python2.5
#PYTHON_LIBDIRS = -L/usr/$(LINUX_LIBDIR)/python2.5
#
PYTHON_PROGRAM = $(PROGRAM__PYTHON).so
PYTHON_DEBUG_PROGRAM = $(PROGRAM__PYTHON_DBG).so
PYTHON_CLFAGS = $(shell python-config --cflags) 
PYTHON_INCLUDEDIRS = -I/usr/include/python2.5
PYTHON_LIBDIRS = -L/usr/$(LINUX_LIBDIR)/python2.5
PYTHON_LDFLAGS = -shared $(shell python-config --ldflags) 


# --- RUBY!
RUBY_PROGRAM = $(PROGRAM_RUBY).so
RUBY_DEBUG_PROGRAM = $(PROGRAM_RUBY_DBG).so
RUBY_INCLUDEDIRS = -I$(shell ruby -e 'require "rbconfig"; puts RbConfig::CONFIG["topdir"]') 
RUBY_LDFLAGS = -shared $(shell ruby -e 'require "rbconfig"; puts RbConfig::CONFIG["LIBRUBYARG"]')


# --- TCL
# Maybe the include directory is wrong for your system?
# use this to find tcl.h:
# find / tcl.h | grep tcl.h
# Then make sure the directory below is correct for your system�.
TCL_PROGRAM = $(PROGRAM_TLC).so
RUBY_DEBUG_PROGRAM = $(PROGRAM_TLC_DBG).so
TCL_INCLUDEDIRS = -I/usr/include/tcl8.4
TCL_LDFLAGS = -shared

endif
# End LINUX -------------------------------------------------------------





# --- FreeBSD ----

ifeq ($(PLATFORM), freebsd)

DYNAMIC_OTLIB_CONTENTS = # empty

# --- Common Lisp
LISP_PROGRAM = $(PROGRAM_LISP).so
LISP_DEBUG_PROGRAM = $(PROGRAM_LISP_DBG).so 
LISP_LDFLAGS = -shared

# --- C# (C-Sharp)
CSHARP_PROGRAM = $(PROGRAM_CSHARP).so  
CSHARP_DEBUG_PROGRAM = $(PROGRAM_CSHARP_DBG).so
CSHARP_LDFLAGS = -shared

# --- D (D Language)
D_PROGRAM = $(PROGRAM_D).so  
D_DEBUG_PROGRAM = $(PROGRAM_D_DBG).so
D_LDFLAGS = -shared

# --- JAVA
JAVA_PROGRAM = $(PROGRAM_JAVA).so
JAVA_DEBUG_PROGRAM = $(PROGRAM_JAVA_DBG).so 
JAVA_INCLUDEDIRS = # empty
JAVA_LDFLAGS = -shared


# --- PERL5
#PERL5_CFLAGS -- Run this at the command line: perl -e 'use Config; print $Config{ccflags}'
#PERL5_LDFLAGS -- Run this at the command line: perl -e 'use Config; print $Config{ldflags}'
#
# When you run the command commands, they will produce output allowing you to set these
# as appropriate for your system:
#
#PERL5_CFLAGS = -shared $(shell perl -e 'use Config; print $Config{ccflags}')
#PERL5_LDFLAGS = -shared $(shell perl -e 'use Config; print $Config{ldflags}')
#PERL5_CFLAGS = -shared -D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fno-strict-aliasing -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
#PERL5_LDFLAGS = -shared -L/usr/local/lib
#
PERL5_PROGRAM = $(PROGRAM_PERL5).bundle 
PERL5_DEBUG_PROGRAM = $(PROGRAM_PERL5_DBG).bundle
PERL5_INCLUDEDIRS = -I/usr/lib/perl/5.10.0/CORE
PERL5_CFLAGS = -shared -D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fno-strict-aliasing -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
PERL5_LDFLAGS = -shared -L/usr/local/lib


# --- PHP5
#/usr/libexec/apache2/libphp5.so
#PHP5_INCLUDEDIRS = `php-config --includes`
#
PHP5_PROGRAM = $(PROGRAM_PHP5).so
PHP5_DEBUG_PROGRAM = $(PROGRAM_PHP5_DBG).so
PHP5_INCLUDEDIRS = `php-config --includes`
PHP5_LDFLAGS = -shared


# --- PYTHON
#
#PYTHON_INCLUDEDIRS = -I/usr/include/python2.5
#PYTHON_LIBDIRS = -L/usr/lib/python2.5
#
PYTHON_PROGRAM = $(PROGRAM__PYTHON).so
PYTHON_DEBUG_PROGRAM = $(PROGRAM__PYTHON_DBG).so
PYTHON_CLFAGS = $(shell python-config --cflags) 
PYTHON_INCLUDEDIRS = -I/usr/include/python2.5
PYTHON_LIBDIRS = -L/usr/lib/python2.5
PYTHON_LDFLAGS = -shared $(shell python-config --ldflags) 


# --- RUBY!
RUBY_PROGRAM = $(PROGRAM_RUBY).so
RUBY_DEBUG_PROGRAM = $(PROGRAM_RUBY_DBG).so
RUBY_INCLUDEDIRS = -I$(shell ruby -e 'require "rbconfig"; puts RbConfig::CONFIG["topdir"]') 
RUBY_LDFLAGS = -shared $(shell ruby -e 'require "rbconfig"; puts RbConfig::CONFIG["LIBRUBYARG"]')


# --- TCL
# Maybe the include directory is wrong for your system?
# use this to find tcl.h:
# find / tcl.h | grep tcl.h
# Then make sure the directory below is correct for your system�.
TCL_PROGRAM = $(PROGRAM_TLC).so
RUBY_DEBUG_PROGRAM = $(PROGRAM_TLC_DBG).so
TCL_INCLUDEDIRS = -I/usr/include/tcl8.4
TCL_LDFLAGS = -shared

endif
# End FreeBSD -------------------------------------------------------------






LINK_COMMAND  = # empty
DEBUG_LINK_COMMAND = # empty

BOOL_DYNAMIC_OTLIB = 0

# By default, the languages supported in the CPP_API are C and C++. (Two diff interfaces.)
# This Makefile exists to WRAP that for MORE languages...  PHP, Perl, Java, Python, etc.
#

# --- C and C++
#
ifeq ($(LANGUAGE), c)
else
API_CFLAGS += -fPIC
endif

# --- Common Lisp
ifeq ($(LANGUAGE), lisp)
PROGRAM = $(LISP_PROGRAM)  
DEBUG_PROGRAM = $(LISP_DEBUG_PROGRAM) 
API_CSOURCES += OTAPI_cffi.c
API_LDFLAGS += $(LISP_LDFLAGS)
BOOL_DYNAMIC_OTLIB = 1
endif


# --- D (D Language)
ifeq ($(LANGUAGE), d)
PROGRAM = $(D_PROGRAM)  
DEBUG_PROGRAM = $(D_DEBUG_PROGRAM) 
API_CPPSOURCES += OTAPI_d.cpp
API_LDFLAGS += $(D_LDFLAGS)
BOOL_DYNAMIC_OTLIB = 1
endif


# --- C# (C-Sharp)
ifeq ($(LANGUAGE), csharp)
PROGRAM = $(CSHARP_PROGRAM)  
DEBUG_PROGRAM = $(CSHARP_DEBUG_PROGRAM) 
API_CPPSOURCES += OTAPI_csharp.cpp
API_LDFLAGS += $(CSHARP_LDFLAGS)
BOOL_DYNAMIC_OTLIB = 1
endif


# --- JAVA
ifeq ($(LANGUAGE), java)
PROGRAM = $(JAVA_PROGRAM)  
DEBUG_PROGRAM = $(JAVA_DEBUG_PROGRAM) 
API_CPPSOURCES += OTAPI_java.cpp
OT_EXTRA_INCLUDEDIRS += $(JAVA_INCLUDEDIRS)
API_LDFLAGS += $(JAVA_LDFLAGS)
BOOL_DYNAMIC_OTLIB = 1
endif


# --- PERL
#
ifeq ($(LANGUAGE), perl5)
PROGRAM = $(PERL5_PROGRAM) 
DEBUG_PROGRAM = $(PERL5_DEBUG_PROGRAM) 
OT_EXTRA_INCLUDEDIRS += $(PERL5_INCLUDEDIRS)
API_CPPSOURCES += OTAPI_perl5.cpp
API_CFLAGS += $(PERL5_CFLAGS)
API_LDFLAGS += $(PERL5_LDFLAGS)
BOOL_DYNAMIC_OTLIB = 1
endif


# --- PHP5
ifeq ($(LANGUAGE), php5)
API_CPPSOURCES += OTAPI_php.cpp
OT_EXTRA_INCLUDEDIRS += $(PHP5_INCLUDEDIRS) 
PROGRAM = $(PHP5_PROGRAM)
DEBUG_PROGRAM = $(PHP5_DEBUG_PROGRAM)
API_LDFLAGS += $(PHP5_LDFLAGS)
BOOL_DYNAMIC_OTLIB = 1
endif


# --- PYTHON
ifeq ($(LANGUAGE), python)
PROGRAM = $(PYTHON_PROGRAM)
DEBUG_PROGRAM = $(PYTHON_DEBUG_PROGRAM)
OT_EXTRA_INCLUDEDIRS += $(PYTHON_INCLUDEDIRS)
OT_EXTRA_LIBDIRS += $(PYTHON_LIBDIRS)
API_CPPSOURCES += OTAPI_python.cpp
API_LDFLAGS += $(PYTHON_LDFLAGS)
BOOL_DYNAMIC_OTLIB = 1
endif


# --- RUBY!
ifeq ($(LANGUAGE), ruby)
API_CPPSOURCES += OTAPI_ruby.cpp
OT_EXTRA_INCLUDEDIRS += $(RUBY_INCLUDEDIRS)
PROGRAM = $(RUBY_PROGRAM)
DEBUG_PROGRAM = $(RUBY_DEBUG_PROGRAM)
API_LDFLAGS += $(RUBY_LDFLAGS)
BOOL_DYNAMIC_OTLIB = 1
endif


# --- TCL
ifeq ($(LANGUAGE), tcl)
API_CPPSOURCES += OTAPI_tcl.cpp
PROGRAM = $(TCL_PROGRAM)
DEBUG_PROGRAM = $(TCL_DEBUG_PROGRAM)
OT_EXTRA_INCLUDEDIRS += $(TCL_INCLUDEDIRS)
API_LDFLAGS += $(TCL_LDFLAGS)
BOOL_DYNAMIC_OTLIB = 1
endif




# ---------------------------------------------------------------------

# --- TRANSPORT

# This is not a target, but a command-line option.
#
# So you have to do: make -f Makefile.API PLATFORM=linux LANGUAGE=php5 TRANSPORT=ZMQ
#                OR: make -f Makefile.API PLATFORM=darwin LANGUAGE=c  TRANSPORT=ZMQ debug
#                OR: make -f Makefile.API PLATFORM=freebsd LANGUAGE=ruby TRANSPORT=ZMQ
# 		Etc...
#

#XMLRPCPP_INCLUDEDIR = -I../xmlrpcpp/src
#XMLRPCPP_LIBDIR = -L../xmlrpcpp/

ifeq ($(TRANSPORT), ZMQ)
API_CFLAGS += -DOT_ZMQ_MODE
#OT_EXTRA_INCLUDEDIRS += $(XMLRPCPP_INCLUDEDIR)

#API_LDFLAGS += -lXmlRpc
#OT_EXTRA_LIBDIRS += $(XMLRPCPP_LIBDIR)
endif







# ---------------------------------------------------------------------
#
# The CSOURCES macro contains a list of source files.
#
# The COBJECTS macro converts the CSOURCES macro into a list
# of object files.
#
# The CFLAGS macro contains a list of options to be passed to
# the compiler.  Adding "-g" to this line will cause the compiler
# to add debugging information to the executable.
#
# The CC macro defines the C compiler.
#
# The LDFLAGS macro contains all of the library and library
# directory information to be passed to the linker.
#

INCLUDEDIRS = $(PLATFORM_INCLUDEDIRS) $(OT_EXTRA_INCLUDEDIRS) $(SSL_INCLUDEDIRS) $(OT_INCLUDEDIRS)


LIBDIRS = $(PLATFORM_LIBDIRS) $(OT_EXTRA_LIBDIRS) $(SSL_LIBDIRS) $(OT_LIBDIRS)

CSOURCES = $(API_CSOURCES)

CXXSOURCES = $(API_CPPSOURCES) \
			 OpenTransactions.cpp \
			 OTServerConnection.cpp \
			 OTClient.cpp \
			 OTAPI.cpp

CXXOBJECTS = $(CXXSOURCES:.cpp=.o)  # expands to list of object files
COBJECTS   = $(CSOURCES:.c=.o)
CFLAGS     = $(INCLUDEDIRS) $(API_CFLAGS) $(FT_FLAGS) -c
DEBUG_FLAGS = -g
CXX = g++
CC = $(C_COMPILER)

LIBS = $(API_LIBS)
DEBUG_LIBS = $(API_DEBUG_LIBS)


# --- LDFLAGS
#
LDFLAGS = $(LIBDIRS) $(API_LDFLAGS) $(LIBS) 
DEBUG_LDFLAGS = $(LIBDIRS) $(API_LDFLAGS) $(DEBUG_LIBS) 






#
ifeq ($(LANGUAGE), c)
LINK_COMMAND  = ar rc $(PROGRAM) $(CXXOBJECTS) $(COBJECTS)
DEBUG_LINK_COMMAND = ar rc $(DEBUG_PROGRAM) $(CXXOBJECTS) $(COBJECTS)
else
# ---------------------------------------------------------------------
# --- DARWIN
ifeq ($(PLATFORM), darwin)
LINK_COMMAND = $(CXX) $(LDFLAGS) -o $(PROGRAM) $(CXXOBJECTS) $(COBJECTS)
DEBUG_LINK_COMMAND = $(CXX) $(DEBUG_LDFLAGS) -o $(DEBUG_PROGRAM) $(CXXOBJECTS) $(COBJECTS)
endif
# End DARWIN -------------------------------------------------------------
# --- LINUX -----
ifeq ($(PLATFORM), linux)
LINK_COMMAND = $(CXX) $(CXXOBJECTS) $(COBJECTS) $(LDFLAGS) -o $(PROGRAM)
DEBUG_LINK_COMMAND = $(CXX)  $(CXXOBJECTS) $(COBJECTS) $(DEBUG_LDFLAGS) -o $(DEBUG_PROGRAM)
endif
# End LINUX -------------------------------------------------------------
# --- FreeBSD ----
ifeq ($(PLATFORM), freebsd)
LINK_COMMAND = $(CXX) $(CXXOBJECTS) $(COBJECTS) $(LDFLAGS) -o $(PROGRAM)
DEBUG_LINK_COMMAND = $(CXX)  $(CXXOBJECTS) $(COBJECTS) $(DEBUG_LDFLAGS) -o $(DEBUG_PROGRAM)
endif
# End FreeBSD -------------------------------------------------------------
endif





# ---------------------------------------------------------------------

# --- TARGETS

#
# Default target: the first target is the default target.
# Just type "make -f Makefile.API_MAC_OSX" to build it.
#

all: $(PROGRAM)

# This was my attempt to automatically re-build the OTLib with linux's dynamic options turned on.
# Since this doesn't work, the user will have to rebuild OTLib by hand, with those options on, if
# he wishes to use the OTAPI.
#
ifeq ($(BOOL_DYNAMIC_OTLIB), 1)
#THROWAWAY = $(shell `cd ../OTLib && make clean && make PLATFORM=$(PLATFORM) $(DYNAMIC_OTLIB_CONTENTS)`)
else
THROWAWAY = # empty
endif

$(PROGRAM): $(CXXOBJECTS) $(COBJECTS)
	$(LINK_COMMAND)

debug: CFLAGS += $(DEBUG_FLAGS)
debug: LIBS = $(DEBUG_LIBS)
debug: LDFLAGS = $(DEBUG_LDFLAGS)
debug: $(CXXOBJECTS) $(COBJECTS) 
	$(DEBUG_LINK_COMMAND)


# ---------------------------------------------------------------------


#
# Object targets: rules that define objects, their dependencies, and
# a list of commands for compilation.
#

SFSocket.o: ./SSL-Example/SFSocket.c ./SSL-Example/SFSocket.h
	$(CC) $(CFLAGS) -o ./SSL-Example/SFSocket.o ./SSL-Example/SFSocket.c

OTServerConnection.o: OTServerConnection.cpp OTServerConnection.h
	$(CXX) $(CFLAGS) -o OTServerConnection.o OTServerConnection.cpp
OTClient.o: OTClient.cpp OTClient.h
	$(CXX) $(CFLAGS) -o OTClient.o OTClient.cpp
OpenTransactions.o: OpenTransactions.cpp OpenTransactions.h
	$(CXX) $(CFLAGS) -o OpenTransactions.o OpenTransactions.cpp

OTAPI.o: OTAPI.cpp OTAPI.h
	$(CXX) $(CFLAGS) -o OTAPI.o OTAPI.cpp


# Common Lisp
OTAPI_cffi.o: OTAPI_cffi.c 
	cp OTAPI_cffi.h OTAPI_wrap.h
	$(CC) $(CFLAGS) -o OTAPI_cffi.o OTAPI_cffi.c

# C-Sharp
OTAPI_csharp.o: OTAPI_csharp.cpp 
	cp OTAPI_csharp.h OTAPI_wrap.h
	$(CXX) $(CFLAGS) -o OTAPI_csharp.o OTAPI_csharp.cpp

# D (D Language)
OTAPI_d.o: OTAPI_d.cpp 
	cp OTAPI_d.h OTAPI_wrap.h
	$(CXX) $(CFLAGS) -o OTAPI_d.o OTAPI_d.cpp

# JAVA
OTAPI_java.o: OTAPI_java.cpp
	cp OTAPI_java.h OTAPI_wrap.h
	$(CXX) $(CFLAGS) -o OTAPI_java.o OTAPI_java.cpp
# PERL5
OTAPI_perl5.o: OTAPI_perl5.cpp
	cp OTAPI_perl5.h OTAPI_wrap.h
	$(CXX) $(CFLAGS) -o OTAPI_perl5.o OTAPI_perl5.cpp

# PHP5
OTAPI_php.o: OTAPI_php.cpp 
	cp OTAPI_php.h OTAPI_wrap.h
	$(CXX) $(CFLAGS) -o OTAPI_php.o OTAPI_php.cpp

# PYTHON
OTAPI_python.o: OTAPI_python.cpp
	cp OTAPI_python.h OTAPI_wrap.h
	$(CXX) $(CFLAGS) -o OTAPI_python.o OTAPI_python.cpp

# RUBY!
OTAPI_ruby.o: OTAPI_ruby.cpp
	cp OTAPI_ruby.h OTAPI_wrap.h
	$(CXX) $(CFLAGS) -o OTAPI_ruby.o OTAPI_ruby.cpp

# TCL
OTAPI_tcl.o: OTAPI_tcl.cpp
	cp OTAPI_tcl.h OTAPI_wrap.h
	$(CXX) $(CFLAGS) -o OTAPI_tcl.o OTAPI_tcl.cpp

#
# Clean target: "make -f Makefile.API clean" to remove unwanted objects and executables.
#
RM=rm -f

clean:
	$(RM) ot.log otapi.so otapi.bundle _otapi.so _otapi.bundle otapi.dylib _otapi.dylib $(COBJECTS) $(CXXOBJECTS) $(PROGRAM) $(DEBUG_PROGRAM)


