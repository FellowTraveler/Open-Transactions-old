#########################################################################
#									#
#									#
#	##		INSTALL - Fedora			##	#
#									#
#									#
#########################################################################


# install general developer dependencies
$ sudo yum install gcc autoconf automake libtool wget cmake

# install Open-Transactions library dependencies
$ sudo yum install boost-devel zeromq-devel protobuf-devel openssl-devel

#########    Optional API deps:   #########
# install dev deps if build for SWIG JAVA
$ sudo yum install java-1.6.0-openjdk java-1.6.0-openjdk-devel

# install dev deps if build for SWIG PERL5
$ sudo yum install perl-devel

# install dev deps if build SWIG PHP
$ sudo yum install php-devel

# install dev deps if build for SWIG PYTHON
$ sudo yum install python-devel
###########################################

# if your version of Fedora doesn't include OpenSSL 1.0:
$ wget http://openssl.org/source/openssl-1.0.0j.tar.gz
$ tar xf openssl-1.0.0j.tar.gz
$ cd openssl-1.0.0j
$ ./Configure linux-x86_64 --prefix=$HOME/.local
$ make
$ make tests
$ make install
$ cd ..

# fetch msgpack
$ wget http://msgpack.org/releases/cpp/msgpack-0.5.7.tar.gz
# build msgpack
$ tar xf msgpack-0.5. 7.tar.gz
$ cd msgpack-0.5.7
$ ./configure --prefix=$HOME/.local
$ make
$ make install
$ cd ..

# now chaiscript
$ git clone git://github.com/ChaiScript/ChaiScript.git
$ cd ChaiScript
$ cmake . -DCMAKE_INSTALL_PREFIX=$HOME/.local
$ make
$ make install
$ cd ..

# setenv variable PKG_CONFIG_PATH
$ export PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH


######## Download opentxs #############
# fetch O-T and prepare your copy for build

# 'stable' source tar ball method
$ wget https://github.com/randy-waterhouse/opentxs/downloads/opentxs.83.c.tar.gz
$ tar -zxvf opentxs.83.c.tar.gz
$ cd opentxs.83.c.tar.gz
$ autoreconf -i -f
$ mkdir build && cd build


# git pull latest development source method
$ git clone git://github.com/FellowTraveler/Open-Transactions.git
$ cd Open-Transactions
$ autoreconf -i -f
$ mkdir build && cd build
########################################



$ ../configure --prefix=$HOME/.local --with-java

(NB: Default without the "--prefix=" installs sytem-wide to /usr/local 
and will require admin priveleges for "$ sudo make install" step below.
Also, for MoneyChanger support "--with-java" flag is needed)


#########   Configure Options:   #########
Enable Configuration in Release Mode:
--enable-release	

Enable extra (noisy) warnings with compile:
--enable-warnings

Enable the signal handling for catching segmentation fault's (debug only):
--enable-sighandler

Enable system keyring storage of OT passwords:
--with-keyring=ARG
(ARG can one of gnome, kwallet, windows, mac.)

### Swig API support options:  ###

Enable Configuration for SWIG Java Support:
--with-java

Enable Configuration for SWIG Perl 5 Support:
--with-perl5

Enable Configuration for SWIG PHP Support:
--with-php

Enable Configuration for SWIG Python Support:
--with-python
##########################################

$ make uninstall (to cleanup anything in your .local folder)

$ make

Build multithreaded, need about 1gb of ram per thread.
-j (int, mutiple of of 2)


$ make install


###########   Miscellaneous Notes:   ###########

# Create a wallet data folder (will reset all user data):

$ mkdir -p ~/.ot && cp -R sample-data/ot-sample-data/* ~/.ot

# add to ~/.bash_profile

# set PATH so it includes user's .local root bin if it exists
if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi

# to avoid logging out and then logging back in again, just do ...
$ source ~/.bash_profile

# to run otserver
$ otserver

# for python client api support export env variable
$ export PYTHONPATH=$HOME/.local/lib:$PYTHONPATH

################################################

