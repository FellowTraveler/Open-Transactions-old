
OpenTransactions for ANDROID


 --- Open Transactions is currently built on:
     - Linux Ubuntu 2.6.32 and FreeBSD using g++.
     - Mac OS X 10.6.4 (Snow Leopard) using XCode as well as gcc
     - Windows 7 using MS Visual C++ 2010 Express.
     - Android 8 using NDK.
 
 --- OpenSSL version 1.0.0a (at least) is necessary, since the SAMY hash 
     uses WHRLPOOL. (XOR'd with SHA-512.) WHIRLPOOL is a new addition to 
     OpenSSL.
  
==> NOTE: Android still uses OpenSSL 0.9.8!! Thus, the default hash
    algorithm in the Android build is SHA512, *not* SAMY! This will
    be fixed as soon as the newest version of OpenSSL becomes available
    for the Android platform. 
 
 --- Let me know if there are any problems, since this is new software;
     this will be a living document.
 
NOTE: the Android build and instructions have not been updated for a while, and since then the packing libraries have been added to OT. So I'm adding the packing notes here:

---------------------------------------------------------------


INSTALL:  MsgPack Library (data packing library now used by OT.)

Available here:  msgpack.org
To install from command line:  port install msgpack
(OR) brew install msgpack

Install instructions for all platforms:
http://wiki.msgpack.org/display/MSGPACK/QuickStart+for+C+Language

---------------------------------------------------------------

INSTALL: Google's Protocol Buffers library (another data packer.)

Available here: 
http://code.google.com/p/protobuf/downloads/list

---------------------------------------------------------------


INSTALL: ZeroMQ (transport library.)

Available here: 
http://www.zeromq.org/intro:get-the-software

---------------------------------------------------------------

INSTALL: Chaiscript (scripting library)

Available here: 
http://www.chaiscript.com/

---------------------------------------------------------------


NOTE: OT hasn't been build on Android for a while, so it will
probably need some work to get it building again. Just let me know
if you are seriously playing with Android and I will put in the
work to to get it building again for you.


PRE-BUILD:

--- Presumably you have installed the Android SDK. I went with version 2.2
    as the development platform.

--- You must install a SPECIAL version of the NDK in order to use the C++
    standard libraries (which Open-Transactions does.) It's called the
    CRYSTAX NDK and I found it here:
	http://www.crystax.net/android/ndk-r4.php

--- I put the SDK folder, as well as the NDK folder, here:
	~/Android

NOTE: YOU CAN USE ANY LOCATION YOU PREFER, BUT THIS IS WHAT I'M USING FOR THIS EXAMPLE.

    So the SDK and NDK, on my system, are therefore here:
	~/Android/android-sdk-mac_x86
	~/Android/android-ndk-r4-crystax

    (But I suppose you could install them anywhere you want, as long as you
    give Eclipse the path...)

NOTE: WHENEVER YOU ARE IN AN NDK PROJECT, the Root folder is ALWAYS assumed to be the main NDK
folder, which in the above example is ~/Android/android-ndk-r4-crystax. So ALL of the other
NDK folders relevant to these instructions are found there. For example, on my computer, 
the apps, external, and sources are found in these locations:

~/Android/android-ndk-r4-crystax/apps
~/Android/android-ndk-r4-crystax/external
~/Android/android-ndk-r4-crystax/sources

Make sure you CREATE ALL THREE FOLDERS ABOVE, if they do not already exist on your system
(apps, external, and sources.)


--- Your Eclipse project will be in your workspace folder. Make sure you create a link
    from your project's folder to the NDK's apps folder.  For example:

    ln -s ~/workspace/fiatcash ~/Android/android-ndk-r4-crystax/apps/fiatcash

The above command creates a symbolic link: ~/Android/android-ndk-r4-crystax/apps/fiatcash
and points it to the folder: ~/workspace/fiatcash

This way, your code is safely in its workspace folder, but it also appears as an application
in your Android NDK's apps folder.


--- INSTALL OpenSSL and ZLIB into the external folder. You can download Android versions here:
OpenSSL:
http://android.git.kernel.org/?p=platform/external/openssl.git;a=summary
ZLIB:
http://android.git.kernel.org/?p=platform/external/zlib.git;a=summary

When you are done, they should be installed here:
~/Android/android-ndk-r4-crystax/external/openssl
~/Android/android-ndk-r4-crystax/external/zlib

NOTE: Unfortunately, that OpenSSL version will not build without a few fixes to the 
Android.mk files within. If you would like to contact me, I will be happy to send you
a copy of these files. (I also built OpenSSL as a static library, so the files were adjusted 
for that as well.)  
FURTHER NOTE: FOR THE EXACT CHANGES YOU NEED TO MAKE, SCROLL TO THE BOTTOM OF THIS FILE.


--- Copy the entire Open-Transactions directory tree into the NDK sources folder. When done,
    it will appear here:

~/Android/android-ndk-r4-crystax/sources/Open-Transactions

----------------------------------------------------------------


TO BUILD:

--- First change directory to the main NDK folder, like this:

cd ~/Android/android-ndk-r4-crystax/

--- Then to build your Android application:

make APP=fiatcash

(Assuming fiatcash is the name of your application.) 
NOTE that the APP must be all-caps.

This command causes the Android build system to look for an application called fiatcash. 
It will look for that application here:
~/Android/android-ndk-r4-crystax/apps/fiatcash

Inside the JNI folder of that app is your Android makefile. Here is the full path to it:
~/Android/android-ndk-r4-crystax/apps/fiatcash/jni/Android.mk

THAT makefile builds the NDK aspects of your Android application. In order for your application
to link to Open-Transactions (and OpenSSL, etc) your makefile does it like this:


--------------- BEGIN SAMPLE FIATCASH MAKEFILE (TO LINK WITH OPEN-TRANSACTIONS) ------------
#
# Fiatcash / Android
#
# See copyright notice that came with this distribution.
#

FIATCASH_PATH := $(call my-dir)

OTAPI_MAKE := sources/Open-Transactions/Android.mk
OTAPI_DIR := sources/Open-Transactions/testwallet


include $(OTAPI_MAKE)

# fiatcash...
#
include $(CLEAR_VARS)

LOCAL_PATH := $(FIATCASH_PATH)

LOCAL_MODULE    := fiatcash

LOCAL_C_INCLUDES += $(LOCAL_PATH) $(OTAPI_DIR)

LOCAL_SRC_FILES := fiatcash.c

LOCAL_LDLIBS += -ldl -lz

LOCAL_SHARED_LIBRARIES := libOTAPI

include $(BUILD_SHARED_LIBRARY)

------------------ END SAMPLE MAKEFILE (DO NOT INCLUDE THIS NOTICE IN THE ACTUAL FILE) ----------



--- The above makefile will activate the Open-Transactions Android makefiles, and then
    link it into your application.

--- Inside your FiatCash.java file, make sure to load the OTAPI shared library before
    making any calls. Also load it before your own application. Like this:

    System.LoadLibrary("OTAPI");
    System.LoadLibrary("fiatcash");

--- (Test files will have to be generated separately for Android since it uses SHA512 instead of
    SAMY hash.)

--- As always, the password is "test" for all the test certs that come with Open Transactions.


------------------------------------------------





--- If you don't want me to send you the OpenSSL makefiles, you can fix them yourself.

The main fix is in external/openssl/crypto/Android.mk. Near the bottom of the file, it should
look like this:

---------------- BEGIN BOTTOM OF THE FILE: external/openssl/crypto/Android.mk----------

LOCAL_CFLAGS += -DNO_WINDOWS_BRAINDEATH

include $(LOCAL_PATH)/../android-config.mk

LOCAL_C_INCLUDES += \
	external/openssl \
	external/openssl/include \
	external/zlib

# LOCAL_SHARED_LIBRARIES += libz

# ifneq ($(TARGET_SIMULATOR),true)
# 	LOCAL_SHARED_LIBRARIES += libdl
# endif

LOCAL_LDLIBS += -ldl -lz

LOCAL_MODULE:= libcrypto

include $(BUILD_STATIC_LIBRARY)

-------------- END BOTTOM OF THE FILE: external/openssl/crypto/Android.mk------------



--- ALSO, near the TOP of that file, notice that I had to capitalize all the .S files:

ifeq ($(TARGET_ARCH),arm)
	LOCAL_CFLAGS += -DOPENSSL_BN_ASM_MONT -DAES_ASM -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM
	LOCAL_SRC_FILES:= 0.9.9-dev/bn/armv4-mont.S \
	                  0.9.9-dev/aes/aes-armv4.S \
	                  0.9.9-dev/sha/sha1-armv4-large.S \
	                  0.9.9-dev/sha/sha256-armv4.S \
	                  0.9.9-dev/sha/sha512-armv4.S

----------------------------------------------------------



--- I ALSO HAD to make some changes to external/openssl/ssl/Android.mk
Notice that both libraries are now static instead of shared...

---------- BEGIN BOTTOM OF THE FILE: external/openssl/ssl/Android.mk ------------
include $(LOCAL_PATH)/../android-config.mk

LOCAL_C_INCLUDES += $(local_c_includes)

LOCAL_STATIC_LIBRARIES += libcrypto

LOCAL_MODULE:= libssl

include $(BUILD_STATIC_LIBRARY)

include $(CLEAR_VARS)

# ssltest

LOCAL_SRC_FILES:=ssltest.c

LOCAL_C_INCLUDES += $(local_c_includes)

LOCAL_STATIC_LIBRARIES := libssl

include $(LOCAL_PATH)/../android-config.mk

LOCAL_MODULE:=ssltest

LOCAL_MODULE_TAGS := optional

include $(BUILD_EXECUTABLE)
------------------END BOTTOM OF THE FILE: external/openssl/ssl/Android.mk ------------



--- I ALSO MADE a small change to one small part of external/openssl/apps/Android.mk

Make sure it says this:

LOCAL_STATIC_LIBRARIES := \
	libssl \
	libcrypto 

Instead of this:

LOCAL_SHARED_LIBRARIES := \
	libssl \
	libcrypto 



