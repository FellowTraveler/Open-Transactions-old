#!/usr/bin/env ot

// ---------------------------------


def main_not_coded_yet()
{
    print("\n\n  Congratulations, you've been selected to add that option to this script! \n It's real easy: just edit scripts/ot/ot_commands.ot, and copy some code\ninto it based on whichever sample script is appropriate.\nThen edit the opentxs script, and add your new main\nfunction to the list map_functions near the bottom. Done!\n\n")
    
    return 0
}


// ---------------------------------

def interpret_command(map_functions, map_help, strInput)
{
    var catAdmin       = 1
    var catWallet      = 2
    var catMisc        = 3
    var catMarkets     = 4
    var catAccounts    = 5
    var catOtherUsers  = 6
    var catInstruments = 7
    
    var map_categories= ["sendmsg":6,//catOtherUsers,
                         "changepw":2,//catWallet,
                         "stat":2,//catWallet,
                         "checknym":6,//catOtherUsers,
                         "writecheque":7,//catInstruments,
                         "writeinvoice":7,//catInstruments,
                         "sendcheque":6,//catOtherUsers,
                         "sendinvoice":6,//catOtherUsers,
                         "payinvoice":6,//catOtherUsers,
                         "sendvoucher":6,//catOtherUsers,
                         "buyvoucher":7,//catInstruments,
                         "withdraw":7,//catInstruments,
                         "deposit":5,//catAccounts,
                         "paydividend":4,//catMarkets,
                         "showacct":5,//catAccounts,
                         "showmint":1,//catAdmin,
                         "showpurse":2,//catWallet,
                         "showbaskets":1,//catAdmin,
                         "showoffers":4,//catMarkets,
                         "showmyoffers":4,//catMarkets,
                         "shownyms":2,//catWallet,
                         "shownym":2,//catWallet,
                         "showaccounts":2,//catWallet,
                         "showassets":2,//catWallet,
                         "showservers":2,//catWallet,
                         "sign":1,//catAdmin,
                         "addsignature":1,//catAdmin,
                         "verifysig":1,//catAdmin,
                         "verifyreceipt":2,//catWallet,
                         "activate":7,//catInstruments,
                         "confirm":7,//catInstruments,
                         "getcontract":1,//catAdmin,
                         "getmarkets":4,//catMarkets,
                         "showmarkets":4,//catMarkets,
                         "getoffers":4,//catMarkets,
                         "getmyoffers":4,//catMarkets,
                         "getboxreceipt":1,//catAdmin,
                         "refresh":2,//catWallet,
                         "refreshacct":2,//catWallet,
                         "refreshnym":2,//catWallet,
                         "importcash":7,//catInstruments,
                         "exportcash":7,//catInstruments,
                         "importnym":2,//catWallet,
                         "exportnym":2,//catWallet,
                         "importcert":2,//catWallet,
                         "exportcert":2,//catWallet,
                         "inbox":5,//catAccounts,
                         "outbox":5,//catAccounts,
                         "mail":6,//catOtherUsers,
                         "outmail":6,//catOtherUsers,
                         "delmail":6,//catOtherUsers,
                         "deloutmail":6,//catOtherUsers,
                         "showpayment":6,//catOtherUsers,
                         "payments":6,//catOtherUsers,
                         "outpayment":6,//catOtherUsers,
                         "records":3,//catMisc,
                         "clearrecords":3,//catMisc,
                         "balance":5,//catAccounts,
                         "newkey":1,//catAdmin,
                         "pass_encrypt":1,//catAdmin,
                         "pass_decrypt":1,//catAdmin,
                         "newnym":2,//catWallet,
                         "addserver":2,//catWallet,
                         "addasset":2,//catWallet,
                         "newasset":1,//catAdmin,
                         "newserver":1,//catAdmin,
                         "editnym":2,//catWallet,
                         "editacct":2,//catWallet,
                         "editasset":2,//catWallet,
                         "editserver":2,//catWallet,
                         "register":1,//catAdmin,
                         "issueasset":1,//catAdmin,
                         "newacct":5,//catAccounts,
                         "newoffer":4,//catMarkets,
                         "newbasket":1,//catAdmin,
                         "exchange":1,//catAdmin,
                         "trigger":7,//catInstruments,
                         "discard":7,//catInstruments,
                         "canceloffer":4,//catMarkets,
                         "cancelplan":7,//catInstruments,
                         "transfer":5,//catAccounts,
                         "acceptall":5,//catAccounts,
                         "acceptmoney":5,//catAccounts,
                         "accepttransfers":5,//catAccounts,
                         "acceptinbox":5,//catAccounts,
                         "acceptreceipts":5,//catAccounts,
                         "acceptinvoices":5,//catAccounts,
                         "acceptpayments":5,//catAccounts,
                         "encode":1,//catAdmin,
                         "decode":1,//catAdmin,
                         "encrypt":1,//catAdmin,
                         "decrypt":1];//catAdmin
    
    var vec_category_str=["Category Error",
                          "Advanced utilities",
                          "The user wallet",
                          "Misc",
                          "Markets (bid/ask)",
                          "Asset accounts",
                          "Dealing with other users",
                          "Financial instruments"];

    
    var the_function
    
    if (VerifyStringVal(strInput))
    {
        var strAdmin       = ""
        var strWallet      = ""
        var strMisc        = ""
        var strMarkets     = ""
        var strAccounts    = ""
        var strOtherUsers  = ""
        var strInstruments = ""
        // -----------------------------
        if ("quit" == strInput)
        {
            return (-2)
        }
        // -----------------------------
        else if ("list" == strInput)
        {
            OT_API_Output(0, "\nCommands: \n\n")
            // -----------------------------
            var help_range = map_functions.range()
            var nHelpCount = 0
            // -----------------------------
            while (!help_range.empty())
            {
                var help_tuple   = help_range.front()
                var help_command = help_tuple.first()
                // -------------------------------------------
                var strCurrentIteration = ""
                ++nHelpCount
                // -------------------------------------------
                if (0 == (nHelpCount%4)) { strCurrentIteration = help_command+"\n" }
                else { strCurrentIteration = help_command+(help_command.size() > 7 ? "\t" : "\t\t") }
                // -------------------------------------------
                help_range.pop_front()
                // -------------------------------------------
                OT_API_Output(0, strCurrentIteration)
            }
            // -------------------------------------------
            OT_API_Output(0, "\n")

            return 0  // "success" from UNIX command line perspective.
        }
        // -----------------------------------------
        else if ("help" == strInput)
        {
            OT_API_Output(0, "\nCommands: \n\n")
            // -----------------------------
            var help_range = map_help.range()
            var type_range = map_categories.range()
            // -----------------------------
            while (!help_range.empty())
            {
                var help_tuple       = help_range.front()
                var help_command     = help_tuple.first()
                var help_description = help_tuple.second()
                
                var type_tuple       = type_range.front()
                var type_command     = type_tuple.first()
                var type_category    = type_tuple.second()
                // -------------------------------------------
                var strCurrentIteration = help_command+(help_command.size() > 7 ? "\t" : "\t\t")+help_description+"\n"
                
                switch(type_category)
                {
                case (catAdmin) {
                    strAdmin += strCurrentIteration
                    break
                }
                case (catWallet) {
                    strWallet += strCurrentIteration
                    break
                }
                case (catMisc) {
                    strMisc += strCurrentIteration
                    break
                }
                case (catMarkets) {
                    strMarkets += strCurrentIteration
                    break
                }
                case (catAccounts) {
                    strAccounts += strCurrentIteration
                    break
                }
                case (catOtherUsers) {
                    strOtherUsers += strCurrentIteration
                    break
                }
                case (catInstruments) {
                    strInstruments += strCurrentIteration
                    break
                }
                default {
                    
                    break
                }
                }
                // -------------------------------------------
                help_range.pop_front()
                type_range.pop_front()
            }
            
            var strCategory = ""
            
            strCategory = vec_category_str[catAdmin]
            OT_API_Output(0, "\n "+strCategory+": \n"+strAdmin)
            strCategory = vec_category_str[catWallet]
            OT_API_Output(0, "\n "+strCategory+": \n"+strWallet)
            strCategory = vec_category_str[catMisc]
            OT_API_Output(0, "\n "+strCategory+": \n"+strMisc)
            strCategory = vec_category_str[catMarkets]
            OT_API_Output(0, "\n "+strCategory+": \n"+strMarkets)
            strCategory = vec_category_str[catAccounts]
            OT_API_Output(0, "\n "+strCategory+": \n"+strAccounts)
            strCategory = vec_category_str[catOtherUsers]
            OT_API_Output(0, "\n "+strCategory+": \n"+strOtherUsers)
            strCategory = vec_category_str[catInstruments]
            OT_API_Output(0, "\n "+strCategory+": \n"+strInstruments)
            OT_API_Output(0, "\n")

            return 0  // "success" from UNIX command line perspective.
        }
        // -----------------------------------------
        else // all other comands.
        {
            var the_range = map_functions.range()
            // -----------------------------
            while (!the_range.empty())
            {
                var the_tuple = the_range.front()
                if (strInput == the_tuple.first())
                {
                    the_function = the_tuple.second()
                    break
                }
                the_range.pop_front()
            }
            // -----------------------------------------
            
            if (!the_function.is_var_undef()) // found it!
            {
                var nReturn = the_function()
                
                switch (nReturn)
                {
                        // This means "no error, but also didn't do anything."
                    case (0) {
                        // This is considered a form of success, so we
                        // return 0 (UNIX CLI success.)
                        //
                        return 0
                    }
                    case (1) {
                        // This is an explicit success, so we
                        // return 0 (UNIX CLI success.)
                        //
                        return 0
                    }
                    case (-1) {
                        // This is an explicit failure, so we
                        // return -1 (UNIX failures tend to be non-zero values.)
                        //
                        return -1
                    }
                    default {
                        return -1
                    }
                }
            }
            else
            {
                OT_API_Output(0, "\n Undefined command: \"" + strInput + "\" -- Try 'list'.\n\n")
            }
        }
    }
    
    (-1)
}

// ---------------------------------


def main_loop(map_functions, map_help)
{
    // ---------------------------------
    // See if the command was passed in on the command line.
    //
    if (VerifyExists("Args", false))
    {
        var strCommand = OT_CLI_GetValueByKey(Args, "ot_cli_command")
        
        if (VerifyStringVal(strCommand)) // command was passed in on the command line...
        {
            return interpret_command(map_functions, map_help, strCommand)
        }
    }

    // ---------------------------------
    //
    // Otherwise, drop into the OT high-level prompt.
    //
    else
    {
        OT_API_Output(0, ".\n..\n...\n....\n.....\n\n")

        while(true)
        {
            OT_API_Output(0, "opentxs> ")
            var strInput =  OT_CLI_ReadLine()
            var bDisplayGap = true
            // ------------------------
            var nInterpreted = interpret_command(map_functions, map_help, strInput)
            
            if (VerifyIntVal(nInterpreted) && ((-2) == nInterpreted))
            {
                break
            }
            // ------------------------
            if (bDisplayGap)
            {
                OT_API_Output(0, ".\n..\n...\n....\n.....\n\n")
            }
            // ------------------------
        } // while
    }
    
    0
}




// ---------------------------------

// Start and finish.
//
def main_opentxs()
{
    
    var catAdmin       = 1
    var catWallet      = 2
    var catMisc        = 3
    var catMarkets     = 4
    var catAccounts    = 5
    var catOtherUsers  = 6
    var catInstruments = 7

    // Note: ADDING NEW COMMANDS IS **VERY** EASY!!
    // Just add the command to the list below, and
    // then edit the ot/ot_commands.ot file to add
    // the implementation for your main function!
        
    var map_functions = ["sendmsg":main_sendmsg,                // send a message to another nym's in-mail.
                         "changepw":main_change_passphrase,     // Change the master passphrase for the wallet.
                         "stat":main_stat,                      // display wallet contents.
                         "checknym":main_check_user,            // download a nym's public key based on his ID.
                         "writecheque":main_write_cheque,       // write a cheque and print it out to the screen.
                         "writeinvoice":main_write_invoice,     // write an invoice and print it out to the screen.
                         "sendcheque":main_sendcheque,          // write a cheque and then send it to the recipient.
                         "sendinvoice":main_sendinvoice,        // write an invoice and then send it to the recipient.
                         "payinvoice":main_not_coded_yet,       // pay an invoice.
                         "sendvoucher":main_sendvoucher,        // withdraw a voucher and then send it to the recipient.
                         "buyvoucher":main_withdraw_voucher,    // withdraw a voucher (cashier's cheque).
                         "withdraw":main_withdraw_cash,         // withdraw cash (from acct on server to local purse.)
                         "deposit":main_deposit,                // deposit cash purse, cheque, voucher, or invoice.
                         "paydividend":main_pay_dividend,       // dividend payout, sent to all shareholders in voucher form.
                         "showacct":main_stat_acct,             // show account stats for a single account.
                         "showmint":main_show_mint,             // show a mint file for specific asset ID. Download if necessary.
                         "showpurse":main_show_purse,           // show contents of cash purse.
                         "showbaskets":main_not_coded_yet,      // show basket currencies issued on a particular server.
                         "showoffers":main_show_market_offers,  // show all offers on a particular server and market.
                         "showmyoffers":main_show_nym_offers,   // show mynym's offers on a particular server and market.
                         "shownyms":stat_nyms,                  // show the nyms in the wallet.
                         "shownym":main_nym_stat,               // show the statistics for a specific nym.
                         "showaccounts":stat_accounts,          // show the asset accounts in the wallet.
                         "showassets":stat_assets,              // show the currency contracts in the wallet.
                         "showservers":stat_servers,            // show the server contracts in the wallet.
                         "sign":main_sign_contract,             // sign a contract, releasing all other signatures first.
                         "addsignature":main_add_signature,     // add a signature to a contract without releasing others.
                         "verifysig":main_verify_signature,     // verify a signature on a contract.
                         "verifyreceipt":main_verify_last_receipt, // verify the intermediary files against the last signed receipt.
                         "activate":main_not_coded_yet,         // activate a smart contract or payment plan.
                         "confirm":main_not_coded_yet,          // confirm your agreement to a smart contract or payment plan.
                         "getcontract":main_download_contract,  // download an asset or server contract by its ID.
                         "getmarkets":main_get_market_list,     // download the list of markets.
                         "showmarkets":main_show_market_list,   // display the list of markets.
                         "getoffers":main_get_market_offers,    // download the list of market offers.
                         "getmyoffers":main_get_nym_market_offers,// download the list of market offers placed by mynym.
                         "getboxreceipt":main_get_box_receipt,  // downloads a box receipt based on transaction ID.
                         "refresh":main_refresh_all,            // "performs both refreshnym and refreshacct."
                         "refreshacct":main_dl_acct_files,      // "download latest intermediary files for myacct."
                         "refreshnym":main_refresh_nym,         // download latest intermediary files for mynym.
                         "importcash":main_import_cash,         // Import a cash purse.
                         "exportcash":main_export_cash,         // Export a cash purse.
                         "importnym":main_import_nym,           // Import an OT Nym that was previously exported.
                         "exportnym":main_export_nym,           // Export an OT Nym as a single importable file.
                         "importcert":main_import_cert,         // Import an OpenSSL cert and create a Nym based on it.
                         "exportcert":main_export_cert,         // Export the OpenSSL cert (only) for a specific Nym.
                         "inbox":main_show_inbox,               // display inbox of a particular account.
                         "outbox":main_show_outbox,             // display outbox of a particular account.
                         "mail":main_show_mail,                 // display in-mail for a particular nym.
                         "outmail":main_show_outmail,           // display out-mail for a particular nym.
                         "delmail":main_not_coded_yet,          // delete an in-mail item
                         "deloutmail":main_not_coded_yet,       // delete an out-mail item
                         "showpayment":main_show_payment,       // show the details of a payment in the payments inbox.
                         "payments":main_show_payments_inbox,   // display contents of incoming payments box.
                         "outpayment":main_show_outpayment,     // display contents of outgoing payments box.
                         "records":main_show_records,           // display contents of record box.
                         "clearrecords":main_clear_records,     // clear all archived records and receipts.
                         "balance":main_balance,                // display balance for a specific account.
                         "newkey":main_new_symmetric_key,       // create a new symmetric key.
                         "pass_encrypt":main_password_encrypt,  // password-encrypt a plaintext using a symmetric key.
                         "pass_decrypt":main_password_decrypt,  // password-decrypt a ciphertext using a symmetric key.
                         "newnym":main_create_nym,              // create a new nym.
                         "addserver":main_add_server,           // paste an existing server contract, import it into your wallet.
                         "addasset":main_add_asset,             // paste an existing asset contract, import it into your wallet.
                         "newasset":main_create_asset_contract, // create a new asset contract.
                         "newserver":main_create_server_contract,// create a new server contract.
                         "editnym":main_edit_nym,               // edit the nym's label, as it appears in your wallet.
                         "editacct":main_edit_account,          // edit an asset account's label, as it appears in your wallet.
                         "editasset":main_edit_asset,           // edit a currency contract's label, as it appears in your wallet.
                         "editserver":main_edit_server,         // edit a server contract's label, as it appears in your wallet.
                         "register":main_register_nym,          // register a nym onto an OT server.
                         "issueasset":main_issue_asset,         // issue a currency contract onto an OT server.
                         "newacct":main_create_acct,            // create a new asset account.
                         "newoffer":main_create_offer,          // create a new market offer.
                         "newbasket":main_not_coded_yet,        // create a new basket currency.
                         "exchange":main_not_coded_yet,         // exchange in/out of a basket currency.
                         "trigger":main_not_coded_yet,          // trigger a clause on a running smart contract.
                         "discard":main_not_coded_yet,          // discard/cancel a not-yet-cashed, outgoing instrument.
                         "canceloffer":main_cancel_offer,       // cancel a still-running, recurring market offer.
                         "cancelplan":main_cancel_plan,         // cancel a still-running, recurring payment plan.
                         "transfer":main_transfer,              // send a transfer from myacct to hisacct.
                         "acceptall":main_accept_all,           // accept all incoming transfers, receipts, payments, and invoices.
                         "acceptmoney":main_accept_money,       // accept all incoming transfers and payments into MyAcct.
                         "accepttransfers":main_accept_transfers,// accept all incoming transfers in MyAcct's inbox.
                         "acceptinbox":main_accept_inbox,       // accept all incoming transfers and receipts in MyAcct's inbox.
                         "acceptreceipts":main_accept_receipts, // accept all receipts in MyAcct's inbox.
                         "acceptinvoices":main_accept_invoices, // pay all invoices in MyNym's payments inbox.
                         "acceptpayments":main_accept_payments, // accept all incoming payments in MyNym's payments inbox.
                         "encode":main_encode,                  // OT-base64-encode into armor.
                         "decode":main_decode,                  // OT-base64-decode out of armor.
                         "encrypt":main_encrypt,                // encrypt plaintext to a nym's public key.
                         "decrypt":main_decrypt];               // decrypt ciphertext using nym's private key.
        
    var map_help      = ["sendmsg":                             "send a message to another nym's in-mail.",
                         "changepw":                            "change the master passphrase for the wallet.",
                         "stat":                                "display wallet contents.",
                         "checknym":                            "download a nym's public key based on his ID.",
                         "writecheque":                         "write a cheque and print it out to the screen.",
                         "writeinvoice":                        "write an invoice and print it out to the screen.",
                         "sendcheque":                          "write a cheque and then send it to the recipient.",
                         "sendinvoice":                         "write an invoice and then send it to the recipient.",
                         "payinvoice":                          "pay an invoice.",
                         "sendvoucher":                         "withdraw a voucher and then send it to the recipient.",
                         "buyvoucher":                          "withdraw from myacct as a voucher (cashier's cheque.)",
                         "withdraw":                            "withdraw cash. (From acct on server into local purse.)",
                         "deposit":                             "deposit cash, cheque, voucher, or tokens.",
                         "paydividend":                         "dividend payout, sent to all shareholders (in voucher form.)",
                         "showacct":                            "show account stats for a single account.",
                         "showmint":                            "show a mint file for specific asset ID. Download if necessary.",
                         "showpurse":                           "show contents of cash purse.",
                         "showbaskets":                         "show basket currencies issued on a particular server.",
                         "showoffers":                          "show all offers on a particular server and market.",
                         "showmyoffers":                        "show mynym's offers on a particular server and market.",
                         "shownyms":                            "show the nyms in the wallet.",
                         "shownym":                             "show the statistics for a specific nym.",                         
                         "showaccounts":                        "show the asset accounts in the wallet.",
                         "showassets":                          "show the currency contracts in the wallet.",
                         "showservers":                         "show the server contracts in the wallet.",
                         "sign":                                "sign a contract, releasing all other signatures first.",
                         "addsignature":                        "add a signature to a contract without releasing others.",
                         "verifysig":                           "verify a signature on a contract.",
                         "verifyreceipt":                       "verify your intermediary files against the last signed receipt.",
                         "activate":                            "activate a smart contract or payment plan.",
                         "confirm":                             "confirm your agreement to a smart contract or payment plan.",
                         "getcontract":                         "download an asset or server contract by its ID.",
                         "getmarkets":                          "download the list of markets.",
                         "showmarkets":                         "display the list of markets.",
                         "getoffers":                           "download the list of market offers.",
                         "getmyoffers":                         "download mynym's list of market offers.",
                         "getboxreceipt":                       "downloads a box receipt based on transaction ID.",
                         "refresh":                             "performs both refreshnym and refreshacct.",
                         "refreshacct":                         "download latest intermediary files for myacct.",
                         "refreshnym":                          "download latest intermediary files for mynym.",
                         "importcash":                          "import a cash purse.",
                         "exportcash":                          "export a cash purse.",
                         "importnym":                           "import an OT Nym that was previously exported.",
                         "exportnym":                           "export an OT Nym as a single importable file.",
                         "importcert":                          "import an OpenSSL cert and create a Nym based on it.",
                         "exportcert":                          "export the OpenSSL cert (only) for a specific Nym.",                     
                         "inbox":                               "display inbox of a particular account.",
                         "outbox":                              "display outbox of a particular account.",
                         "mail":                                "display in-mail for a particular nym.",
                         "outmail":                             "display out-mail for a particular nym.",
                         "delmail":                             "delete an in-mail item.",
                         "deloutmail":                          "delete an out-mail item.",
                         "showpayment":                         "show the details of an incoming payment in the payments inbox.",
                         "payments":                            "display contents of incoming payments box.",
                         "outpayment":                          "display contents of outgoing payments box.",
                         "records":                             "display contents of record box.",
                         "clearrecords":                        "clear all archived records and receipts.",
                         "balance":                             "display balance for a specific account.",
                         "newkey":                              "create a new symmetric key.",
                         "pass_encrypt":                        "password-encrypt a plaintext using a symmetric key.",
                         "pass_decrypt":                        "password-decrypt a ciphertext using a symmetric key.",
                         "newnym":                              "create a new nym.",
                         "addserver":                           "paste an existing server contract, import it into your wallet.",
                         "addasset":                            "paste an existing asset contract, import it into your wallet.",                        
                         "newasset":                            "create a new asset contract.",
                         "newserver":                           "create a new server contract.",
                         "editnym":                             "edit the nym's label, as it appears in your wallet.",
                         "editacct":                            "edit an asset account's label, as it appears in your wallet.",
                         "editasset":                           "edit a currency contract's label, as it appears in your wallet.",
                         "editserver":                          "edit a server contract's label, as it appears in your wallet.",
                         "register":                            "register a nym onto an OT server.",
                         "issueasset":                          "issue a currency contract onto an OT server.",
                         "newacct":                             "create a new asset account.",
                         "newoffer":                            "create a new market offer.",
                         "newbasket":                           "create a new basket currency.",
                         "exchange":                            "exchange in/out of a basket currency.",
                         "trigger":                             "trigger a clause on a running smart contract.",
                         "discard":                             "discard/cancel a not-yet-cashed, outgoing instrument.",
                         "canceloffer":                         "cancel a still-running, recurring market offer.",
                         "cancelplan":                          "cancel a still-running, recurring payment plan.",
                         "transfer":                            "send a transfer from myacct to hisacct.",
                         "acceptall":                           "accept all incoming transfers, receipts, payments, and invoices.",
                         "acceptmoney":                         "accept all incoming transfers and payments into MyAcct.",
                         "accepttransfers":                     "accept all incoming transfers in MyAcct's inbox.",
                         "acceptinbox":                         "accept all incoming transfers and receipts in MyAcct's inbox.",
                         "acceptreceipts":                      "accept all receipts in MyAcct's inbox.",
                         "acceptinvoices":                      "pay all invoices in MyNym's payments inbox.",
                         "acceptpayments":                      "accept all incoming payments in MyNym's payments inbox.",
                         "encode":                              "OT-base64-encode into armor.",
                         "decode":                              "OT-base64-decode out of armor.",
                         "encrypt":                             "encrypt plaintext to a nym's public key.",
                         "decrypt":                             "decrypt ciphertext using nym's private key."];
    
    
    main_loop(map_functions, map_help)
}
    




main_opentxs()
    













